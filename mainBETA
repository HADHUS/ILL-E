






































































































































'''
╓─────────────────────────────────────────────────────────────────────────────────────┐
║                                                                                     │
║ Name:                                                                               │
║ Iloraea Expanded                                                                    │
║                                                                                     │
║ Description:                                                                        │
║ Unstable version of an unfinished game.                                             │
║                                                                                     │
╠══════════════════════════════════╤══════════════════════════════════════════════════╡
║                                  │░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████░░░░░░│
║ Author:                          │░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████░░░██░░░░░│
║ HADHUS                           │░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████░░░░░░░██░░░░░│
║                                  │░░░░░░░░░░░░░░░░░░░░░░░░░░███████░░░░░░░░░░██░░░░░│
║ Credits:                         │░░░░░░░░░░░░░░░░░░░░░░░████████░░░░░░░░░░░░██░░░░░│
║ Aquilo - Original Idea/Developer │░░░░░░░░░░░░░░░░░░░░██████████░░█░░░░░░░░░██░░░░░░│
║                                  │░░░░░░░░░░░░░░░░░░░████████░█░░░░░░░██░░░░██░░░░░░│
╠══════════════════════════════════╡░░░░░░░░░░░░░░░░░████████████░░░░░░░██░░░██░░░░░░░│
║                                  │░░░░░░░░░░░░░░░█████████░████████░░░██░░██░░░░░░░░│
║ Assignment:                      │░░░░░░░░░░░░░░█████████████████░░░░██░░███░░░░░░░░│
║ ???                              │░░░░░░░░░░░░░█████░██████░░░░███░░░█░░░███░░░░░░░░│
║                                  │░░░░░░░░░░░░░████░███░██████░█░██░░█░░███░░░░░░░░░│
╠══════════════════════════════════╡░░░░░░░░░░░░████████░██████████░░███░████░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░░░░███░███░████░░████░█████████░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░░░███░██░██░█████████░████░████░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░░░███░██░░██░███████░█████████░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░░░███░██░██░░░░░░░░██████████░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░░███░░█░░░███░░░███████░████░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░████░█░░░░░░░░░█████░██████░░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░███░░█░░░░█████░░░████████░░░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░███████░░░░░░░░██████████░░░░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░███████░░░░░░░████████░░░░░░░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░███████░░░░░░░█████░░░░░░░░░░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░███░███░░░░█████░░░░░░░░░░░░░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░██░██░░░████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░██░░██████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
║╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳╳│░░░░░░░░░░█████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
╚═════════════════════════════════════════════════════════════════════════════════════╛
'''

import os
import time
import random
import math
import ast
from readchar import readkey, key #ignore on github (missing package manager)

#UNCHANGED - PURPOSE: Climbing speed bonus value
cspdb = 0

#UNCHANGED - PURPOSE: Does something with timeshift, and involves the player doing bard work
bardcd = 0

#UNCHANGED - PURPOSE: 1-0 value for stealth checks
invis = 0

#UNCHANGED - PURPOSE: Dictates the current hour
hours = 6
#UNCHANGED - PURPOSE: Dictates the current minute
minutes = 0
#UNCHANGED - PURPOSE: Dictates whether it's day or night.
timeofday = "am"
#UNCHANGED - PURPOSE: Player hunger points
hunger = 10
#UNCHANGED - PURPOSE: Maximum player hunger points
maxhunger = 10
#UNCHANGED - PURPOSE: Player hitpoints
hp = 0
#UNCHANGED - PURPOSE: Maximum player hitpoints
maxhp = 0

#UNCHANGED - PURPOSE: A conditional value used in the start combat and the Broken Ballista quest combat
dp = 0

#UNCHANGED - PURPOSE: A conditional value used to determine if the player has found a specific sword (There can only be one)
vdf = 0

#UNCHANGED - PURPOSE: A conditional value used for determining if the player has the "gambler's trinket"
gt = 0
#UNCHANGED - PURPOSE: A conditional value used for determining if the quest "A Letter To Matthew" has been completed
soq = 0
#UNCHANGED - PURPOSE: A staged (0-1-2) conditional value for a fetch quest (converse - B) in Stones Edge. (2 = completed, 1 = accepted quest, 0 = hasn't started quest)
vq = 0
#UNCHANGED - PURPOSE: A staged (0-1-2) conditional value for a fetch quest "A Broken Ballista" (2 = player gives oak branches and iron ingot to npc/ballista finished (player needs to interact with npc again), 1 = Accepted quest and needs to retrive materials, 0 = quest not started)
gsq = 0

#UNCHANGED - PURPOSE: A list of all discovered enemies (killing a new enemy type adds it to the list)
bestiarylist = []

#CHANGE: Reformatted | PURPOSE: A list of all possible character classes
classes = [
  "warrior",
  "rogue",
  "mage",
  "cleric",
  "monk",
  "berserker",
  "ranger",
  "skirmisher",
  "druid"
  ]

#CHANGE: Reformatted | PURPOSE: A list for storing class descriptions
cdesc = [
  #Warrior
  "'Strike strong, defend stronger.'  Your defense is your offense, and your offense helps your defense.  Warriors use melee weapons paired with shields to both defend and attack. Excellent all-rounders.",
  #Rogue
  "'Attack swiftly, and use your knife skills to your advantage.'  Rogues excel at debuffing their opponents with bleed effects while doing high damage with knives. Swift DOT attackers.",
  #Mage
  "'Feel the mana surging through you.'  Mages are excellent arcanists, drawing upon all aspects of magic - from arcane, to holy, to natural.  Good AOE and burst damage.",
  #Cleric
  "'Let those who defy you feel the wrath of the divine.' Clerics are holy mages who call the might of the divine.  Excellent healers and light mages alike, these paladins of the magic clan aren't too shabby with a warhammer either.  Healers, AOE, and decent damage-dealers.",
  #Monk
  "'Land blow after blow, burdened by nothing in your fists.' Monks have no need for weapons, they rapidly strike foes with their fists enhanced after years of training. Swift attackers, double strike DPS focused.",
  #Berserker
  "'Let your primal fury within guide your blade.' Berserkers enter rages in battle, honing their combat skills while leaving them vulnerable.  Insane DPS/Bulky Tanks.",
  #Ranger
  "'Your enemies lie helpless before they even see you.' Experts of the bow and crossbow, rangers are able to snipe enemies who haven't spotted them, giving them a distinct edge in combat. Bow/crossbow experts/Solid single-strike/continuous DPS.",
  #Skirmisher
  "'Strike twice for every time your foe even tries to strike back.' Skirmishers utilise their many combat techniques to their advantage, masters of tactical combat. DPS specialists, Burst/Single Strike/Continuous.",
  #Druid
  "'Face nature with open arms and your foes will face it too.' Druids call upon all aspects of nature - summoning storms, controlling plants, and transforming into beasts.  Bulky DPS/AOE Burst units.",
  ]

#CHANGE: Reformatted | PURPOSE: A list of possible styles a character can possess
styles = [
  "swift",
  "strong",
  "magic",
  "tough",
  ]

#UNCHANGED - PURPOSE: A list of all possible actions during combat (gets added to, depending on class)
battleactions = ["attack", "block", "run"]

#UNCHANGED - PURPOSE: A list of all possible actions in a given location
locationactions = ["west", "east", "north", "south", "save data", "loadout", "inventory", "help", "coins","hp", "time", "hunger", "quests", "exchange"]

#CHANGE: All locations added | PURPOSE: A list of locations where fishing is allowed
fishingspots = [
    #GRAVEL BEACH
    "twilighttundra1", "twilighttundra2",
    #HILLS RIVER SEGMENT
    "verdanthills4", "verdanthills5", "verdanthills9", "verdanthills6",
    #MESA RIVER SEGMENT
    "sunsetmesa2", "sunsetmesa1", "sunsetmesa4", "sunsetmesa5",
    #COLD OCEAN
    "northernsea1", "northernsea2", "northernsea3",
    #OAKEN SPRING
    "oakensanctuary3", "oakensanctuary4", "oakensanctuary9",
    #LAKE OYA
    "LakeOya",
    #RAINFOREST RIVER SEGMENT
    "scintillantrainforest3", "scintillantrainforest8", "scintillantrainforest13", "scintillantrainforest14", "scintillantrainforest15", "scintillantrainforest17",
    #BOG RIVER SEGMENT
    "bogofmangroves1", "bogofmangroves3", "bogofmangroves7", "bogofmangroves10",
    #SKYGRASS RIVER SEGMENT
    "skygrassprairie7", "skygrassprairie8", "skygrassprairie5", "skygrassprairie6", "skygrassprairie3",
    #NORTHERN BEACH
    "sandyshores1", "sandyshores2", "sandyshores3", "sandyshores4",
    #SOUTHERN BEACH
    "sandyshores5", "sandyshores6", "sandyshores7", "sandyshores8", "sandyshores9",
    #ISLAND
    "IsleRho", "IsleTheta1", "IsleTheta2",
    #LUKEWARM OCEAN
    "southeastsea1", "southeastsea2", "southeastsea3", "southeastsea4", "southeastsea5", "southeastsea6", "southeastsea7", "southeastsea8", "southeastsea9", "southeastsea10", "southeastsea11", "southeastsea12", "southeastsea13", "southeastsea14", "southeastsea15", "southeastsea16", "southeastsea17", "southeastsea18", "southeastsea19",
    #CRAGROCK FALLS
    "cragrockbelt1", "cragrockbelt2",
    #FISHING TOWN DOCK
    "Riverside",
    #DARKSPORE FOREST POND
    "darksporeforest6",
    #SOUTHERN DARK SEA
    "darkseasouthA", "darkseasouthB", "darkseasouthC", "darkseasouthD", "darkseasouthE", "darkseasouthF", "darkseasouthG",
    #NORTHERN DARK SEA
    "darkseanorthA", "darkseanorthB"
]
#CHANGE: More locations to be added | PURPOSE: A list of locations where combat events can happen
combatareas = ["cloudedspires1", "savagesteppe5", "savagesteppe2", "oakensanctuary13"]
#CHANGE: Finished adding locations | PURPOSE: A list of all city locations
cities = ["Falezrin", "ShroudedOutpost", "StonesEdge", "TheOasis", "RTherin", "Snowdrift", "Olaera", "Riverside"]
#UNCHANGED - PURPOSE: Visiting a city you havent been to logs it here, lets you 'Taxi' to any city in the list
citiesbeento = []

#UNCHANGED - PURPOSE: Off-character storage accessible only in cities
storagelist = []

#UNCHANGED - PURPOSE: A list of possible items that can be found when gathering
gatherlist = []

#UNCHANGED - PURPOSE: Throwing knife counter
throwingknife = 0

#UNCHANGED - PURPOSE: No fucking clue/couldn't tell ya
gwpcharge = 0
gwpy = "no"

#UNCHANGED - PURPOSE: Spell storage lists
maxspells = []
spells = []

#UNCHANGED - PURPOSE: Used by eating function
eat = "no"

#UNCHANGED - PURPOSE: Current selected class
sclass = ""

#UNCHANGED - PURPOSE: Moneys; Platinum Coins, Gold Coins, Silver Coins, Copper Coins
pc = 0
gc = 10
sc = 0
cc = 0

#UNCHANGED - PURPOSE: Used by all locations to dictate where the character is
location = "tutorial"

#UNCHANGED - PURPOSE: Accuracy?
ac = 10

#UNCHANGED - PURPOSE: 1-0 (t/f) used by the 'Sigil of The Night' item (damage boost at night when equipped)
nightbonus = 0

#UNCHANGED - PURPOSE: A list for quests
quests = []

#UNCHANGED - PURPOSE: Bonus attack damage
atkbonus = 0
#UNCHANGED - PURPOSE: Bonus throwing knife damage
knifebonus = 0
#UNCHANGED - PURPOSE: Bonus bow damage
bowbonus = 0
#UNCHANGED - PURPOSE: Bonus magical damage
magicbonus = 0
#UNCHANGED - PURPOSE: Global player damage bonus (all damage values are modified by this)
dmgbonus = 0

#UNCHANGED - PURPOSE: 1-0 (t/f) used by the sniping action in select locations
snipe = 0

#UNCHANGED - PURPOSE: Another yes or no thing that seems to be used in combat (no clue what it does)
wsyes = "no"

#UNCHANGED - PURPOSE: List of active enemies
enemies = []

#UNCHANGED - PURPOSE: Player inventory list
inventory = []

#UNCHANGED - PURPOSE: Achivement list (NO ACHIVEMENTS EXIST IN THE GAME)
achievements = []

#UNCHANGED - PURPOSE: After combat this is typically run through an if statement, which determines if the player gets loot after they win a fight
loot = "yes"

#UNCHANGED - PURPOSE: 1-0 value tracker that is set to 1 when a specific scripted event is completed (so it doesn't happen twice)
d2b = 0
#UNCHANGED - PURPOSE: 1-0 value tracker that is set to 1 when a specific scripted event is completed (so it doesn't happen twice)
csb1 = 0
#UNCHANGED - PURPOSE: 1-0 value tracker that is set to 1 when a specific scripted event is completed (so it doesn't happen twice)
os1 = 0

#UNCHANGED - PURPOSE: General damage reduction (enemy damage reduced by this value)
DR = 0
#UNCHANGED - PURPOSE: Ranged damage reduction (enemy ranged damage reduced by this value)
rangedDR = 0
#UNCHANGED - PURPOSE: Magic damage reduction (enemy magic damage reduced by this value)
magicDR = 0

#UNCHANGED - PURPOSE: A conditional value for determining if the player has successfully raided the orc city
orcl = 0

#UNCHANGED - PURPOSE: A string used to determine the current weather
weather = "clear"

#UNCHANGED - PURPOSE: A list of all valid ranged weapons
rangedweapons = ["oaken longbow", "oaken crossbow", "yumi", "mahogany recurve","twinpierce slinger", "stormbolt ballista", "reinforced longbow","repeating crossbow", "worn shortbow"]
#UNCHANGED - PURPOSE: A list of all valid magic weapons
magicweapons = ["topaz spellslinger", "shaman's staff", "lifedrain staff", "worn painite staff"]

#UNCHANGED - PURPOSE: Player's equipped weapon
eqweapon = "none"
#UNCHANGED - PURPOSE: Player's equipped helmet
eqhelm = "none"
#UNCHANGED - PURPOSE: Player's equipped armor
eqarmor = "none"
#UNCHANGED - PURPOSE: Player's equipped leggings/greaves
eqgreaves = "none"
#UNCHANGED - PURPOSE: Player's equipped offhand item
eqoffhand = "none"
#UNCHANGED - PURPOSE: Player's equipped gear items
eqgear = []
# NEW: Player's equipped fishing rod
eqrod = "none"
# NEW: Player's equipped bait
eqbait = "none"

#NEW: Escape code formatting
clearline = '\x1B[2K'
italic = '\x1B[3m'
normal = '\033[1m'
clearf = '\033[0m'
slowbli = '\033[5m'
rapibli = '\033[6m'
stkthru = '\033[9m'
#NEW: Escape code colorization
darkred = '\033[38;2;85;0;0m'
red2 = '\033[38;2;128;0;0m' 
red = '\033[38;2;255;0;0m'
brown = '\033[38;2;157;92;24m'
orange = '\033[38;2;255;153;0m'
paleyellow = '\033[38;2;255;255;158m'
tan = '\033[38;2;255;224;172m'
yellow = '\033[38;2;255;255;0m'
darkgreen = '\033[38;2;00;85;00m'
green = '\033[38;2;00;128;00m'
lime = '\033[38;2;00;255;00m'
black = '\033[38;2;0;0;0m'
darkgrey = '\033[38;2;85;85;85m'
grey = '\033[38;2;128;128;128m'
lightgrey = '\033[38;2;192;192;192m'
offwhite = '\033[38;2;232;232;232m'
cyan = '\033[38;2;0;255;255m'
teal = '\033[38;2;0;170;170m'
turquoise = '\033[38;2;0;255;170m'
blue3 = '\033[38;2;0;0;85m'
blue2 = '\033[38;2;0;0;128m'
blue = '\033[38;2;0;0;255m'
purple = '\033[38;2;140;0;240m'
hotpink = '\033[38;2;255;0;255m'
pink = '\033[38;2;255;128;255m'
lightpink = '\033[38;2;255;192;255m'
lavender = '\033[38;2;230;230;250m'
white = '\033[38;2;255;255;255m'

platinum = '\033[38;2;205;192;255m' #Currency & material color
gold = '\033[38;2;255;192;64m' #Currency & material color
silver = '\033[38;2;209;223;229m' #Currency & material color
copper = '\033[38;2;232;171;126m' #Currency & material color
bronze = '\033[38;2;255;87;51m' #Material color
steel = '\033[38;2;212;212;225m' #Material color
leather = '\033[38;2;102;66;40m' #Material color
coloborite = '\033[38;2;238;210;238m' #Material color
pendinium = '\033[38;2;174;238;238m' #Material color
painite = '\033[38;2;68;0;0m' #Material color

elitecolor = '\033[38;2;255;215;0m' #Elite enemy color
minibosscolor = '\033[38;2;255;100;0m' #Miniboss enemy color
bosscolor = '\033[38;2;255;0;0m' #Boss enemy color
superbosscolor = '\033[38;2;100;0;0m' #Superboss enemy color

#NEW: A list of all valid colors | PURPOSE: Used in some of my functions to make sure things get correctly colored
validcolors = [
  darkred, red2, red, brown, orange, paleyellow, tan, yellow, darkgreen, green, lime,
  black, darkgrey, grey, lightgrey, offwhite, cyan, teal, turquoise, blue3, blue2, blue,
  purple, hotpink, pink, lightpink, lavender, white, platinum, gold, silver, copper,
  bronze, steel, leather, coloborite, pendinium, painite, elitecolor, minibosscolor,
  bosscolor, superbosscolor
]

#UNCHANGED - PURPOSE: A list of colors that are used in the start screen for coloring class names
clcolor = [
  #Warrior
  red,
  #Rogue
  darkgreen,
  #Mage
  blue,
  #Cleric
  yellow,
  #Monk
  lime,
  #Berserker
  darkred,
  #Bowman
  teal,
  #Skirmisher
  silver,
  #Druid
  green
]

#NEW: A stat dictionary for fishing rods
fishingrodstats = {
    "old rod": {
        "levelReq": 0,
        "lureSpeed": 1,
        "luck": 0,
        "control": 1,
        "resilience": 1,
        "maxKG": 10.4
        },
    "training rod": {
        "levelReq": 0,
        "lureSpeed": 1.1,
        "luck": -70,
        "control": 1.2,
        "resilience": 1.2,
        "maxKG": 9
        },
    "basic rod": {
        "levelReq": 0,
        "lureSpeed": 1.1,
        "luck": 15,
        "control": 1,
        "resilience": 1.1,
        "maxKG": 100
        },
    "metal rod": {
        "levelReq": 0,
        "lureSpeed": 0.9,
        "luck": 25,
        "control": 1.05,
        "resilience": 1.1,
        "maxKG": 600
        },
    "fast rod": {
        "levelReq": 0,
        "lureSpeed": 1.45,
        "luck": 30,
        "control": 1.05,
        "resilience": 0.88,
        "maxKG": 175
        },
    "lucky rod": {
        "levelReq": 0,
        "lureSpeed": 0.7,
        "luck": 60,
        "control": 1.05,
        "resilience": 0.88,
        "maxKG": 175
        },
    "steady rod": {
        "levelReq": 0,
        "lureSpeed": 0.4,
        "luck": 35,
        "control": 1.05,
        "resilience": 1.3,
        "maxKG": 100000
        },
    "fortune rod": {
        "levelReq": 0,
        "lureSpeed": 0.65,
        "luck": 110,
        "control": 1,
        "resilience": 0.85,
        "maxKG": 700
        },
    "rapid rod": {
        "levelReq": 0,
        "lureSpeed": 1.72,
        "luck": -20,
        "control": 1,
        "resilience": 0.8,
        "maxKG": 700
        },
    "nocturnal rod": {
        "levelReq": 0,
        "lureSpeed": 0.9,
        "luck": 70,
        "control": 1,
        "resilience": 1,
        "maxKG": 2000
        },
    "aurora rod": {
        "levelReq": 0,
        "lureSpeed": 1.1,
        "luck": 60,
        "control": 1.06,
        "resilience": 1.06,
        "maxKG": 6000
        },
    "rod of the depths": {
        "levelReq": 0,
        "lureSpeed": 1.65,
        "luck": 130,
        "control": 1.15,
        "resilience": 1.1,
        "maxKG": 30000
        },
    "magnet rod": {
        "levelReq": 0,
        "lureSpeed": 0.9,
        "luck": 0,
        "control": 1.05,
        "resilience": 1,
        "maxKG": 10000
        },
    "kings rod": {
        "levelReq": 0,
        "lureSpeed": 0.55,
        "luck": 55,
        "control": 1.15,
        "resilience": 1.35,
        "maxKG": 999999999999999
        },
    "destiny rod": {
        "levelReq": 0,
        "lureSpeed": 0.9,
        "luck": 250,
        "control": 1,
        "resilience": 1,
        "maxKG": 2000
        },
    "midas rod": {
        "levelReq": 0,
        "lureSpeed": 1.6,
        "luck": 10,
        "control": 1,
        "resilience": 0.8,
        "maxKG": 4000
        },
    "mythical rod": {
        "levelReq": 0,
        "lureSpeed": 1,
        "luck": 45,
        "control": 1.05,
        "resilience": 1,
        "maxKG": 2000
        },
    "reinforced rod": {
        "levelReq": 0,
        "lureSpeed": 1,
        "luck": 25,
        "control": 1.05,
        "resilience": 1,
        "maxKG": 999999999999999
        },
    "trident rod": {
        "levelReq": 0,
        "lureSpeed": 1.2,
        "luck": 150,
        "control": 1,
        "resilience": 1,
        "maxKG": 6000
        },
    "phoenix rod": {
        "levelReq": 0,
        "lureSpeed": 1.55,
        "luck": 30,
        "control": 1.02,
        "resilience": 0.9,
        "maxKG": 2800
        },
    "stone rod": {
        "levelReq": 0,
        "lureSpeed": 0.75,
        "luck": 10,
        "control": 1,
        "resilience": 1.05,
        "maxKG": 900
        },
    "magma rod": {
        "levelReq": 0,
        "lureSpeed": 0.3,
        "luck": 15,
        "control": 1,
        "resilience": 1,
        "maxKG": 1200
        },
    "fungal rod": {
        "levelReq": 0,
        "lureSpeed": 0.9,
        "luck": 45,
        "control": 1,
        "resilience": 1,
        "maxKG": 200
        },
    "gamer rod": {
        "levelReq": 50,
        "lureSpeed": 1.9,
        "luck": 100,
        "control": 1.25,
        "resilience": 1.15,
        "maxKG": 999999999999999
        },
    "sunken rod": {
        "levelReq": 0,
        "lureSpeed": 1.2,
        "luck": 150,
        "control": 1.15,
        "resilience": 1.15,
        "maxKG": 5000
        },
    "rod of the forgotten fang": {
        "levelReq": 75,
        "lureSpeed": 1.15,
        "luck": 125,
        "control": 1.25,
        "resilience": 1.25,
        "maxKG": 999999999999999
        },
    "rod of the eternal king": {
        "levelReq": 65,
        "lureSpeed": 1.55,
        "luck": 150,
        "control": 1.2,
        "resilience": 1.1,
        "maxKG": 75000
        },
    "celestial rod": {
        "levelReq": 50,
        "lureSpeed": 1.3,
        "luck": 50,
        "control": 1.06,
        "resilience": 1.05,
        "maxKG": 999999999999999
        },
    "the lost rod": {
        "levelReq": 45,
        "lureSpeed": 1.15,
        "luck": 25,
        "control": 1.08,
        "resilience": 1.05,
        "maxKG": 50000
        },
    "voyager rod": {
        "levelReq": 40,
        "lureSpeed": 1.15,
        "luck": 20,
        "control": 0.98,
        "resilience": 1,
        "maxKG": 2800
        },
    "riptide rod": {
        "levelReq": 20,
        "lureSpeed": 1.15,
        "luck": 25,
        "control": 1.05,
        "resilience": 1.05,
        "maxKG": 3500
        },
    "seasons rod": {
        "levelReq": 15,
        "lureSpeed": 1.15,
        "luck": 25,
        "control": 1.03,
        "resilience": 1.1,
        "maxKG": 3000
        },
    "resourceful rod": {
        "levelReq": 5,
        "lureSpeed": 1.15,
        "luck": 20,
        "control": 0.99,
        "resilience": 1,
        "maxKG": 1000
        },
    "wisdom rod": {
        "levelReq": 4,
        "lureSpeed": 1,
        "luck": 20,
        "control": 1.05,
        "resilience": 1,
        "maxKG": 800
        },
    "precision rod": {
        "levelReq": 4,
        "lureSpeed": 1.2,
        "luck": 150,
        "control": 1,
        "resilience": 1.05,
        "maxKG": 12000
        },
    "anglers rod": {
        "levelReq": 0,
        "lureSpeed": 1.1,
        "luck": 10,
        "control": 1.05,
        "resilience": 1.05,
        "maxKG": 100
        }
    }

# NEW: Fishing bait stat dictionary
fishingbaitstats = {
    "bagel": {
        "preferredLuck": 25,
        "universalLuck": 0,
        "lureSpeed": 1,
        "resilience": 1.15
        },
    "worm": {
        "preferredLuck": 25,
        "universalLuck": 0,
        "lureSpeed": 1.15,
        "resilience": 1
        },
    "insect": {
        "preferredLuck": 35,
        "universalLuck": 0,
        "lureSpeed": 1.05,
        "resilience": 1
        },
    "flakes": {
        "preferredLuck": 55,
        "universalLuck": 0,
        "lureSpeed": 1.1,
        "resilience": 0.97
        },
    "garbage": {
        "preferredLuck": -250,
        "universalLuck": 0,
        "lureSpeed": 0.95,
        "resilience": 1.5
        },
    "maggot": {
        "preferredLuck": 0,
        "universalLuck": 35,
        "lureSpeed": 0.9,
        "resilience": 1
        },
    "shrimp": {
        "preferredLuck": 45,
        "universalLuck": 25,
        "lureSpeed": 1,
        "resilience": 0.95
        },
    "squid": {
        "preferredLuck": 55,
        "universalLuck": 45,
        "lureSpeed": 0.75,
        "resilience": 1
        },
    "seaweed": {
        "preferredLuck": 35,
        "universalLuck": 0,
        "lureSpeed": 1.2,
        "resilience": 1.1
        },
    "magnet": {
        "preferredLuck": 200,
        "universalLuck": 1,
        "lureSpeed": 1,
        "resilience": 1
        },
    "minnow": {
        "preferredLuck": 65,
        "universalLuck": 1,
        "lureSpeed": 1,
        "resilience": 0.9
        },
    "coral": {
        "preferredLuck": 1,
        "universalLuck": 1,
        "lureSpeed": 1.2,
        "resilience": 1.2
        },
    "super flakes": {
        "preferredLuck": 0,
        "universalLuck": 70,
        "lureSpeed": 1,
        "resilience": 0.85
        },
    "coal": {
        "preferredLuck": 45,
        "universalLuck": 0,
        "lureSpeed": 1,
        "resilience": 0.9
        },
    "rapid catcher": {
        "preferredLuck": 0,
        "universalLuck": 0,
        "lureSpeed": 1.35,
        "resilience": 0.85
        },
    "truffle worm": {
        "preferredLuck": 300,
        "universalLuck": 0,
        "lureSpeed": 0.9,
        "resilience": 1
        },
    "weird algae": {
        "preferredLuck": 0,
        "universalLuck": 200,
        "lureSpeed": 0.65,
        "resilience": 1
        },
    "fish head": {
        "preferredLuck": 150,
        "universalLuck": 0,
        "lureSpeed": 1.1,
        "resilience": 0.9
        },
    "night shrimp": {
        "preferredLuck": 0,
        "universalLuck": 90,
        "lureSpeed": 1.15,
        "resilience": 1
        },
    "instant catcher": {
        "preferredLuck": 0,
        "universalLuck": -20,
        "lureSpeed": 1.65,
        "resilience": 0.85
        },
    "deep coral": {
        "preferredLuck": 0,
        "universalLuck": 0,
        "lureSpeed": 1,
        "resilience": 1
        },
    "shark head": {
        "preferredLuck": 225,
        "universalLuck": 30,
        "lureSpeed": 0.95,
        "resilience": 1.1
        },
    "aurora bait": {
        "preferredLuck": 100,
        "universalLuck": 30,
        "lureSpeed": 0.95,
        "resilience": 1.1
        }
    }

fishstats = {
    "trash": {
        #sequence length
        "catchlengthMin": 3,
        "catchlengthMax": 5,
        #fishes
        "seaweed": {
            "locations": ["all"],
            "bait": 'magnet',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear", "rain", "storm", "fog"],
            "seasons": ["spring", "summer", "fall", "winter"],
            "xp": 5,
            "minKG": 0.1,
            "avgKG": 0.5,
            "maxKG": 1.3,
            "creditsPerKG": 0.5,
            "catchQuips": {
                1: "Seaweed!",
                2: "Oh. Seaweed.",
                3: "It's!- Oh.. Seaweed..",
                4: "Seaweed.."
                }
            },
        "rock": {
            "locations": ["all"],
            "bait": 'magnet',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear", "rain", "storm", "fog"],
            "seasons": ["spring", "summer", "fall", "winter"],
            "xp": 5,
            "minKG": 20,
            "avgKG": 34,
            "maxKG": 41,
            "creditsPerKG": 0.75,
            "catchQuips": {
                1: "Ermm..?",
                2: "Uhmm..?",
                3: "A Rock!",
                4: "Oh. A Rock.",
                5: "It's!- Oh.. A Rock..",
                6: "A rock.."
                }
            },
        "boot": {
            "locations": ["all"],
            "bait": 'magnet',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear", "rain", "storm", "fog"],
            "seasons": ["spring", "summer", "fall", "winter"],
            "xp": 5,
            "minKG": 1.3,
            "avgKG": 1.6,
            "maxKG": 2.7,
            "creditsPerKG": 1,
            "catchQuips": {
                1: "Ermm..?",
                2: "Why only one..?",
                3: "A Boot!",
                4: "A Boot...",
                5: "I caught!.. a Boot..?",
                6: "Erm.. A Boot?"
                }
            },
        "driftwood": {
            "locations": ["all"],
            "bait": 'magnet',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear", "rain", "storm", "fog"],
            "seasons": ["spring", "summer", "fall", "winter"],
            "xp": 10,
            "minKG": 0.6,
            "avgKG": 0.6,
            "maxKG": 0.6,
            "creditsPerKG": 1.2,
            "catchQuips": {
                1: "Ermm..?",
                2: "Uhmm..?",
                3: "Driftwood!",
                4: "Oh. Driftwood.",
                5: "It's!- Oh.. Driftwood..",
                6: "Driftwood.."
                }
            },
        "log": {
            "locations": ["all"],
            "bait": 'magnet',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear", "rain", "storm", "fog"],
            "seasons": ["spring", "summer", "fall", "winter"],
            "xp": 15,
            "minKG": 3.8,
            "avgKG": 5.2,
            "maxKG": 7,
            "creditsPerKG": 16.6,
            "catchQuips": {
                1: "Oh.. a Log!",
                2: "A.. Log?",
                3: "How did I pull this up?",
                4: "A Log..?"
                }
            },
        "bone": {
            "locations": ["darksporeforest", "scintillantrainforest", "bogofmangroves"],
            "bait": 'magnet',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear", "rain", "storm", "fog"],
            "seasons": ["spring", "summer", "fall", "winter"],
            "xp": 20,
            "minKG": 2.7,
            "avgKG": 5.3,
            "maxKG": 8,
            "creditsPerKG": 4.3,
            "catchQuips": {
                1: "Oh.. a Bone!",
                2: "A.. Bone?",
                3: "Oh my..",
                4: "A Bone..?"
                }
            },
        "fungal cluster": {
            "locations": ["darksporeforest"],
            "bait": 'magnet',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear", "rain", "storm", "fog"],
            "seasons": ["spring", "summer", "fall", "winter"],
            "xp": 10,
            "minKG": 0.5,
            "avgKG": 0.8,
            "maxKG": 1.2,
            "creditsPerKG": 2.5,
            "catchQuips": {
                1: "Ermm..?",
                2: "Hmm..?"
                }
            }
        },
    "common": {
        #sequence length
        "catchlengthMin": 5,
        "catchlengthMax": 10,
        #fishes
        "sea bass": {
            "locations": ["northernsea", "southeastsea"],
            "bait": 'squid',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear"],
            "seasons": ["spring", "summer"],
            "xp": 40,
            "minKG": 2.7,
            "avgKG": 9.9,
            "maxKG": 20,
            "creditsPerKG": 16,
            "catchQuips": {
                1: "A Sea Bass!",
                2: "I caught a Sea Bass!",
                3: "Woah! A Sea Bass!",
                4: "Ouu! A Bass!"
                }
            },
        "trout": {
            "locations": ["verdanthills", "oakensanctuary"],
            "bait": 'insect',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["clear"],
            "seasons": ["spring", "summer", "fall", "winter"],
            "xp": 35,
            "minKG": 1.2,
            "avgKG": 4.1,
            "maxKG": 11,
            "creditsPerKG": 13,
            "catchQuips": {
                1: "I thought theres a rainbow?",
                2: "Woah, a Trout!",
                3: "Woah!",
                4: "A Trout!",
                5: "I caught a Trout!"
                }
            },
        "largemouth bass": {
            "locations": ["verdanthills", "oakensanctuary"],
            "bait": 'worm',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["rain"],
            "seasons": ["spring", "summer"],
            "xp": 45,
            "minKG": 1,
            "avgKG": 3.6,
            "maxKG": 8,
            "creditsPerKG": 20,
            "catchQuips": {
                1: "Now, where's the snare?",
                2: "Woah!",
                3: "Awesome!",
                4: "A Largemouth Bass!",
                5: "Ou! A Bass!"
                }
            },
        "pollock": {
            "locations": ["twilighttundra"],
            "bait": 'any',
            "times": ["morning", "midday", "evening", "night"],
            "weathers": ["rain", "fog"],
            "seasons": ["summer"],
            "xp": 50,
            "minKG": 2,
            "avgKG": 4.7,
            "maxKG": 10,
            "creditsPerKG": 14.3,
            "catchQuips": {
                1: "A Pollock!",
                2: "I caught a Pollock!",
                3: "Woah, a Pollock!",
                4: "Look! A Pollock!"
                }
            }
        }
    }

#NEW: A clearing function because apparently cls broke?
def clearscreen():
    #newline technique
    print("\n" * 100)

#NEW: A decorative horizontal line generator | EXAMPLE: hzline("a", 1) = '================================================================================'
def hzline(type, style, extra="none"):
  if type == "a":
    if style == 1:
      print("=" * 80)
    elif style == 2:
      print("-" * 80)
    elif style == 3:
      print("~" * 80)
    elif style == 4:
      print("#" * 80)
    elif style == 5:
      print("█" * 80)
    elif style == 6:
      print("░" * 80)
    elif style == 7:
      print("▒" * 80)
    elif style == 8:
      print("▓" * 80)
    else:
      print("=" * 80)
  elif type == "b":
    if style == 1:
      print("=[" + extra + "]" + ("=" * (80 - len("=["+extra+"]"))))
    elif style == 2:
      print("-[" + extra + "]" + ("-" * (80 - len("-["+extra+"]"))))
    elif style == 3:
      print("~[" + extra + "]" + ("~" * (80 - len("~["+extra+"]"))))
    elif style == 4:
      print("#[" + extra + "]" + ("#" * (80 - len("#["+extra+"]"))))
    elif style == 5:
      print("█[" + extra + "]" + ("█" * (80 - len("█["+extra+"]"))))
    elif style == 6:
      print("░[" + extra + "]" + ("░" * (80 - len("░["+extra+"]"))))
    elif style == 7:
      print("▒[" + extra + "]" + ("▒" * (80 - len("▒["+extra+"]"))))
    elif style == 8:
      print("▓[" + extra + "]" + ("▓" * (80 - len("▓["+extra+"]"))))
    else:
      print("=[" + extra + "]" + ("=" * (80 - len("=["+extra+"]"))))
  else:
    print(red + "< HZLINE ERROR: INVALID HZLINE TYPE >" + white)

#NEW: A new method of displaying merchant entries | EXAMPLE: NO! (I had to genuinely rework how this was formatted when I imported it from my previous mod)
def merchentry(name1, pcc, gcc, scc, ccc, names=1, usecolor="F", color1=white, name2=" ", color2=white, name3=" ", color3=white):
  currencysuffix = None
  #straightline entries (ex. [pc, gc, sc, cc])
  if pcc != 0 and gcc != 0 and scc != 0 and ccc != 0:
    currencysuffix = (str(pcc)+platinum+" pc"+white+", "+str(gcc)+gold+" gc"+white+", "+str(scc)+silver+" sc"+white+", "+str(ccc)+copper+" cc"+white+"]") # pc, gc, sc, cc
  elif pcc == 0 and gcc != 0 and scc != 0 and ccc != 0:
    currencysuffix = (str(gcc)+gold+" gc"+white+", "+str(scc)+silver+" sc"+white+", "+str(ccc)+copper+" cc"+white+"]") # gc, sc, cc
  elif pcc == 0 and gcc == 0 and scc != 0 and ccc != 0:
    currencysuffix = (str(scc)+silver+" sc"+white+", "+str(ccc)+copper+" cc"+white+"]") # sc, cc
  elif pcc == 0 and gcc == 0 and scc == 0 and ccc != 0:
    currencysuffix = (str(ccc)+copper+" cc"+white+"]") # cc
  #single entries (ex. [pc])
  elif pcc != 0 and gcc == 0 and scc == 0 and ccc == 0:
    currencysuffix = (str(pcc)+platinum+" pc"+white+"]") # pc
  elif pcc == 0 and gcc != 0 and scc == 0 and ccc == 0:
    currencysuffix = (str(gcc)+gold+" gc"+white+"]") # gc
  elif pcc == 0 and gcc == 0 and scc != 0 and ccc == 0:
    currencysuffix = (str(scc)+silver+" sc"+white+"]") # sc
  #double entries (ex. [pc, cc])
  elif pcc != 0 and gcc != 0 and scc == 0 and ccc == 0:
    currencysuffix = (str(pcc)+platinum+" pc"+white+", "+str(gcc)+gold+" gc"+white+"]") # pc, gc
  elif pcc != 0 and gcc == 0 and scc != 0 and ccc == 0:
    currencysuffix = (str(pcc)+platinum+" pc"+white+", "+str(scc)+silver+" sc"+white+"]") # pc, sc
  elif pcc != 0 and gcc == 0 and scc == 0 and ccc != 0:
    currencysuffix = (str(pcc)+platinum+" pc"+white+", "+str(ccc)+copper+" cc"+white+"]") # pc, cc
  elif pcc == 0 and gcc != 0 and scc != 0 and ccc == 0:
    currencysuffix = (str(gcc)+gold+" gc"+white+", "+str(scc)+silver+" sc"+white+"]") # gc, sc
  elif pcc == 0 and gcc != 0 and scc == 0 and ccc != 0:
    currencysuffix = (str(gcc)+gold+" gc"+white+", "+str(ccc)+copper+" cc"+white+"]") # gc, cc
  #triple entries (ex. [pc, gc, cc])
  elif pcc != 0 and gcc != 0 and scc != 0 and ccc == 0:
    currencysuffix = (str(pcc)+platinum+" pc"+white+", "+str(gcc)+gold+" gc"+white+", "+str(scc)+silver+" sc"+white+"]") # pc, gc, sc
  elif pcc != 0 and gcc != 0 and scc == 0 and ccc != 0:
    currencysuffix = (str(pcc)+platinum+" pc"+white+", "+str(gcc)+gold+" gc"+white+", "+str(ccc)+copper+" cc"+white+"]") # pc, gc, cc
  elif pcc != 0 and gcc == 0 and scc != 0 and ccc != 0:
    currencysuffix = (str(pcc)+platinum+" pc"+white+", "+str(scc)+silver+" sc"+white+", "+str(ccc)+copper+" cc"+white+"]") # pc, sc, cc
  #FREE?!?!?!?!
  elif pcc == 0 and gcc == 0 and scc == 0 and ccc == 0:
    currencysuffix = " "+lime+"FREE!"
  else:
    print(red + "< ENTRY ERROR: SOMETHING WENT WRONG WITH CREATING A CURRENCYSUFFIX! >" + white) # ERROR
  #ABOVE IS ONLY THE CURRENCY SUFFIX GENERATOR | BELOW IS WHERE THE PRINT STATEMENT IS MADE
  if usecolor == "F" or usecolor == "f":
    if names == 1:
      print(white+" > ["+name1+"] - ["+currencysuffix)
    elif names == 2:
      print(white+" > ["+name1+" "+name2+"] - ["+currencysuffix)
    elif names == 3 or names > 3:
      print(white+" > ["+name1+" "+name2+" "+name3+"] - ["+currencysuffix)
  elif usecolor == "T" or usecolor == "t":
    if color1 not in validcolors:
      color1 = white
    if color2 not in validcolors:
      color2 = white
    if color3 not in validcolors:
      color3 = white
    if names == 1:
      print(white+" > ["+color1+name1+white+"] = ["+currencysuffix)
    elif names == 2:
      print(white+" > ["+color1+name1+" "+color2+name2+white+"] - ["+currencysuffix)
    elif names == 3 or names > 3:
      print(white+" > ["+color1+name1+" "+color2+name2+" "+color3+name3+white+"] - ["+currencysuffix)
  else:
    print(red+"< USECOLOR SYNTAX ERROR: Please specify whether true or false. >"+white) # ERROR

#NEW: A decorative text entry generator | EXAMPLE: normentry("Brick", "F", white, "A simple red brick.") = ' > [Brick]: A simple red brick.'
def normentry(name, usecolor="F", color=white, text="SampleText", textcolor=lightgrey):
  if usecolor == "F" or usecolor == "f":
    color = white
    if textcolor not in validcolors:
      textcolor = lightgrey
    print(white+" > ["+color+name+white+"]: "+textcolor+text+white)
  elif usecolor == "T" or usecolor == "t":
    if color not in validcolors:
      color = white
    if textcolor not in validcolors:
      textcolor = lightgrey
    print(white+" > ["+color+name+white+"]: "+textcolor+text+white)
  else:
    print(red+"< USECOLOR SYNTAX ERROR: Please specify whether true or false. >"+white) # ERROR

#NEW: A decorative dialogue generator (npc to player) | EXAMPLE: says(white, "John", lightgrey, "Hello world!") = ' *John*: Hello world!'
def says(namcolor, name, texcolor, text):
  print(clearf+namcolor+italic+" "+name+clearf+white+": "+texcolor+text+white)

#NEW: A decorative dialogue generator (world to player) | EXAMPLE: tell("John", "Hello world!") = ' John: Hello world!'
def tell(name, text, namcolor=white, texcolor=lightgrey):
  print(clearf+namcolor+" "+name+clearf+white+": "+texcolor+text+white)

#UNCHANGED - PURPOSE: Runs audio (!BROKEN!)
def playaudio(filename):
  import urllib.request
  import urllib.parse
  url = 'https://aquiloprojects.com/update'
  data = {'music': filename}
  data = urllib.parse.urlencode(data).encode("utf-8")
  urllib.request.urlopen(urllib.request.Request(url, data))

#UNCHANGED - PURPOSE: An enter sequence creator
def enterwait():
  print("[ENTER] to continue.")
  wait = input()

#UNCHANGED - PURPOSE: Title card function
def title():
  print(gold+ "         ██\                     "+white+"/\                  "+green+"           (''''')")
  print(gold + "         \_███\ ███\ "+green+"  (o)      "+white+"/  \_           /\      "+green+"      (_    3  _)")
  print(gold +"███████████\__\ ████\ "+lime+" _"+brown+"|"+lime+"__"+white+"   _/ /\  \_        /  \ "+tan+"     ___ "+green+"   (_o  _)")
  print(gold +"\___████\__\    ████ |"+lime+"/    \\"+white+"_/ \/  \/\/\__   _/\/\/\ "+tan+"___/   \   __"+brown+"| |   "+green+"    ( )3")
  print(gold +"    ████ |      ████ | "+grey+"  __/        o     \_/ o     \_"+tan+"       \_/__"+brown+"| | "+green+"( o)"+darkgreen+"___"+brown+"|//      ")
  print(gold +"    ████ |      ████ |"+grey+"__/     o                  o   "+gold+"█████\   "+brown+"    |  \ ||    ||"+gold+"█████\ ")
  print(gold +"    ████ |      ████ |      ████\   ███\  ████\    ██\_.._██\  "+brown+"  / "+gold+"█████\    ██\_.._██\ ")
  print(gold +"    ████ |      ████ |   ███\_._███ \__███\___██\  \_ █████\    ███\____██\  \_ █████\ ")
  print(gold +"    ████ |      ████ |  ███/     ███\  ███|   \_\   ███\___██|  ██ █████\     ███\___██|")
  print(gold +"    ████ |      ████ |  ███|     ███|  ███|        ███\|   ██|  ███\____\    ███\|   ██|")
  print(gold +"  ████████\      \██ |   ███\   ███/   ███|        \███\  ██/    ███    ██\  \███\  ██/ ")
  print(gold +"█████████████|     █ |     \████\_/    ██\          \__███\_████\  \████\_\   \__███\_████\ ")
  print(gold +"\____________\     \_\      \___/      \_\             \__\ \___\   \___\        \__\ \___\ "+white)
  
#UNCHANGED - PURPOSE: Decorative list display function | EXAMPLE: las(LIST_NAME_HERE)
def las(listc):
  laas = ", ".join(listc)
  print("[" + laas + "]")

#UNCHANGED - PURPOSE: Dramatic text (text slowly appears)
def dt(dur, text):
  clearscreen()
  for i,character in enumerate(text):
    print(normal,character,sep='',end='',flush=True)
    time.sleep(dur)
  print("")

#FULL REWORK: Remade the entire beastiary using (my) more stylistic functions
def bestiary():
  global combatdictionary
  ex = 0
  while ex == 0:
    lasb()
    time.sleep(1)
    print(normal + white +          "Which enemy would you like to learn more about? Say exit to leave.")
    blearn = input("> ").lower()
    if blearn in combatdictionary:
      if blearn == "goblin":
        tell("Entry", "1/7")
        hzline("a", 1)
        normentry("Common Name", "F", white, "Goblin")
        hzline("a", 1)
        normentry("Habitat", "F", white, "Darkspore Forest")
        hzline("a", 1)
        normentry("Goblin Sword", "F", lightgrey, "12.5%")
        normentry("Goblin War Paint", "F", lightgrey, "5%")
        hzline("a", 1)
        normentry("Entry", "F", lightgrey, "Goblins are fierce small green/grey humanoids.")
        hzline("a", 1)
      elif blearn == "goblin striker":
        tell("Entry", "2/7")
        hzline("a", 1)
        normentry("Common Name", "F", white, "Goblin Striker", elitecolor)
        hzline("a", 1)
        normentry("Habitat", "F", white, "Darkspore Forest")
        hzline("a", 1)
        normentry("Striker Blade", "F", lightgrey, "7.14%")
        normentry("Scrap Metal", "F", lightgrey, "50%")
        hzline("a", 1)
        normentry("Entry", "F", lightgrey, "Goblin elite warriors who always carry intimidating swords.")
        hzline("a", 1)
      elif blearn == "goblin sniper":
        tell("Entry", "3/7")
        hzline("a", 1)
        normentry("Common Name", "F", white, "Goblin Sniper")
        hzline("a", 1)
        normentry("Habitat", "F", white, "Darkspore Forest")
        hzline("a", 1)
        normentry("Heavytip Quiver", "F", lightgrey, "10%")
        normentry("Reload Crank", "F", lightgrey, "8.33%")
        hzline("a", 1)
        normentry("Entry", "F", lightgrey, "Goblin sharpshooters, experts with bows and crossbows alike.")
        hzline("a", 1)
      elif blearn == "outlaw":
        tell("Entry", "4/7")
        hzline("a", 1)
        normentry("Common Name", "F", white, "Outlaw")
        hzline("a", 1)
        normentry("Habitat", "F", white, "Savage Steppe / Distant Meadows")
        hzline("a", 1)
        normentry("Rusty Dagger", "F", lightgrey, "10%")
        normentry("Outlaw Bandana", "F", lightgrey, "6.6%")
        hzline("a", 1)
        normentry("Entry", "F", lightgrey, "Outlaws who have left city life in favor of one in the desert and meadows.")
        hzline("a", 1)
      elif blearn == "orc":
        tell("Entry", "5/7")
        hzline("a", 1)
        normentry("Common Name", "F", white, "Orc")
        hzline("a", 1)
        normentry("Habitat", "F", white, "Darkspore Forest / Lower Spires / Clouded Spires")
        hzline("a", 1)
        normentry("Orcish Battleaxe", "F", lightgrey, "10%")
        normentry("Leather Vest", "F", lightgrey, "8.33%")
        hzline("a", 1)
        normentry("Entry", "F", lightgrey, "Tall, green, brutish humanoids who in fact have complex towns.")
        hzline("a", 1)
      elif blearn == "orcish shaman":
        tell("Entry", "6/7")
        hzline("a", 1)
        normentry("Common Name", "F", white, "Orcish Shaman")
        hzline("a", 1)
        normentry("Habitat", "F", white, "Darkspore Forest")
        hzline("a", 1)
        normentry("Amulet of Life", "F", lightgrey, "5%")
        normentry("Shaman\'s Staff", "F", lightgrey, "6.66%")
        hzline("a", 1)
        normentry("Entry", "F", lightgrey, "Leaders of orcish societies, powerful spirit/nature mages.")
        hzline("a", 1)
      elif blearn == "prairie bulette":
        tell("Entry", "7/7")
        hzline("a", 1)
        normentry("Common Name", "F", white, "Prairie Bulette")
        hzline("a", 1)
        normentry("Habitat", "F", white, "Skygrass Prairie")
        hzline("a", 1)
        normentry("Scrap Metal", "F", lightgrey, "25%")
        normentry("Scrap Metal", "F", lightgrey, "25%")
        hzline("a", 1)
        normentry("Entry", "F", lightgrey, "Known as 'land sharks', these burrowing beasts are deadly and swift.")
        hzline("a", 1)
      print("")
    if blearn == "exit":
      ex = 1
  locationreturn()

#UNCHANGED - PURPOSE: To alter and progress time in the game | EXAMPLE: <hours = 5> <minutes = 30> timeshift(6, 30) = (hours = 12, minutes = 0)
def timeshift(hrs, mns):
  global hours, minutes, timeofday, bardcd, ac, dmgbonus, atkbonus, nightbonus, hunger, maxhunger, hp, maxhp
  if mns + minutes > 60:
    minutes = minutes - 60
    hrs = hrs + 1
  goalhour = hours + hrs
  if ((goalhour >= 12) and (hours <= 11)):
    tods = timeofday
    if tods == "am":
      timeofday = "pm"
    else:
      timeofday = "am"
  hours = goalhour
  if hours > 12:
    hours = hours - 12
  if bardcd > 0:
    bardcd = bardcd - hrs
    bardcd = bardcd - mns / 60
    if bardcd < 0:
      bardcd = 0
  if (("sigil of night" in eqgear) and (nightbonus == 0)):
    if (((6 <= hours <= 12) and (timeofday == "pm")) or ((1 <= hours <= 6) and (timeofday == "am"))):
      nightbonus = 1
      ac += 1
      atkbonus += 1
      dmgbonus += 1
  if (nightbonus == 1):
    if (((6 <= hours <= 12) and (timeofday == "am")) or ((1 <= hours <= 6) and (timeofday == "pm"))):
      nightbonus = 0
      ac -= 1
      atkbonus -= 1
      dmgbonus -= 1
  elif (((12 > hours > 10) and (timeofday == "pm")) or ((2 > hours) and (timeofday == "am"))):
    hp = hp - 1
    print("Your fatigue drains you of energy.")
    if hp == 0:
      hp = 1
  elif (12 < hours < 4):
    if timeofday == "am":
      print("You collapse of exhaustion.")
      time.sleep(5)
      hp = hp - 2
      if hp <= 0:
        hp = 1
      hunger = hunger - 1
      if hunger < 0:
        hunger = 0
      hours = 10
      minutes = 00
      timeofday = "am"
      print("You wake up groggily.  The sun is already shining.")
  if hunger < 2:
    print("You're starving.  Take 1 damage.")
    hp = hp - 1
    if hp <= 0:
      hp = 1
    time.sleep(1)
  if hunger == 0:
    print("You've been malnourishing yourself.  Take 1 more damage.")
    hp = hp - 1
    if hp <= 0:
      hp = 1
    time.sleep(1)

#UNCHANGED - PURPOSE: Actions UI (do not modify)
def acs(placeholder, actions):
  print("[ENTER] to continue.")
  wait = input()
  current = 0
  clearscreen()
  placeholder = ""
  while placeholder == "":
    print("Here are your current actions.\nWhat would you like to do?")
    las(actions)
    print("[" + actions[current] + "]")
    print("[<][>], or [ENTER] to select when ready.")
    keyg = readkey()
    if keyg == key.LEFT:
      time.sleep(0.15)
      if current > 0:
        current -= 1
      else:
        current = len(locationactions)-1
    if keyg == key.RIGHT:
      time.sleep(0.15)
      if current < len(locationactions)-1:
        current += 1
      else:
        current = 0
    if keyg == key.ENTER:
      time.sleep(0.15)
      placeholder = actions[current]
    clearscreen()
  return placeholder

#UNCHANGED - PURPOSE: Class choosing sequence for intro
def classchoose():
  global classes, cdesc, sclass, eqweapon, eqoffhand, eqhelm, maxhp, atkbonus, hp, magicbonus, throwingknife, xp, lvl, battleactions, spells, maxspells, inventory
  current = 0
  clearscreen()
  time.sleep(2)
  chclass = ""
  while chclass == "":
    print("Which class would you like to be?")
    print(clearf + clcolor[current] + normal + "[" +          classes[current].capitalize() + "]")
    print(clearf + italic + cdesc[current])
    print(clearf + normal + "<" + " " * (len(classes[current])) + ">")
    print("[ENTER] to select when ready.")
    keyg = readkey()
    if keyg == key.LEFT:
      time.sleep(0.15)
      if current > 0:
        current -= 1
      else:
        current = 8
    if keyg == key.RIGHT:
      time.sleep(0.15)
      if current < 8:
        current += 1
      else:
        current = 0
    if keyg == key.ENTER:
      time.sleep(0.15)
      chclass = classes[current]
    clearscreen()
  if chclass in classes:
    inventory.append("bestiary")
    if chclass == "warrior" or chclass == "Warrior":
      sclass = "warrior"
      maxhp = 10
      atkbonus = 1
      eqweapon = "bronze sword"
      eqoffhand = "wooden shield"
    elif chclass == "rogue" or chclass == "Rogue":
      sclass = "rogue"
      maxhp = 8
      atkbonus = 1
      eqweapon = "bronze dagger"
      battleactions.append("knife throw")
      throwingknife = 20
      locationactions.append("throwing knifes")
    elif chclass == "mage" or chclass == "Mage":
      sclass = "mage"
      maxhp = 6
      atkbonus = 0
      eqweapon = "basic staff"
      battleactions.append("magic")
      spells.append("magic missile")
      spells.append("magic missile")
      maxspells.extend(spells)
    elif chclass == "cleric" or chclass == "Cleric":
      sclass = "cleric"
      maxhp = 8
      atkbonus = 0
      eqweapon = "basic staff"
      inventory.append("bronze warhammer")
      inventory.append("holy charm")
      battleactions.append("magic")
      spells.append("heal I")
      spells.append("purge")
      maxspells.extend(spells)
    elif chclass == "monk" or chclass == "Monk":
      sclass = "monk"
      maxhp = 8
      atkbonus = 1
    elif chclass == "berserker" or chclass == "Berserker":
      sclass = "berserker"
      maxhp = 12
      atkbonus = 1
      eqweapon = "bronze sword"
      battleactions.append("rage")
    elif chclass == "ranger":
      sclass = "ranger"
      maxhp = 9
      atkbonus = 1
      eqweapon = "oaken longbow"
    elif chclass == "skirmisher" or chclass == "Skirmisher":
      sclass = "skirmisher"
      maxhp = 9
      atkbonus = 1
      eqweapon = "bronze dagger"
      eqhelm = "skirmisher headband"
    elif chclass == "druid" or chclass == "Druid":
      sclass = "druid"
      maxhp = 8
      atkbonus = 0
      eqweapon = "basic staff"
      battleactions.append("magic")
      spells.append("thorn lash")
      spells.append("wild shape")
      maxspells.extend(spells)
    print("Cool! You are now a " + sclass + ".")
    print("")
    hp = maxhp
    lvl = 1
    xp = 0
  else:
    print("uh, that's not a class. sorry...")
    print("")
    time.sleep(2)
    clearscreen()
    classchoose()

#UNCHANGED - PURPOSE: Style choosing sequence for intro
def stylechoose():
  global style, atkbonus, magicbonus, ac, maxhp, hp, stylep, styles
  print("Next, which style would you prefer?")
  time.sleep(1)
  print("[" + turquoise + "Swift," + red + " strong," + purple + " magic, " +        white + "or" + green + " tough" + white + "?]")
  stylep = input("Style: " + normal).lower()
  if stylep in styles:
    if stylep == "swift":
      style = "agile"
      ac = ac + 1
    elif stylep == "strong":
      style = "strong"
      atkbonus = atkbonus + 1
    elif stylep == "magic":
      style = "magical"
      magicbonus = magicbonus + 1
    elif stylep == "tough":
      style = "tough"
      maxhp = maxhp + 1
      hp = hp + 1
    print("Nice! You are a " + style + " person.")
    print("")
  else:
    print("Just saying, that's not a style that you can have.")
    print("")
    time.sleep(2)
    clearscreen()
    stylechoose()

#UNCHANGED - PURPOSE: Lets the player check how many throwing knives they have
def knifecount():
  print("You have " + throwingknife + " throwing knives.")
  ri = input("> ")
  locationreturn()

#UNCHANGED - PURPOSE: Vendor that only appears for players who picked the rogue class
def rgvendor():
  global pc, gc, sc, throwingknife, locationactions
  rvsaying = random.randint(1, 7)
  if rvsaying <= 3:
    says(red2, "Shady Vendor", grey, "Hey. Nice to see you again. Need some throwing knives?")
  elif 3 < rvsaying <= 6:
    says(red2, "Shady Vendor", grey, "Hey. Running low on knives?")
  elif rvsaying == 7:
    says(red2, "Shady Vendor", grey, "Quiet. I think I'm being followed. If you need throwing knives, buy them quickly.")
  time.sleep(1)
  hzline("b", 4, "Services")
  merchentry("Full Refill", 0, 3, 0, 0)
  merchentry("3 Knives", 0, 0, 8, 0)
  hzline("b", 4, "Other")
  merchentry("Heriloom Whetstone", 6, 0, 0, 0, 1, "T", gold)
  hzline("a", 4)
  rvc = input("> ").lower()
  if rvc == "full refill":
    if gc >= 3:
      gc = gc - 3
      throwingknife = 20
      says(red2, "Shady Vendor", grey, "Thanks. Hope these help you.")
      time.sleep(2)
      locationreturn()
    else:
      says(red2, "Shady Vendor", grey, "Sorry, cant help if you don't have the money. Gotta go!")
      locationactions.remove("rogue vendor")
      time.sleep(2)
      locationreturn()
  elif rvc == "3 knives":
    if sc >= 8:
      sc = sc - 8
      throwingknife = throwingknife + 3
      says(red2, "Shady Vendor", grey, "Here you go.  Thank you.")
      time.sleep(1)
      if throwingknife > 20:
        throwingknife = 20
        says(red2, "Shady Vendor", grey, "Sorry, your knife belt only has space for 20 knives.")
      time.sleep(2)
      locationreturn()
    else:
      says(red2, "Shady Vendor", grey, "Sorry, can't help if you don't have the money. Gotta go!")
      locationactions.remove("rogue vendor")
      time.sleep(2)
      locationreturn()
  elif rvc == "heirloom whetstone":
    if pc >= 6:
      pc = pc - 6
      says(red2, "Shady Vendor", grey, "No. Way. Thanks for being such a loyal customer, see you around.")
      time.sleep(2)
      inventory.append("Heirloom Whetstone")
      locationactions.remove("rogue vendor")
      locationreturn()
    else:
      says(red2, "Shady Vendor", grey, "Oh, that? My old whetstone, it's served me well.  Doesn't seem like you can afford it though, sorry 'bout that...")
      time.sleep(4)
      locationreturn()
  elif rvc == "exit" or rvc == "leave":
    time.sleep(0.5)
    locationreturn()
  else:
    says(red2, "Shady Vendor", grey, "Uhhh can't help you with that...")
    time.sleep(2.5)
    locationreturn()

#UNCHANGED - PURPOSE: Runs a weather check and outputs in a decorative manner
def weathercheck():
  global weather
  weatherlist = ["sun", "rain", "fog", "storm", "wind", "sandstorm", "clear", "snow"]
  weathercolors = [yellow, blue, grey, darkgrey, silver, tan, paleyellow, white]
  for i in range(len(weatherlist)):
    if weather == weatherlist[i-1]:
      wc = weathercolors[i-1]
  print("The current weather is " + wc + weather + white + ".")
  time.sleep(0.2)
  print("")
  print("[ENTER] to continue.")
  wait = input()

#UNCHANGED - PURPOSE: Lets the player check their hunger stat
def hungercheck():
  global maxhunger, hunger
  print("You are at " + darkred + str(hunger) + "/" + str(maxhunger) + white +        " hunger.")
  time.sleep(1)
  locationreturn()

#UNCHANGED - PURPOSE: A function that automatically warns the player when their hunger is low, and lets them eat within the menu
def mealcheck():
  global hours, minutes, hp, hunger, maxhunger, eat, timeofday, hp, maxhp, inventory
  if ((((hours == 11) or (hours == 12)) and (timeofday == "am")) or ((hours == 7) or (hours == 8))):
    if hunger < 8:
      print("You're getting hungry.  Is there anything in your inventory that you want to eat? y/n")
      eatyes = input("> ").lower()
      if eatyes == "y":
        print("what would you like to eat?")
        eatchoice = input("> ").lower()
        if eatchoice in inventory:
          if eatchoice == "bread":
            print("You cut up your loaf of bread and have a nice meal, full of carbs and nothing else.")
            hunger = hunger + 2
            if hunger > maxhunger:
              hunger = maxhunger
            hp = hp + 1
            if hp > maxhp:
              hp = maxhp
            hungercheck()
            inventory.remove("bread")
            eat = "yes"
          if ((eatchoice == "filleted salmon") or (eatchoice == "filleted salmon")):
            print("You have a lovely seafood dinner.")
            hunger = hunger + random.randint(2)
            if hunger > maxhunger:
              hunger = maxhunger
            hp = hp + random.randint(1, 2)
            if hp > maxhp:
              hp = maxhp
            hungercheck()
            inventory.remove(eatchoice)
            eat = "yes"
          if ((eatchoice == "filleted cod") or (eatchoice == "filleted cod")):
            print("You have a lovely seafood dinner.")
            hunger = hunger + random.randint(2)
            if hunger > maxhunger:
              hunger = maxhunger
            hp = hp + random.randint(1, 2)
            if hp > maxhp:
              hp = maxhp
            hungercheck()
            inventory.remove(eatchoice)
            eat = "yes"
          elif eatchoice == "milk":
            print("You chug down a pint of milk.")
            hunger = hunger + random.randint(1, 3)
            if hunger > maxhunger:
              hunger = maxhunger
            hp = hp + 1
            if hp > maxhp:
              hp = maxhp
            inventory.remove("milk")
            hungercheck()
            eat = "yes"
          elif eatchoice == "tomato":
            print("You eat a tomato.")
            hunger = hunger + 1
            if hunger > maxhunger:
              hunger = maxhunger
            hungercheck()
            inventory.remove("tomato")
            eat = "yes"
          else:
            print("You can't eat that!")
            time.sleep(1)
            mealcheck()
        else:
          print("That's not in your inventory!")
          time.sleep(1)
          mealcheck()
      elif eatyes == "no" or eatyes == "n":
        print("You decide not to eat.")
        time.sleep(1)
      else:
        mealcheck()

#UNCHANGED - PURPOSE: Lets the player turn coins into other coins
def exchange():
  global location, pc, gc, sc, cc
  print("What money would you like to exchange? [" + platinum + "pc" + white +        "/" + gold + "gc" + white + "/" + silver + "cc" + white + "/" +        copper + "cc" + white + "]")
  print("Say exit to leave.")
  mtypee = input("> ")
  if mtypee == "gc":
    print("What would you like to exchange it to?")
    myexche = input("> ")
    if myexche == "sc":
      print("How many " + gold + "gc" + white + " would you like to convert?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 <= gc:
          gc = gc - myexcha2
          sc = sc + 10 * myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          ("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    if myexche == "pc":
      print("How many " + platinum + "pc" + white + " would you like to make?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if 10 * myexcha2 <= gc:
          gc = gc - myexcha2 * 10
          pc = pc + myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    if myexche == "cc":
      print("How many " + gold + "gc" + white + " would you like to convert?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 <= gc:
          gc = gc - myexcha2
          cc = cc + 100 * myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    else:
      print("Not a valid conversion.")
      exchange()
  if mtypee == "sc":
    print("What would you like to exchange it to?")
    myexche = input("> ")
    if myexche == "gc":
      print("How many " + gold + "gc" + white + " would you like to make?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if 10 * myexcha2 <= sc:
          sc = sc - 10 * myexcha2
          gc = gc + myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    if myexche == "pc":
      print("How many " + platinum + "pc" + white + " would you like to make?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if 100 * myexcha2 <= sc:
          sc = sc - myexcha2 * 100
          pc = pc + myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    if myexche == "cc":
      print("How many sc would you like to convert?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 <= sc:
          sc = sc - myexcha2
          cc = cc + 10 * myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    else:
      print("Not a valid conversion.")
      exchange()
  if mtypee == "pc":
    print("What would you like to exchange it to?")
    myexche = input("> ")
    if myexche == "sc":
      print("How many " + platinum + "pc" + white +            " would you like to convert?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 <= pc:
          pc = pc - myexcha2
          sc = sc + 100 * myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          ("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    if myexche == "gc":
      print("How many " + platinum + "pc" + white +            " would you like to convert?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 <= pc:
          pc = pc - myexcha2
          gc = gc + myexcha2 * 10
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    if myexche == "cc":
      print("How many " + platinum + "pc" + white +            " would you like to convert?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 <= pc:
          pc = pc - myexcha2
          cc = cc + 1000 * myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    else:
      print("Not a valid conversion.")
      exchange()
  if mtypee == "cc":
    print("What would you like to exchange it to?")
    myexche = input("> ")
    if myexche == "pc":
      print("How many " + platinum + "pc" + white + " would you like to make?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 * 1000 <= cc:
          cc = cc - myexcha2 * 1000
          pc = pc + myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          ("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    if myexche == "gc":
      print("How many " + gold + "gc" + white + " would you like to make?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 * 100 <= cc:
          cc = cc - myexcha2 * 100
          gc = gc + myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    if myexche == "sc":
      print("How many sc would you like to make?")
      myexcha = input("> ")
      try:
        myexcha2 = int(myexcha)
        myexcha2 = math.floor(myexcha2)
        if myexcha2 * 10 <= cc:
          cc = cc - myexcha2 * 10
          sc = sc + myexcha2
          print("Converted!")
          time.sleep(1)
          exchange()
        else:
          print("You don't have that much money!")
          time.sleep(1)
          exchange()
      except:
        print("not a valid number")
        exchange()
    else:
      print("Not a valid conversion.")
      exchange()
  if mtypee == "exit":
    locationreturn()
  else:
    exchange()

#UNCHANGED - PURPOSE: A function for displaying the player's equipped gear
def lasg():
  global eqgear
  laasg = ", ".join(eqgear)
  print("Gear: " + laasg)

#UNCHANGED - PURPOSE: A function for displaying the player's beastiary
def lasb():
  global bestiarylist
  laasb = "], [".join(bestiarylist)
  print("[Discovered Enemies]: " + silver + "[" + laasb + "] " + white)

#UNCHANGED - PURPOSE: Displays the current time in game
def timecheck():
  global timeofday, hours, minutes
  if minutes < 10:
    print("It is " + str(hours) + ":0" + str(minutes) + " " + timeofday + ".")
  else:
    print("It is " + str(hours) + ":" + str(minutes) + " " + timeofday + ".")
  time.sleep(1)
  locationreturn()

#UNCHANGED - PURPOSE: A function for displaying the player's loadout
def loadout():
  global location
  print("Weapon: " + eqweapon)
  print("Headgear: " + eqhelm)
  print("Armor: " + eqarmor)
  print("Legwear: " + eqgreaves)
  lasg()
  print("Offhand: " + eqoffhand)
  time.sleep(1)
  locationreturn()

#UNCHANGED - PURPOSE: A function for displaying the player's coins
def coins():
  global location
  print(platinum + "pc" + white + ": " + str(pc))
  print(gold + "gc" + white + ": " + str(gc))
  print(silver + "sc" + white + ": " + str(sc))
  print(copper + "cc" + white + ": " + str(cc))
  time.sleep(1)
  locationreturn()

#UNCHANGED - PURPOSE: A function for displaying the player's hitpoints/max hitpoints
def hpcheck():
  global maxhp, hp
  print("You are at " + red + str(hp) + "/" + str(maxhp) + " HP." + white)
  time.sleep(1)
  locationreturn()

def minigame(type = 'A', time = 30, goal = 100, button = 'e', wintext = 'You win!', losetext = 'You lose!'):
    if type == 'A': # Timed button spam minigame
        print("Press the " + button + " key as fast as you can!")
        print("You have " + str(time) + " seconds.")
        start = time.time()
        count = 0
        while time.time() - start < time:
            if readkey() == button:
                count += 1
        print("You pressed the button " + str(count) + " times.")
        if count >= goal:
            print(wintext)
        else:
            print(losetext)

# FULLY CHANGED - PURPOSE: The main fishing function of the game | CHANGE: Did a complete overhaul of the current fishing systems to make it more interactive
def fish():
    global inventory, weather, location, eqrod
    luremax = 40
    luremin = 10
    if eqrod == "none":
        print("You don't have a fishing rod!")
        time.sleep(1)
        locationreturn()
    if eqrod in fishingrodstats:
        lurespeed = fishingrodstats[eqrod][0]
        luremax = luremax * lurespeed
        luremin = luremin * lurespeed
    if weather == "rain":
        luremax -= 2
    if weather == "storm":
        luremax -= 5
    if weather == "wind":
        luremax -= 3
    print("You cast your line into the water.")
    lureTime = random.randint(luremin, luremax)
    pressSequence = []
    for i in range(lureTime):
        pressSequence.append(random.choice(['a', 's', 'd', 'f']))
    while len(pressSequence) > 0:
        time.sleep(0.5)
        presstime = time.time()
        print("Press " + pressSequence[0] + ".")
        if readkey() == pressSequence[0]:
            if time.time() - presstime < 0.5:
                print("Perfect!")
            elif time.time() - presstime < 1:
                print("Good!")
            elif time.time() - presstime < 2:
                print("Okay!")
            elif time.time() - presstime < 3:
                print("Meh...")
            pressSequence.pop(0)
        else:
            print("Wrong button!")
            pressSequence.pop(0)
            pressSequence.append(random.choice(['a', 's', 'd', 'f']))
    print("Something bites!")
    time.sleep(1)
    clearscreen()









#UNCHANGED - PURPOSE: A function that opens the off-character storage menu
def storage():
  global inventory, storagelist
  storex = 0
  while storex == 0:
    las(storagelist)
    time.sleep(1)
    print("Would you like to [deposit] or [withdraw] items, or [exit]?")
    bchoice = input("> ").lower()
    if bchoice == "deposit":
      print("Your inventory:")
      las(inventory)
      print("Which item would you like to deposit?")
      depch = input("> ").lower()
      if depch in inventory:
        inventory.remove(depch)
        storagelist.append(depch)
        print("You put your " + depch + " into storage!")
    elif bchoice == "withdraw":
      print("Which item would you like to withdraw?")
      depch = input("> ").lower()
      if depch in storagelist:
        storagelist.remove(depch)
        inventory.append(depch)
        print("You retrieved your " + depch + " from storage!")
    elif bchoice == "exit":
      storex = 1
    time.sleep(1)
  locationreturn()

#UNCHANGED - PURPOSE: A function for inventory purging
def massremove(nu, mat):
  global inventory
  while nu > 0:
    nu = nu - 1
    inventory.remove(mat)

#UNCHANGED - PURPOSE: Literally the intro sequence
def start():
  global enemies, dp
  dp = 1
  print("Welcome to the vast open world fantasy realm of Iloraea!")
  time.sleep(2)
  print("First of all, we need a few quick things to start building your ideal character.")
  time.sleep(2)
  classchoose()
  time.sleep(1)
  stylechoose()
  print("Oh, and here's the discord link if you want it, you can always check [HELP] in Falezrin to find it again.")
  print("https://discord.gg/DCZTg5rw2r")
  time.sleep(1)
  print("[ENTER] to continue.")
  wait = input()
  print("Next, let's test your fighting skills on a goblin to get you used to your class.")
  time.sleep(1)
  enemies.append("goblin")
  combat()
  time.sleep(2)
  if loot == "yes":
    print("Nice job!  Now that you're used to your class, let's head to a village.")
    time.sleep(1)
  Falezrinentry()

#ADDED ON TO: New locations | PURPOSE: Returns the player to their last location, typically used to get out of menus
def locationreturn():
  global location
  if location == "tutorial":
    start()
  if location == "Falezrin":
    Falezrin()
  if location == "ShroudedOutpost":
    ShroudedOutpost()
  if location == "StonesEdge":
    StonesEdge()
  if location == "Snowdrift":
    Snowdrift()
  if location == "TheOasis":
    TheOasis()
  if location == "Olaera":
    Olaera()
  if location == "RTherinWest":
    RTherinWest()
  if location == "RTherinEast":
    RTherinEast()
  if location == "Riverside":
    Riverside()
  if location == "northernsea1":
    northernsea1()
  if location == "northernsea2":
    northernsea2()
  if location == "northernsea3":
    northernsea3()
  if location == "twilighttundra1":
    twilighttundra1()
  if location == "twilighttundra2":
    twilighttundra2()
  if location == "twilighttundra3":
    twilighttundra3()
  if location == "twilighttundra4":
    twilighttundra4()
  if location == "twilighttundra5":
    twilighttundra5()
  if location == "twilighttundra6":
    twilighttundra6()
  if location == "twilighttundra7":
    twilighttundra7()
  if location == "twilighttundra8":
    twilighttundra8()
  if location == "shatteredtaiga1":
    shatteredtaiga1()
  if location == "shatteredtaiga2":
    shatteredtaiga2()
  if location == "shatteredtaiga3":
    shatteredtaiga3()
  if location == "shatteredtaiga4":
    shatteredtaiga4()
  if location == "shatteredtaiga5":
    shatteredtaiga5()
  if location == "oakensanctuary1":
    oakensanctuary1()
  if location == "oakensanctuary2":
    oakensanctuary2()
  if location == "oakensanctuary3":
    oakensanctuary3()
  if location == "oakensanctuary4":
    oakensanctuary4()
  if location == "oakensanctuary5":
    oakensanctuary5()
  if location == "oakensanctuary6":
    oakensanctuary6()
  if location == "oakensanctuary7":
    oakensanctuary7()
  if location == "oakensanctuary8":
    oakensanctuary8()
  if location == "oakensanctuary9":
    oakensanctuary9()
  if location == "oakensanctuary10":
    oakensanctuary10()
  if location == "oakensanctuary11":
    oakensanctuary11()
  if location == "oakensanctuary12":
    oakensanctuary12()
  if location == "oakensanctuary13":
    oakensanctuary13()
  if location == "oakensanctuary14":
    oakensanctuary14()
  if location == "oakensanctuary15":
    oakensanctuary15()
  if location == "LakeOya":
    LakeOya()
  if location == "scintillantrainforest1":
    scintillantrainforest1()
  if location == "scintillantrainforest2":
    scintillantrainforest2()
  if location == "scintillantrainforest3":
    scintillantrainforest3()
  if location == "scintillantrainforest4":
    scintillantrainforest4()
  if location == "scintillantrainforest5":
    scintillantrainforest5()
  if location == "scintillantrainforest6":
    scintillantrainforest6()
  if location == "scintillantrainforest7":
    scintillantrainforest7()
  if location == "scintillantrainforest8":
    scintillantrainforest8()
  if location == "scintillantrainforest9":
    scintillantrainforest9()
  if location == "scintillantrainforest10":
    scintillantrainforest10()
  if location == "scintillantrainforest11":
    scintillantrainforest11()
  if location == "scintillantrainforest12":
    scintillantrainforest12()
  if location == "scintillantrainforest13":
    scintillantrainforest13()
  if location == "scintillantrainforest14":
    scintillantrainforest14()
  if location == "scintillantrainforest15":
    scintillantrainforest15()
  if location == "scintillantrainforest16":
    scintillantrainforest16()
  if location == "scintillantrainforest17":
    scintillantrainforest17()
  if location == "scintillantrainforest18":
    scintillantrainforest18()
  if location == "darksporeforest1":
    darksporeforest1()
  if location == "darksporeforest2":
    darksporeforest2()
  if location == "darksporeforest3":
    darksporeforest3()
  if location == "darksporeforest4":
    darksporeforest4()
  if location == "darksporeforest5":
    darksporeforest5()
  if location == "darksporeforest6":
    darksporeforest6()
  if location == "darksporeforest7":
    darksporeforest7()
  if location == "darksporeforest8":
    darksporeforest8()
  if location == "darksporeforest9":
    darksporeforest9()
  if location == "darksporeforest10":
    darksporeforest10()
  if location == "darksporeforest11":
    darksporeforest11()
  if location == "darksporeforest12":
    darksporeforest12()
  if location == "darksporeforest13":
    darksporeforest13()
  if location == "bogofmangroves1":
    bogofmangroves1()
  if location == "bogofmangroves2":
    bogofmangroves2()
  if location == "bogofmangroves3":
    bogofmangroves3()
  if location == "bogofmangroves4":
    bogofmangroves4()
  if location == "bogofmangroves5":
    bogofmangroves5()
  if location == "bogofmangroves6":
    bogofmangroves6()
  if location == "bogofmangroves7":
    bogofmangroves7()
  if location == "bogofmangroves8":
    bogofmangroves8()
  if location == "bogofmangroves9":
    bogofmangroves9()
  if location == "bogofmangroves10":
    bogofmangroves10()
  if location == "distantmeadows1":
    distantmeadows1()
  if location == "distantmeadows2":
    distantmeadows2()
  if location == "distantmeadows3":
    distantmeadows3()
  if location == "distantmeadows4":
    distantmeadows4()
  if location == "distantmeadows5":
    distantmeadows5()
  if location == "distantmeadows6":
    distantmeadows6()
  if location == "distantmeadows7":
    distantmeadows7()
  if location == "distantmeadows8":
    distantmeadows8()
  if location == "distantmeadows9":
    distantmeadows9()
  if location == "distantmeadows10":
    distantmeadows10()
  if location == "distantmeadows11":
    distantmeadows11()
  if location == "distantmeadows12":
    distantmeadows12()
  if location == "distantmeadows13":
    distantmeadows13()
  if location == "distantmeadows14":
    distantmeadows14()
  if location == "savagesteppe1":
    savagesteppe1()
  if location == "savagesteppe2":
    savagesteppe2()
  if location == "savagesteppe3":
    savagesteppe3()
  if location == "savagesteppe4":
    savagesteppe4()
  if location == "savagesteppe5":
    savagesteppe5()
  if location == "savagesteppe6":
    savagesteppe6()
  if location == "savagesteppe7":
    savagesteppe7()
  if location == "savagesteppe8":
    savagesteppe8()
  if location == "savagesteppe9":
    savagesteppe9()
  if location == "savagesteppe10":
    savagesteppe10()
  if location == "savagesteppe11":
    savagesteppe11()
  if location == "savagesteppe12":
    savagesteppe12()
  if location == "savagesteppe13":
    savagesteppe13()
  if location == "verdanthills1":
    verdanthills1()
  if location == "verdanthills2":
    verdanthills2()
  if location == "verdanthills3":
    verdanthills3()
  if location == "verdanthills4":
    verdanthills4()
  if location == "verdanthills5":
    verdanthills5()
  if location == "verdanthills6":
    verdanthills6()
  if location == "verdanthills7":
    verdanthills7()
  if location == "verdanthills8":
    verdanthills8()
  if location == "verdanthills9":
    verdanthills9()
  if location == "verdanthills10":
    verdanthills10()
  if location == "skygrassprairie1":
    skygrassprairie1()
  if location == "skygrassprairie2":
    skygrassprairie2()
  if location == "skygrassprairie3":
    skygrassprairie3()
  if location == "skygrassprairie4":
    skygrassprairie4()
  if location == "skygrassprairie5":
    skygrassprairie5()
  if location == "skygrassprairie6":
    skygrassprairie6()
  if location == "skygrassprairie7":
    skygrassprairie7()
  if location == "skygrassprairie8":
    skygrassprairie8()
  if location == "sandyshores1":
    sandyshores1()
  if location == "sandyshores2":
    sandyshores2()
  if location == "sandyshores3":
    sandyshores3()
  if location == "sandyshores4":
    sandyshores4()
  if location == "sandyshores5":
    sandyshores5()
  if location == "sandyshores6":
    sandyshores6()
  if location == "sandyshores7":
    sandyshores7()
  if location == "sandyshores8":
    sandyshores8()
  if location == "sandyshores9":
    sandyshores9()
  if location == "sandyshores10":
    sandyshores10()
  if location == "southeastsea1":
    southeastsea1()
  if location == "southeastsea2":
    southeastsea2()
  if location == "southeastsea3":
    southeastsea3()
  if location == "southeastsea4":
    southeastsea4()
  if location == "southeastsea5":
    southeastsea5()
  if location == "southeastsea6":
    southeastsea6()
  if location == "southeastsea7":
    southeastsea7()
  if location == "southeastsea8":
    southeastsea8()
  if location == "southeastsea9":
    southeastsea9()
  if location == "southeastsea10":
    southeastsea10()
  if location == "southeastsea11":
    southeastsea11()
  if location == "southeastsea12":
    southeastsea12()
  if location == "southeastsea13":
    southeastsea13()
  if location == "southeastsea14":
    southeastsea14()
  if location == "southeastsea15":
    southeastsea15()
  if location == "southeastsea16":
    southeastsea16()
  if location == "southeastsea17":
    southeastsea17()
  if location == "southeastsea18":
    southeastsea18()
  if location == "southeastsea19":
    southeastsea19()
  if location == "forsakenkarst1":
    forsakenkarst1()
  if location == "forsakenkarst2":
    forsakenkarst2()
  if location == "forsakenkarst3":
    forsakenkarst3()
  if location == "forsakenkarst4":
    forsakenkarst4()
  if location == "sunsetmesa1":
    sunsetmesa1()
  if location == "sunsetmesa2":
    sunsetmesa2()
  if location == "sunsetmesa3":
    sunsetmesa3()
  if location == "sunsetmesa4":
    sunsetmesa4()
  if location == "sunsetmesa5":
    sunsetmesa5()
  if location == "IsleRho":
    IsleRho()
  if location == "IsleTheta1":
    IsleTheta1()
  if location == "IsleTheta2":
    IsleTheta2()
  if location == "cragrockbelt1":
    cragrockbelt1()
  if location == "cragrockbelt2":
    cragrockbelt2()
  if location == "cragrockbelt3":
    cragrockbelt3()
  if location == "cragrockbelt4":
    cragrockbelt4()
  if location == "peaksofdespair1":
    peaksofdespair1()
  if location == "peaksofdespair2":
    peaksofdespair2()
  if location == "embersreach1":
    embersreach1()
  if location == "embersreach2":
    embersreach2()
  if location == "embersreach3":
    embersreach3()
  if location == "cloudedspires1":
    cloudedspires1()
  if location == "cloudedspires2":
    cloudedspires2()
  if location == "cloudedspires3":
    cloudedspires3()
  if location == "cloudedspires4":
    cloudedspires4()
  if location == "cloudedspires5":
    cloudedspires5()
  if location == "cloudedspires6":
    cloudedspires6()
  if location == "cloudedspires7":
    cloudedspires7()
  if location == "cloudedspires8":
    cloudedspires8()
  if location == "cloudedspires9":
    cloudedspires9()
  if location == "cloudedspires10":
    cloudedspires10()
  if location == "cloudedspires11":
    cloudedspires11()
  if location == "cloudedspires12":
    cloudedspires12()
  if location == "cloudedspires13":
    cloudedspires13()
  if location == "cloudedspires14":
    cloudedspires14()
  if location == "cloudedspires15":
    cloudedspires15()
  if location == "cloudedspires16":
    cloudedspires16()
  if location == "cloudedspires17":
    cloudedspires17()
  if location == "cloudedspires18":
    cloudedspires18()
  if location == "cloudedspires19":
    cloudedspires19()
  if location == "cloudedspires20":
    cloudedspires20()
  if location == "cloudedspires21":
    cloudedspires21()
  if location == "cloudedspires22":
    cloudedspires22()
  if location == "cloudedspires23":
    cloudedspires23()
  if location == "cloudedspires24":
    cloudedspires24()
  if location == "cloudedspires25":
    cloudedspires25()
  if location == "cloudedspires26":
    cloudedspires26()
  if location == "cloudedspires27":
    cloudedspires27()
  if location == "cloudedspires28":
    cloudedspires28()
  if location == "cloudedspires29":
    cloudedspires29()
  if location == "cloudedspires30":
    cloudedspires30()
  if location == "cloudedspires31":
    cloudedspires31()
  if location == "cloudedspires32":
    cloudedspires32()
  if location == "cloudedspires33":
    cloudedspires33()

#HALF REWORKED: Reworked with decorative functions, gave the merchant a unique character.
def falmercha():
  global gc, sc, pc, cc
  says(green, "Tom", lightgrey, "Hello, here are the goods I'm selling today. May I interest you in anything?")
  time.sleep(1)
  hzline("b", 2, "FOOD")
  merchentry("BREAD", 0, 2, 0, 0, 1)
  merchentry("TOMATO", 0, 0, 5, 0, 1)
  hzline("b", 2, "DRINK")
  merchentry("MILK", 0, 2, 0, 0, 1)
  hzline("a", 2)
  fmaa = input("> ").lower()
  if fmaa == "bread":
    if gc >= 2:
      says(green, "Tom", lightgrey, "Here you go, thanks for your purchase.")
      gc = gc - 2
      inventory.append("bread")
    else:
      says(green, "Tom", lightgrey, "Ah. Sorry, you don't have enough money.")
  elif fmaa == "milk":
    if gc >= 2:
      says(green, "Tom", lightgrey, "Here you go, thanks for your purchase.")
      gc = gc - 2
      inventory.append("milk")
    else:
      says(green, "Tom", lightgrey, "Ah. Sorry, you don't have enough money.")
  elif fmaa == "tomato":
    if sc >= 5:
      says(green, "Tom", lightgrey, "Here you go, thanks for your purchase.")
      sc = sc - 5
      inventory.append("tomato")
    else:
      says(green, "Tom", lightgrey, "Ah. Sorry, you don't have enough money.")
  elif fmaa == "exit" or fmaa == "leave":
    pass
  else:
    says(green, "Tom", lightgrey, "Sorry, but I don't have any "+white+"'"+italic+fmaa+clearf+"'"+lightgrey+".")
  time.sleep(1)
  Falezrin()

#HALF REWORKED: Reworked with decorative functions, gave the merchant a unique character.
def falmerchc():
  global cc, pc, gc, sc
  says(purple, "Aria", lavender, "Greetings, adventurer... May I interest you in some magical items?")
  time.sleep(1)
  hzline("b", 3, "GEAR")
  merchentry("ANGELIC RINGLET", 5, 0, 0, 0, 1, "T", gold)
  hzline("b", 3, "TOMES")
  merchentry("FIREBALL", 3, 5, 0, 0, 2, "T", orange, "TOME", white)
  hzline("b", 3, "POTIONS")
  merchentry("SMALL", 0, 0, 5, 0, 3, "T", white, "HEALTH", lime, "POTION", white)
  merchentry("HEALTH", 0, 1, 0, 0, 2, "T", lime, "POTION", white)
  merchentry("MANASPARK", 0, 3, 0, 0, 2, "T", teal, "POTION", white)
  hzline("a", 3)
  fmac = input("> ").lower()
  if fmac == "angelic ringlet":
    if pc >= 5:
      says(purple, "Aria", lavender, "Here you go... Be careful with that thing.")
      pc = pc - 5
      inventory.append("angelic ringlet")
    else:
      says(purple, "Aria", lavender, "Appologies, but it seems you're a bit short.")
  elif fmac == "fireball tome":
    if pc >= 3 and gc >= 5:
      says(purple, "Aria", lavender, "Here you go. Please do come again sometime.")
      pc = pc - 3
      gc = gc - 5
      inventory.append("fireball tome")
    else:
      says(purple, "Aria", lavender, "Appologies, but it seems you're a bit short.")
  elif fmac == "small health potion":
    if sc >= 5:
      says(purple, "Aria", lavender, "Here you go. Please do come again sometime.")
      sc = sc - 5
      inventory.append("small health potion")
    else:
      says(purple, "Aria", lavender, "Appologies, but it seems you're a bit short.")
  elif fmac == "health potion":
    if gc >= 1:
      says(purple, "Aria", lavender, "Here you go. Please do come again sometime.")
      gc = gc - 1
      inventory.append("health potion")
    else:
      says(purple, "Aria", lavender, "Appologies, but it seems you're a bit short.")
  elif fmac == "manaspark potion":
    if gc >= 3:
      says(purple, "Aria", lavender, "Here you go. Please do come again sometime.")
      gc = gc - 3
      inventory.append("manaspark potion")
    else:
      says(purple, "Aria", lavender, "Appologies, but it seems you're a bit short.")
  elif fmac == "exit" or fmac == "leave":
    pass
  else:
    says(purple, "Aria", lavender, "Sorry, but I don't have any "+white+"'"+italic+fmac+clearf+"'"+lavender+".")
  time.sleep(1)
  Falezrin()

#HALF REWORKED: Reworked with decorative functions, gave the merchant a unique character.
def falmerchb():
  global gc, pc, sc, cc
  print(orange+"*"+yellow+"clank clang"+orange+"*"+clearf)
  time.sleep(0.5)
  print(orange+"*"+yellow+"clang clonk"+orange+"*"+clearf)
  time.sleep(1)
  says(yellow, "Jeremiah", paleyellow, "Oh, didn't see ya there. I'm the armorsmith here in Falezrin.")
  time.sleep(1)
  hzline("b", 1, "ARMOR")
  merchentry("IRON", 1, 2, 0, 0, 2, "T", lightgrey, "HELM", white)
  merchentry("IRON", 3, 5, 0, 0, 2, "T", lightgrey, "PLATE", white)
  merchentry("IRON", 2, 5, 0, 0, 2, "T", lightgrey, "GREAVES", white)
  hzline("a", 1)
  fmbc = input("> ").lower()
  if fmbc == "iron helm":
    if pc >= 1 and gc >= 2:
      says(yellow, "Jeremiah", paleyellow, "Here ya go, thanks for yer' purchase.")
      pc = pc - 1
      gc = gc - 2
      inventory.append("iron helm")
    else:
      says(yellow, "Jeremiah", paleyellow, "Sorry, pal, ya don't got enough money for that.")
  elif fmbc == "iron plate":
    if gc >= 35:
      says(yellow, "Jeremiah", paleyellow, "Here ya go, thanks for yer' purchase.")
      gc = gc - 35
      inventory.append("iron plate")
    else:
      says(yellow, "Jeremiah", paleyellow, "Sorry, pal, ya don't got enough money for that.")
  elif fmbc == "iron greaves":
    if gc >= 25:
      says(yellow, "Jeremiah", paleyellow, "Here ya go, thanks for yer' purchase.")
      gc = gc - 25
      inventory.append("iron greaves")
    else:
      says(yellow, "Jeremiah", paleyellow, "Sorry, pal, ya don't got enough money for that.")
  elif fmbc == "exit" or fmbc == "leave":
    pass
  else:
    says(yellow, "Jeremiah", paleyellow, "Sorry, but I don't have any "+white+"'"+italic+white+fmbc+clearf+"'"+paleyellow+".")
  time.sleep(1)
  Falezrin()

#UNCHANGED - PURPOSE: Which merchant in Falezrin does the user want to go to?
def falmerch():
  print("There are three merchants.  Which one would you like to go to? Say 'a', 'b' or 'c', or exit to leave.")
  falmech = input("> ").lower()
  if falmech == "a":
    falmercha()
  elif falmech == "b":
    falmerchb()
  elif falmech == "c":
    falmerchc()
  elif falmech == "exit":
    print("You head back to the front of the city.")
    time.sleep(1)
    Falezrin()
  else:
    print("That's not a merchant.")
    falmerch()

#UNCHANGED - PURPOSE: Entry to Falezrin (to prevent as much of a text wall)
def Falezrinentry():
  global inve, invi, invu, location
  locationchange("Falezrin")
  print("")
  print("After what seems around an hour, you see a somewhat small town in the distance.")
  time.sleep(2)
  print("")
  print("Getting closer, you see a basic defense system composed of an 8 foot high wall of pointed logs around much of the village with an iron gate over the entrance.  Two guards open it as they see you approaching. You walk in through the gates.")
  time.sleep(4)
  print("")
  print("The bustle of village noise and lovely scents wafting through the air makes you sigh in relief.  You see an inn a bit off to the left and a couple merchants selling goods.")
  time.sleep(2)
  print("")
  lactionfix()
  mealcheck()
  Falezrin()

#verdant hills
def verdanthills1():
  global location, hours, timeofday, minutes, hunger
  locationchange("verdanthills1")
  mealcheck()
  dt(0.02,"You gaze around as you see a network of vast rolling hills covered in lush, tall grass that sways in the seemingly ever-blowing wind.  The hills are dotted with clusters of oak and birch trees with dark verdant green leaves.  Blossoming vines seem to thrive in these clusters of trees and grow everywhere up the trees.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "gather":
      timeshift(1, 0)
      print("You spend an hour gathering plants.")
      time.sleep(2)
      print("...")
      time.sleep(2)
      gatherluck = random.randint(1, 18)
      if 1 <= gatherluck <= 5:
        print("In the hour that you searched, you could not find any resources of high quality.")
      elif 6 <= gatherluck <= 11:
        print("You find some nice fallen branches that are strong and thick. You break them apart cleanly.")
        inventory.append("oak branches")
      elif 12 <= gatherluck <= 15:
        print("You find some very intact and thriving blossoming vines and gather them.")
        inventory.append("blossom vines")
      elif 16 <= gatherluck <= 18:
        print("You find a lot of very intact and thriving blossoming vines and gather them.")
        inventory.append("blossom vines")
        inventory.append("blossom vines")
      time.sleep(2.5)
      verdanthills1()
    elif laction == "loadout":
      loadout()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "west":
      print("You start the long walk back to Falezrin.")
      timeshift(0, 30)
      time.sleep(1)
      Falezrinentry()
    elif laction == "east":
      hunger = hunger - 1
      print("You keep walking through the grasslands, pausing now and then to marvel at the scenery.")
      time.sleep(1)
      timeshift(1, 0)
      time.sleep(1)
      verdanthills5()
    elif laction == "north":
      print("You head towards the more wild areas of the plains.")
      timeshift(0, 30)
      time.sleep(1)
      print("The clumps of trees start becoming more common.")
      time.sleep(2)
      verdanthills2()
    elif laction == "south":
      print("You head towards the more grassy areas of the plains.")
      timeshift(0, 30)
      time.sleep(1)
      print("The grass seems to take on a faintly blue tint, and instead of patches of trees the landscape is just dotted with individual massive trees.")
      time.sleep(2)
      verdanthills3()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      verdanthills1()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      verdanthills1()
  else:
    verdanthills1()

#verdant hills
def verdanthills3():
  global location, hours, timeofday, minutes, hunger
  locationchange("verdanthills3")
  mealcheck()
  dt(0.02,"Green grass with a tint of blue covers the rolling hills. Here and there, singular massive deep brown trees with verdant leaves spring out of the earth, covered with vines.")
  lactionfix()
  time.sleep(4)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "gather":
      timeshift(1, 0)
      print("You spend an hour gathering plants.")
      time.sleep(2)
      print("...")
      time.sleep(2)
      gatherluck = random.randint(1, 18)
      if 1 <= gatherluck >= 5:
        print("In the hour that you searched, you could not find any resources of high quality.")
      elif 6 <= gatherluck >= 11:
        print("You find some nice fallen branches that are strong and thick. You break them apart cleanly.")
        inventory.append("oak branches")
      elif 12 <= gatherluck >= 15:
        print("You find some very intact and thriving blossoming vines and gather them.")
        inventory.append("blossom vines")
      elif 16 <= gatherluck >= 18:
        print("You find a lot of very intact and thriving blossoming vines and gather them.")
        inventory.append("blossom vines")
        inventory.append("blossom vines")
      time.sleep(2.5)
      verdanthills1()
    elif laction == "loadout":
      loadout()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "west":
      hunger = hunger - 1
      print("You turn to the west and see harsh landscapes in the distance.")
      time.sleep(1)
      print("As you walk towards them, the air gets warmer and warmer. Cliffs start dotting the landscape and small creeks cut across the land.")
      time.sleep(2.5)
      timeshift(1, 0)
      savagesteppe5()
    elif laction == "east":
      hunger = hunger - 1
      print("You continue hiking through the grasslands, in direction of bluer grass and fewer trees.")
      time.sleep(1)
      timeshift(1, 0)
      time.sleep(1)
      verdanthills4()
    elif laction == "north":
      print("You head towards the more green areas of the plains.")
      timeshift(0, 30)
      time.sleep(1)
      print("The grass seems to take on a stronger green tint, and the singular massive trees start to take on clumped patterns and get smaller as you walk north.")
      time.sleep(2)
      verdanthills1()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      verdanthills3()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      verdanthills3()
  else:
    verdanthills3()

#verdant hills
def verdanthills4():
  global location, hours, timeofday, minutes, hunger
  locationchange("verdanthills4")
  mealcheck()
  dt(0.02,"Green grass with a tint of blue covers the rolling hills. There seem to be barely any trees anymore, only shrubs and tall bushes dotting the landscape.  In the distance, you see a mighty river flowing.")
  lactionfix()
  time.sleep(4)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "gather":
      timeshift(1, 0)
      print("You spend an hour gathering plants.")
      time.sleep(2)
      print("...")
      time.sleep(2)
      gatherluck = random.randint(1, 11)
      if 1 <= gatherluck <= 5:
        print("In the hour that you searched, you could not find any resources of high quality.")
      elif 6 <= gatherluck <= 11:
        print("You find some nice fallen branches that are strong and thick. You break them apart cleanly.")
        inventory.append("oak branches")
      time.sleep(2.5)
      verdanthills1()
    elif laction == "loadout":
      loadout()
    elif laction == "fish":
      fish()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "west":
      hunger = hunger - 1
      print("You keep walking through the grasslands.")
      time.sleep(1)
      timeshift(1, 0)
      verdanthills3()
    elif laction == "north":
      hunger = hunger - 1
      print("You keep walking through the grasslands.")
      time.sleep(1)
      print("After about 15 minutes, you slide down a very steep hill, and keep walking.")
      timeshift(1, 0)
      time.sleep(1)
      verdanthills5()
    elif laction == "east":
      hunger = hunger - 1
      print("You keep walking through the grasslands, towards grass that's blue.")
      time.sleep(1)
      timeshift(1, 0)
      time.sleep(1)
      SOentry()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      verdanthills4()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      verdanthills4()
  else:
    verdanthills4()

#verdant hills
def verdanthills5():
  global location, hours, timeofday, minutes, hunger
  locationchange("verdanthills5")
  mealcheck()
  dt(0.02,"Verdant minty-colored grass covers the rolling hills. Tree and shrubs periodically dot the landscape.  In the far distance, you see a river.")
  lactionfix()
  time.sleep(4)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "gather":
      timeshift(1, 0)
      print("You spend an hour gathering plants.")
      time.sleep(2)
      print("...")
      time.sleep(2)
      gatherluck = random.randint(1, 15)
      if 1 <= gatherluck <= 3:
        print("In the hour that you searched, you could not find any resources of high quality.")
      elif 4 <= gatherluck <= 10:
        print("You find some nice fallen branches that are strong and thick. You break them apart cleanly.")
        inventory.append("oak branches")
      elif 11 <= gatherluck <= 15:
        print("You find some blossoming vines.")
        inventory.append("blossom vines")
      time.sleep(2.5)
      verdanthills5()
    elif laction == "loadout":
      loadout()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "fish":
      fish()
    elif laction == "west":
      hunger = hunger - 1
      print("You take a stroll through the grasslands, to the west.")
      time.sleep(1)
      print("The grass seems to tint towards green over the hour you walk.")
      timeshift(1, 0)
      time.sleep(1)
      verdanthills1()
    elif laction == "south":
      hunger = hunger - 1
      print("You turn to the south, and start to walk.")
      time.sleep(1)
      print("After an hour or so, an extremely steep hill looms in front of you.  You start to climb.")
      timeshift(1, 30)
      time.sleep(1)
      verdanthills4()
    elif laction == "east":
      hunger = hunger - 1
      print("You keep walking through the grasslands, towards grass that's pale blue.")
      time.sleep(1)
      timeshift(1, 0)
      time.sleep(1)
      skygrassprairie1()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      verdanthills5()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      verdanthills5()
  else:
    verdanthills5()

#skygrass prairie
def skygrassprairie1():
  global location, hours, timeofday, minutes, hunger
  locationchange("skygrassprairie1")
  mealcheck()
  dt(0.02,"Gazing around, you take in a beautiful view.  Light blue grass covers the plains, intermingled with an astounding amount of plant biodiversity, from flowers of yellow to purple.  Tall oaken trees dot the landscape, giving cover to small creatures who want a break from the sun.")
  lactionfix()
  time.sleep(4)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "gather":
      timeshift(1, 0)
      print("You spend an hour gathering grass.")
      time.sleep(2)
      print("...")
      gamount = random.randint(1, 3)
      while gamount > 0:
        print("You found a skygrass cluster!")
        inventory.append("skygrass cluster")
        time.sleep(0.5)
        gamount = gamount - 1
      print("")
      time.sleep(2)
      skygrassprairie1()
    elif laction == "loadout":
      loadout()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "west":
      hunger = hunger - 1
      print("You take a stroll through the prairie, to the west.")
      time.sleep(1)
      print("The grass seems to tint towards green over the hour you walk.")
      timeshift(1, 0)
      time.sleep(1)
      verdanthills5()
    elif laction == "south":
      hunger = hunger - 1
      print("You turn to the south, and start to walk.  The sky becomes dreary around you, and a light mist sets in.")
      time.sleep(1)
      timeshift(1, 0)
      time.sleep(1)
      SOentry()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      skygrassprairie1()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      skygrassprairie1()
  else:
    skygrassprairie1()

def weatherchange(newweather):
  global weather, atkbonus
  if weather == "fog":
    atkbonus += 1
  if newweather == "fog":
    atkbonus -= 1
  if newweather == "rain":
    if random.randint(1,6) == 6:
      newweather = "storm"
  weather = newweather
  
def locationchange(newloc):
  global location, weather, hp
  if weather == "sandstorm":
    print("You are buffeted by the sandstorm.\n")
    hp -= random.randint(1,2)
    if hp <= 0:
      hp = 1
      time.sleep(0.5)
  ssw = ["sun", "sun", "sun", "clear", "clear", "sandstorm", "rain"]
  dfw = ["clear", "clear", "clear", "clear", "fog"]
  vhw = ["sun", "clear", "clear", "clear", "clear", "rain", "wind"]
  smw = ["sun", "clear"]
  osw = ["fog", "fog", "clear", "clear", "clear", "rain"]
  spw = ["sun", "clear", "clear", "clear", "clear", "rain", "wind"]
  csw = ["clear", "clear", "clear", "clear", "rain", "wind"]
  weatherlist = [dfw,ssw,vhw,smw,osw,spw,csw]
  if location != "cloudedspires1":
    csw.append("snow")
  if ((location != "cloudedspires1") and (location != "cloudedspires2") and (location != "cloudedspires3")):
    csw.append("snow")
    if "clear" in csw:
      csw.remove("clear")
  areas = ["darksporeforest", "savagesteppe", "verdanthill", "sunsetmesa", "oakensanctuary", "skygrassprairie", "cloudedspire"]
  areasongs = ["Darkspore Forests.mp3", "Savage Steppes.mp3", "Verdant Hills.mp3", "Sunset Mesa.mp3", "Oaken Sanctuary.mp3", "Skygrass Prairie.mp3", "Clouded Spires.mp3"]
  wshift = random.randint(1,50)
  for x in range(len(areas)):
    if areas[x-1] in newloc:
      if areas[x-1] not in location:
        try:
          playaudio(areasongs[x-1])
        except:
          pass
        wshift += 39
  if wshift >= 40:
    for x in range(len(areas)):
      if areas[x-1] in newloc:
        weatherchange(weatherlist[x-1][random.randint(1,len(weatherlist[x-1])-1)])
  location = newloc
  if location in cities:
    weatherchange("clear")
  weathercheck()

def darksporeforest1():
  global location, hours, timeofday, hunger, enemies
  locationchange("darksporeforest1")
  mealcheck()
  dt(0.02,"You gaze around as you see a dark forest of pine stretch out in all directions.  Light barely filters in through the canopy, and as you look around closer, you see clusters of dimly bioluminescent mushrooms sprouting out of cracks and crevices in the ground and in rocks.  Dark grey shelf mushrooms grow off of the most ancient looking trees.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "east":
      timeshift(1, 0)
      print("You head east.")
      time.sleep(1)
      print("The trees start to thin, then slowly lighten and form into clumps as you walk onwards.")
      time.sleep(2)
      verdanthills2()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "bush":
      print("You notice a bush around hundred feet away that seems to have some delicious yellow berries on it.  Would you like to go closer?")
      bushdsfyes = input("> ").lower()
      if bushdsfyes == "yes" or bushdsfyes == "y":
        print("You approach the bush.")
        time.sleep(1)
        global invis
        if ((1 <= hours <= 3) and (invis == 0)):
          print("As you get closer to the bush, an orc drops from a nearby tree and pulls out a vicious battleaxe.")
          time.sleep(1)
          enemies.append("orc")
          combat()
          time.sleep(1)
          if loot == "no":
            Falezrinentry()
          else:
            print("You walk up to the bush, and see that the yellow berries are really just mushrooms.  As you ponder how mushrooms grow out of a bush, you walk back to where you were.")
            time.sleep(1)
            print("[ENTER] to continue.")
            wait = input()
            darksporeforest1()
        else:
          print("You walk up to the bush, and see that the yellow berries are really just mushrooms.  As you ponder how mushrooms grow out of a bush, you walk back to where you were.")
          time.sleep(1)
          print("[ENTER] to continue.")
          wait = input()
          darksporeforest1()
    elif laction == "south":
      hunger = hunger - 1
      print("You start the long walk back to Falezrin.")
      timeshift(1, 0)
      time.sleep(1)
      Falezrinentry()
    elif laction == "north":
      hunger = hunger - 1
      print("You walk deeper and deeper into the woods.")
      timeshift(1, 0)
      time.sleep(1)
      darksporeforest2()
    elif laction == "west":
      hunger = hunger - 1
      print("You walk towards slightly lighter trees.")
      timeshift(1, 0)
      time.sleep(1)
      print("As you walk out of the forest, a wave of heat blows past you.  You continue walking as the dark forest behind you fades into a desertified grassland.")
      savagesteppe4()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      darksporeforest1()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      darksporeforest1()
  else:
    darksporeforest1()

def darksporeforest2():
  global location, hours, timeofday, hunger, enemies
  locationchange("darksporeforest2")
  mealcheck()
  dt(0.02,"You gaze around as you see a dark forest of evergreens and wide-canopied trees stretch in all directions. Not a ray of light shines in from above, but the only light around you is emitted from the glowing pale yellow mushrooms, shining in dim and fuzzy patches around them.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "north":
      timeshift(1, 0)
      print("You head north.")
      time.sleep(1)
      print("The mushrooms seem progressively larger as you venture deeper, some up to 15 or 20 feet tall.  Glowing lichen coats the trees periodically.")
      time.sleep(2)
      darksporeforest3()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "south":
      hunger = hunger - 1
      print("You walk back through the dark woods, eerie pale yellow mushrooms lighting your path.")
      timeshift(1, 0)
      time.sleep(1)
      darksporeforest1()
    elif laction == "west":
      hunger = hunger - 1
      print("You walk into a hilly area of the forest.  Crickets chirp quietely somewhere nearby, and you hear distant roars.")
      timeshift(1, 0)
      time.sleep(1)
      print("As you walk through the forest, the air warms slightly.  You see a tiny shaft of light pierce the canopy - the first sunlight you've seen for what feels like hours.")
      darksporeforest5()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      locationreturn()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      locationreturn()
  else:
    locationreturn()

def darksporeforest3():
  global location, hours, timeofday, hunger, enemies
  locationchange("darksporeforest3")
  mealcheck()
  dt(0.02,"You gaze around as you see a dark forest of evergreens and dense willows stretch in all directions. The light is solely sourced from glowing lichen on the trees and large glowing mushrooms nearby.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "gather":
      print("You grab some of the glowing lichen off the trees.")
      time.sleep(1)
      print("")
      inventory.append("glow lichen")
      if random.randint(1, 5) == 5:
        print("You also find some strange metallic powder on the ground.")
        inventory.append("zinc powder")
        if random.randint(1, 2) == 2:
          inventory.append("zinc powder")
      locationreturn()
    elif laction == "north":
      timeshift(1, 0)
      print("You head north.")
      time.sleep(1)
      print("The mushrooms grow even larger as you wander, and the crickets slowly come to a halt.  You start to hear extremely faint chanting to the west...")
      time.sleep(2)
      darksporeforest4()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "south":
      hunger = hunger - 1
      print("You walk back through the woods, eerie pale yellow mushrooms lighting your path, the lichen becoming less and less common as you walk.")
      timeshift(1, 0)
      time.sleep(1)
      darksporeforest2()
    elif laction == "west":
      hunger = hunger - 1
      print("You walk into a darker area of the forest.")
      timeshift(1, 0)
      time.sleep(1)
      print("As you trek through the forest, the air cools slightly.  You see a strange banner about half an hour into your hike - perhaps some ancient mark of territory.")
      darksporeforest6()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      locationreturn()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      locationreturn()
  else:
    locationreturn()

def darksporeforest4():
  global location, hours, timeofday, hunger, enemies
  locationchange("darksporeforest4")
  mealcheck()
  dt(0.02,"Faint chanting is audible far off to the west.  You stand in a clearing of sorts, surrounded by dark brown trees that stretch up maybe a hundred feet before blotting out the sky.  Giant mushrooms grow between them, emitting subtle light.")
  lactionfix()
  time.sleep(2)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "south":
      hunger = hunger - 1
      print("You walk back through the woods, eerie pale yellow mushrooms lighting your path, glowing lichen becoming more common as you walk.")
      timeshift(1, 0)
      time.sleep(1)
      darksporeforest3()
    elif laction == "west":
      hunger = hunger - 1
      print("You walk into a darker area of the forest.")
      timeshift(1, 0)
      time.sleep(1)
      print("As you trek through the forest, the air cools slightly.  You see a few strange banners about ten minutes into your hike - perhaps some mark of territory. You shudder.")
      darksporeforest7()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      locationreturn()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      locationreturn()
  else:
    locationreturn()

def darksporeforest5():
  global location, hours, timeofday, hunger, enemies
  locationchange("darksporeforest5")
  mealcheck()
  dt(0.02,"You stand in a lighter area of the dark forest, mushrooms not your only source of light here.  It is warm, and crickets chirp softly nearby.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "north":
      timeshift(1, 0)
      print("You head north.")
      time.sleep(1)
      print("The mushrooms grow even larger as you wander, and the crickets slowly come to a halt.  You start to hear extremely faint chanting to the north...")
      time.sleep(2)
      darksporeforest6()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "south":
      hunger = hunger - 1
      print("You walk out of the woods, the terrain shifts from forest to desertified grassland.")
      timeshift(1, 0)
      time.sleep(1)
      savagesteppe4()
    elif laction == "east":
      hunger = hunger - 1
      print("You walk into a darker area of the forest.")
      timeshift(1, 0)
      time.sleep(1)
      print("As you trek through the forest, the air cools slightly.  Light from the mushrooms increases a bit.")
      darksporeforest2()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      locationreturn()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      locationreturn()
  else:
    locationreturn()

def darksporeforest6():
  global location, hours, timeofday, hunger, enemies
  locationchange("darksporeforest6")
  mealcheck()
  dt(0.02,"The forest ranges from dim to dark around you.  The canopy covers the sky, and your main light source are the glowing mushrooms nearby.  A bit away, you see a mound of stones and pebbles - you can't determine when it was made.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "north":
      timeshift(1, 0)
      print("You head north.")
      time.sleep(1)
      print("You walk further and further, the chanting getting louder and louder")
      time.sleep(2)
      darksporeforest7()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "south":
      hunger = hunger - 1
      print("You walk out of the woods, the terrain shifts from forest to desertified grassland.")
      timeshift(1, 0)
      time.sleep(1)
      savagesteppe4()
    elif laction == "east":
      hunger = hunger - 1
      print("You walk into a darker area of the forest.")
      timeshift(1, 0)
      time.sleep(1)
      print("As you trek through the forest, the air warms slightly.  Light from the mushrooms helps illuminate the path a bit.")
      darksporeforest3()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      locationreturn()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      locationreturn()
  else:
    locationreturn()

def darksporeforest7():
  global location, hours, timeofday, hunger, enemies
  locationchange("darksporeforest7")
  mealcheck()
  dt(0.02,"As you peer around the corner, you see the outskirts of an orc encampment. They haven't noticed you yet.  You stay low for now so you aren't spotted.")
  lactionfix()
  time.sleep(2)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "south":
      hunger = hunger - 1
      print("You walk back through the woods, eerie pale yellow mushrooms lighting your path.  A banner marks your way as you return.")
      timeshift(1, 0)
      time.sleep(1)
      darksporeforest6()
    elif laction == "north":
      hunger = hunger - 1
      print("You trek towards lighter forests.")
      timeshift(1, 0)
      time.sleep(1)
      print("Light starts filtering through the treetops, and a light mist envelops the forest.  Towering oak trees stretch high above, and the air is warm.")
      oakensanctuary13()
    elif laction == "east":
      hunger = hunger - 1
      print("You walk into a darker area of the forest.")
      timeshift(1, 0)
      time.sleep(1)
      print("As you trek through the forest, the air warms slightly.  You see a few strange banners about ten minutes into your hike - perhaps they're the orcs' mark of territory.")
      darksporeforest6()
    elif laction == "raid":
      orccamp()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      locationreturn()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      locationreturn()
  else:
    locationreturn()

def oakensanctuary13():
  global location, hours, timeofday, hunger, enemies, os1, invis
  locationchange("oakensanctuary13")
  mealcheck()
  dt(0.02,"You look around.  A faint fog banks the forest in the warm air.  Towering oak trees touch the fluffy clouds high above, and you can hear wolves howling in the distance.")
  lactionfix()
  time.sleep(2)
  if ((random.randint(1, 2) == 2) and (os1 == 0) and (invis == 0)):
    os1 = 1
    enemies.append("goblin")
    enemies.append("goblin striker")
    enemies.append("goblin sniper")
    print("All of a sudden, two goblins jump out from behind a bush, one heavily armored.  A longbow pokes out of a nearby tree, an arrow drawn.")
    time.sleep(2)
    print("")
    combat()
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "south":
      hunger = hunger - 1
      print("You walk into the dark woods, eerie pale yellow mushrooms lighting your path.")
      timeshift(1, 0)
      time.sleep(1)
      darksporeforest7()
    elif laction == "snipe":
      if os1 == 0:
        sniping()
      else:
        print("There are no enemies around!")
        time.sleep(2)
        locationreturn()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      locationreturn()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      locationreturn()
  else:
    locationreturn()

def orccamp():
  global enemies, loot, orcl, inventory, gc
  print("")
  print("You leap over the bush will a loud yell.  The orcs nearby sitting around a campfire turn and look.  They aren't pleased.")
  time.sleep(2.5)
  enemies.append('orc')
  enemies.append('orc')
  combat()
  if loot == "yes":
    orcnum = random.randint(2, 4)
    while ((orcnum > 0) and (loot == "yes")):
      orcnum -= 1
      orcobs = random.randint(1, 5)
      if orcobs == 1:
        print("You walk through the village peacefully.")
        vildesc = random.randint(1, 3)
        time.sleep(1)
        if vildesc == 1:
          print("The houses around you are made of clay bricks and reeds, lit up by mushroom lanterns.")
        elif vildesc == 2:
          print("You pass a large building, what looks like a forge of sorts.")
        else:
          print("You stroll past a recreational area, filled with bright campfires and obtuse wooden tables.")
        time.sleep(3)
        print("")
      elif orcobs == 2:
        print("You spot a group of orcs sitting at a table, eating food.  They spot you and whip out their battleaxes.")
        time.sleep(2)
        print("")
        enemies.append('orc')
        enemies.append('orc')
        enemies.append('orc')
        combat()
      elif orcobs == 3:
        print("You see an orc and an outlaw discussing trade in harsh tones.  The outlaw turns and spots you and smirks, then whispers something.  The orc charges.")
        time.sleep(2.5)
        enemies.append('orc')
        enemies.append('outlaw')
        combat()
      else:
        print("You see an orc bowing next to a shaman. Both look up, and you realize they are ready for battle.")
        time.sleep(2)
        enemies.append('orc')
        enemies.append('orcish shaman')
        combat()
    if loot == "yes":
      print("After many detours, you reach the heart of the orc city. Before you stand two shamans and an orc, who have obviously been preparing for your arrival. The orc warrior, supercharged with magic, bellows and charges.")
      enterwait()
      print("")
      enemies.append("orcish shaman")
      enemies.append("orcish shaman")
      enemies.append("orc")
      orcl = 1
      combat()
      orcl = 0
      if loot == "yes":
        print("You have successfully raided the orc city!")
        gcearned = random.randint(5, 7)
        gc += gcearned
        print("You gained " + gold + gcearned + "gc!" + white)
        if random.randint(1, 2) == 2:
          inventory.append('fungal spores')
        time.sleep(2)
        print("")
    locationreturn()

def savagesteppe1():
  global location, hour, hunger, timeofday
  locationchange("savagesteppe1")
  mealcheck()
  dt(0.02,"You gaze around as you see a landscape of slowly sifting dunes made of golden-brown sand dotted with stony cliffs and earth-splitting crevices that drop down 50 feet. Small streams cut across the desert here and there, and verdant, green, tall grass grows in a 10 foot spread along the edge of these rivers.  The sun beats down overhead, almost unbearingly hot.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "east":
      hunger = hunger - 1
      print("You start the long walk back to Falezrin.")
      timeshift(1, 0)
      time.sleep(1)
      Falezrinentry()
    elif laction == "west":
      hunger = hunger - 1
      print("You keep hiking through the steppes.")
      time.sleep(1)
      print("The heat is sweltering.")
      time.sleep(2)
      timeshift(1, 0)
      savagesteppe2()
    elif laction == "north":
      hunger = hunger - 1
      print("You head to the north.")
      time.sleep(1)
      print("The air cools a little.  Grass becomes more prominent, and small cliffs of red sandstone cleave the landscape.")
      time.sleep(2)
      timeshift(1, 0)
      time.sleep(1)
      savagesteppe4()
    elif laction == "south":
      print("Steep cliffs lie to the south.  Would you like to climb down them?  You estimate height at around 60 feet.")
      clmyes = input("> ").lower()
      if clmyes == "yes" or clmyes == "y":
        timeshift(1, 0)
        time.sleep(1)
        cliffscale("down", 60, "savagesteppe3")
      else:
        savagesteppe1()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      savagesteppe1()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      savagesteppe1()
  else:
    savagesteppe1()

def Falezrin():
  global inve, invi, invu, hunger, hours, minutes, timeofday, soq, citiesbeento
  if "Falezrin" not in citiesbeento:
    citiesbeento.append("Falezrin")
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inn":
      print("You walk into an inn.")
      Falinn()
    elif laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "taxi":
      taxi()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "coins":
      coins()
    elif laction == "storage":
      storage()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "rogue vendor":
      rgvendor()
    elif laction == "converse":
      print("There are three people here who you can talk to.  Who would you like to speak with? (A/B/C)")
      print("Or say 'Arrowfall' to partake in the crossover event!")
      persch = input("> ").lower()
      if persch == "a":
        dt(0.02, "Hey. Hope you're doing well.")
        time.sleep(1)
        Falezrin()
      elif persch == "b":
        if soq == 0:
          dt(0.02, "Hello! Would you be alright delivering a letter for me?")
          time.sleep(1)
          letdel = input("> ").lower()
          if letdel == "yes":
            soq == "1"
            dt(0.02,       "Great! Please bring it to Matthew in the Shrouded Outpost.")
            time.sleep(2)
            quests.append("A Letter To Matthew")
            inventory.append("mysterious letter")
            Falezrin()
          else:
            dt(0.02, "I'll be here if you change your mind, I guess.")
            time.sleep(2)
            Falezrin()
        else:
          print("Hope you're on your way to deliver that letter!")
        Falezrin()
      elif persch == "c":
        dt(0.02, "How are you today?")
        inputd = input("> ")
        dt(0.02, "Yeah that's nice, but? I didn't ask...")
        time.sleep(2)
        Falezrin()
      elif persch == "arrowfall":
        dt(0.02,  '"Hey, we\'ve heard rumors of a strange rift in the sky above a clearing near Falezrin, and a strange tower that popped up out of nowhere... would you be up for going and checking it out?"')
        ch = input('').lower()
        if ((ch == "yes") or (ch == "y")):
          darklingoutpost()
        else:
          locationreturn()
      else:
        Falezrin()
    elif laction == "north":
      hunger = hunger - 1
      timeshift(1, 0)
      print("You walk out of the rear gate of the village.")
      time.sleep(2)
      print("After around an hour, the flat grasslands become pine forests.")
      time.sleep(2)
      print("You start to walk deeper and deeper into the forest.")
      time.sleep(2.5)
      darksporeforest1()
    elif laction == "west":
      timeshift(1, 0)
      print("You walk out of the left gate of the village.")
      time.sleep(2)
      print("After around an hour, the flat grasslands become barren ground spotted with creeks and cliffs.")
      time.sleep(2)
      print("Walking further, the ground slowly transitions to sand.")
      time.sleep(2.5)
      savagesteppe1()
    elif laction == "south":
      print("The cliffs beyond the village to the south are far too steep to climb.")
      Falezrin()
    elif laction == "east":
      timeshift(0, 30)
      print("You walk out of the right gate of the village.")
      time.sleep(2)
      print("After around a half an hour, the flat grasslands become rolling hills.")
      time.sleep(2)
      print("You start to walk up a particularly large hill. Reaching the top, you look around and gasp.")
      time.sleep(2.5)
      verdanthills1()
    elif laction == "south":
      print("You can't go backwards, the cliffs are too steep.")
      time.sleep(1)
      Falezrin()
    elif laction == "merchants":
      falmerch()
    elif laction == "exchange":
      exchange()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      print("")
      print("Also, check out the discord for help! https://discord.gg/eR5aGGW8fK")
      wait = input()
      Falezrin()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      Falezrin()
  else:
    Falezrin()

def inwater():
    global inventory, hp
    #if boat is not in inventory
    if "boat" not in inventory:
        flvtext = random.randint(1, 3)
        if flvtext == 1:
            print("You lose a bit of health as you struggle to stay afloat.")
        elif flvtext == 2:
            print("You start to feel the water pulling you under. You lose a bit of health.")
        elif flvtext == 3:
            print("Desperately trudging through the waters weakens your body. You lose a bit of health.")
        hp = hp - 1
        if hp >= 0:
            print("You fall unconscious and wake up on the shore.")
            time.sleep(1)
            if location == "northernsea1" or location == "northernsea2" or location == "northernsea3":
                shorespot = random.randint(1, 2)
                timeshift(4, 0)
                if shorespot == 1:
                    twilighttundra1()
                elif shorespot == 2:
                    twilighttundra2()
            elif location == "southeastsea1" or location == "southeastsea2" or location == "southeastsea3":
                shorespot = random.randint(1, 3)
                timeshift(4, 0)
                if shorespot == 1:
                    bogofmangroves10()
                elif shorespot == 2:
                    sandyshores2()
                elif shorespot == 3:
                    sandyshores3()
            elif location == "southeastsea4" or location == "southeastsea5":
                timeshift(4, 0)
                sandyshores4()
            elif location == "southeastsea6":
                timeshift(4, 0)
                sandyshores6()
            elif location == "southeastsea7" or location == "southeastsea9" or location == "southeastsea13":
                timeshift(4, 0)
                IsleRho()
            elif location == "southeastsea8":
                timeshift(4, 0)
                shorespot = random.randint(1, 2)
                if shorespot == 1:
                    sandyshores6()
                elif shorespot == 2:
                    sandyshores8()
            elif location == "southeastsea10":
                timeshift(4, 0)
                shorespot = random.randint(1, 2)
                if shorespot == 1:
                    sandyshores8()
                elif shorespot == 2:
                    sandyshores9()
            elif location == "southeastsea11" or location == "southeastsea17" or location == "southeastsea12" or location == "southeastsea15" or location == "southeastsea18" or location == "southeastsea19":
                timeshift(4, 0)
                IsleTheta1()
            elif location == "southeastsea14":
                timeshift(4, 0)
                shorespot = random.randint(1, 2)
                if shorespot == 1:
                    IsleTheta1()
                elif shorespot == 2:
                    RiversideDrown()
            elif location == "southeastsea16":
                timeshift(4, 0)
                RiversideDrown()

def cliffscale(direction, height, nlocation):
  global hp, location, cspdb, inventory
  ogheight = height
  heightclimbed = 0
  motivation = 0
  if direction == "up":
    while height > 0:
      climbevent = random.randint(1, 10)
      if 1 <= climbevent <= 5:
        climbspeed = random.randint(5, 10) + cspdb
        height = height - climbspeed
        heightclimbed = heightclimbed + climbspeed
        print("You climbed " + str(direction) + " " + str(climbspeed) +    " feet!")
        time.sleep(2)
      elif 6 <= climbevent <= 7:
        print("Your foot starts to slip.")
        time.sleep(1)
        if random.randint(1, 2) == 2:
          print("You quickly catch yourself.")
          time.sleep(1)
        else:
          print("You start to fall!")
          time.sleep(1)
          if (random.randint(1, 11) - cspdb) < 10:
            fallheight = random.randint(5, 30) - cspdb
            if height + fallheight > ogheight:
              fallheight = height - ogheight
            height = height + fallheight
            heightclimbed = heightclimbed - fallheight
            print("You fell " + str(fallheight) +  " feet before catching yourself!")
            falldmgr = math.floor(fallheight / 10)
            falldmg = 0
            while falldmgr > 0:
              falldmg = falldmg + random.randint(1, 6)
              falldmgr = falldmgr - 1
            hp = hp - falldmgr
            if hp > 0:
              print("You took " + str(falldmg) + white + " damage!")
            else:
              print("You fell to your doom.")
              hp = 1
              time.sleep(1)
              print("Returning you to the nearest village...")
              time.sleep(2)
              Falezrinentry()
          else:
            print("You fell all the way down!")
            fallheight = height
            height = 0
            falldmgr = math.floor(fallheight / 10)
            falldmg = 0
            while falldmgr > 0:
              falldmg = falldmg + random.randint(1, 6)
              falldmgr = falldmgr - 1
            hp = hp - falldmgr
            if hp > 0:
              print("You took " + str(falldmg) + white + " damage!")
            else:
              print("You fell to your doom.")
              hp = 1
              time.sleep(1)
              print("Returning you to the nearest village...")
              time.sleep(2)
              Falezrinentry()
        time.sleep(2)
      elif 8 <= climbevent <= 9:
        print("The going gets tough, so you pause to take a small break.")
        time.sleep(2)
        if random.randint(1, 15) == 15:
          gemchance = random.randint(1, 10)
          if ((gemchance >= 5) and ((nlocation == "savagesteppe3") or
                                    (nlocation == "savagesteppe6"))):
            if "keystone skypick" in inventory:
              print("You see a mysterious cave, blocked off by boulders.  Your keystone skypick in your bag shines brightly while facing it.")
              time.sleep(2)
              print("Would you like to try and enter the cave with your glowing keystone?")
              entyes = input("> ").lower()
              if ((entyes == "y") or (entyes == "yes")):
                dt(0.04, "You walk up to the cave.")
                time.sleep(2)
                dt(0.04,          "As you hold your glowing pick in your hand, the rocks covering the entrance rumble and then fall away.")
                time.sleep(2)
                dt(0.04,          "You start venturing into a long tunnel, a thin beam of light still shines in behind you.")
                time.sleep(2)
                dt(0.02,          "As you walk into a larger cavern, you realize someone has been waiting for you.  An elven assassin in a cloak stads in the center of the room, facing awy from you, swirling with dark energy.")
                time.sleep(4)
                shadowboss()
              else:
                print("You decide to ignore it and continue your climb.")
          if gemchance < 5:
            print("During your break, you spot a small gleaming stone embedded in the stone above you.  You break it off, and recognize it as pyrite.")
            inventory.append("pyrite")
          if gemchance == 5:
            print("During your break, you spot a large gleaming stone embedded in the stone above you.  You struggle to pull it out.  Once you break it off, you recognize it as pyrite.")
            inventory.append("pyrite")
            inventory.append("pyrite")
          if 6 <= gemchance <= 8:
            print("During your break, you spot a small gleaming stone embedded in the stone above you.  You break it off, and recognize it as amethyst.")
            inventory.append("amethyst")
          if gemchance == 9:
            print("During your break, you spot a small gleaming stone embedded in the stone above you.  You break it off, and recognize it as amber.")
            inventory.append("amber")
          if gemchance == 10:
            print("During your break, you spot a small gleaming stone embedded in the stone above you.  You break it off, and recognize it as amber.")
            inventory.append("topaz")
          time.sleep(2)
      else:
        print("You gaze upwards.  It's a ways to go, and motivation drives you to keep going.")
        time.sleep(2)
        motivation = motivation + 1
        cspdb = cspdb + 1
      print("You have climbed " + str(heightclimbed) + " feet total.")
      time.sleep(2)
      print("")
    print("You have finished your climb!")
    time.sleep(2)
    cspdb = cspdb - motivation
    locationchange(nlocation)
    locationreturn()
  if direction == "down":
    while height > 0:
      climbevent = random.randint(1, 10)
      if 1 <= climbevent <= 5:
        climbspeed = random.randint(5, 10) + cspdb
        height = height - climbspeed
        heightclimbed = heightclimbed + climbspeed
        print("You climbed " + str(direction) + " " + str(climbspeed) +              " feet!")
        time.sleep(2)
      elif 6 <= climbevent <= 7:
        print("Your foot starts to slip.")
        time.sleep(1)
        if random.randint(1, 2) == 2:
          print("You quickly catch yourself.")
          time.sleep(2)
        else:
          print("You start to fall!")
          time.sleep(2)
          if (random.randint(1, 11) - cspdb) < 10:
            fallheight = random.randint(5, 30) - cspdb
            if fallheight > height:
              fallheight = height
            height = height - fallheight
            heightclimbed = heightclimbed + fallheight
            print("You fell " + str(fallheight) +                  " feet before catching yourself!")
            falldmgr = math.floor(fallheight / 10)
            falldmg = 0
            while falldmgr > 0:
              falldmg = falldmg + random.randint(1, 6)
              falldmgr = falldmgr - 1
            hp = hp - falldmgr
            if hp > 0:
              print("You took " + str(falldmg) + white + " damage!")
            else:
              print("You fell to your doom.")
              hp = 1
              time.sleep(1)
              print("Returning you to the nearest village...")
              time.sleep(2)
              Falezrinentry()
          else:
            print("You fell all the way down!")
            fallheight = height
            height = 0
            falldmgr = math.floor(fallheight / 10)
            falldmg = 0
            while falldmgr > 0:
              falldmg = falldmg + random.randint(1, 6)
              falldmgr = falldmgr - 1
            hp = hp - falldmgr
            if hp > 0:
              print("You took " + str(falldmg) + white + " damage!")
            else:
              print("You fell to your doom.")
              hp = 1
              time.sleep(1)
              print("Returning you to the nearest village...")
              time.sleep(2)
              Falezrinentry()
        time.sleep(2)
      elif 8 <= climbevent <= 10:
        print("The going gets tough, so you pause to take a small break.")
        time.sleep(2)
        if random.randint(1, 15) == 15:
          gemchance = random.randint(1, 10)
          if ((gemchance >= 5) and ((nlocation == "savagesteppe3") or
                                    (nlocation == "savagesteppe6"))):
            if "keystone skypick" in inventory:
              print("You see a mysterious cave, blocked off by boulders.  Your keystone skypick in your bag shines brightly while facing it.")
              time.sleep(2)
              print("Would you like to try and enter the cave with your glowing keystone?")
              entyes = input("> ").lower()
              if ((entyes == "y") or (entyes == "yes")):
                dt(0.04, "You walk up to the cave.")
                time.sleep(2)
                dt(0.04,          "As you hold your glowing pick in your hand, the rocks covering the entrance rumble and then fall away.")
                time.sleep(2)
                dt(0.04,          "You start venturing into a long tunnel, a thin beam of light still shines in behind you.")
                time.sleep(2)
                dt(0.02,          "As you walk into a larger cavern, you realize someone has been waiting for you.  An elven assassin in a cloak stads in the center of the room, facing awy from you, swirling with dark energy.")
                time.sleep(4)
                shadowboss()
              else:
                print("You decide to ignore it and continue your climb.")
          if gemchance < 5:
            print("During your break, you spot a small gleaming stone embedded in the stone above you.  You break it off, and recognize it as pyrite.")
            inventory.append("pyrite")
          if gemchance == 5:
            print("During your break, you spot a large gleaming stone embedded in the stone above you.  You struggle to pull it out.  Once you break it off, and recognize it as topaz.")
            inventory.append("pyrite")
            inventory.append("pyrite")
          if 6 <= gemchance <= 8:
            print("During your break, you spot a small gleaming stone embedded in the stone above you.  You break it off, and recognize it as amethyst.")
            inventory.append("amethyst")
          if gemchance == 9:
            print("During your break, you spot a small gleaming stone embedded in the stone above you.  You break it off, and recognize it as amber.")
            inventory.append("amberam")
          if gemchance == 10:
            print("During your break, you spot a small gleaming stone embedded in the stone above you.  You break it off, and recognize it as amber.")
            inventory.append("topaz")
          time.sleep(2)
      print("You have climbed " + str(heightclimbed) + " feet total.")
      time.sleep(2)
      print("")
    print("You have finished your climb!")
    time.sleep(2)
    locationchange(nlocation)
    locationreturn()

def savagesteppe2():
  global d2b, location, hours, timeofday, hunger, loot
  locationchange("savagesteppe2")
  lactionfix()
  mealcheck()
  dt(0.02,"More vast scapes of dunes and cliffs stretch out before you. At the horizon, you can see a large river miles away. Large spruce trees grow out of the fertile soil around the several riverbeds that dot the landscape.")
  time.sleep(1)
  if ((d2b == 0) and (invis == 0)):
    print("All of a sudden, two outlaws drop from a nearby tree, unsheathing ancient iron daggers that seem to have been oxidizing for millenia.")
    time.sleep(1)
    enemies.append("outlaw")
    enemies.append("outlaw")
    combat()
    time.sleep(1)
    if loot == "no":
      Falezrinentry()
    else:
      d2b = 1
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "snipe":
      if d2b == 0:
        sniping()
      else:
        print("There are no enemies around!")
        time.sleep(2)
        locationreturn()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "east":
      hunger = hunger - 1
      print("You start hiking back through the desert.")
      timeshift(1, 0)
      time.sleep(1)
      savagesteppe1()
    elif laction == "south":
      print("Rugged cliffs lie to the south.  Would you like to climb down them?  You estimate height at around 40 feet.")
      clmyes = input("> ").lower()
      if clmyes == "yes" or clmyes == "y":
        timeshift(1, 0)
        time.sleep(1)
        cliffscale("down", 40, "savagesteppe6")
      else:
        savagesteppe2()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory. (hopefully)")
      wait = input()
      savagesteppe2()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      savagesteppe2()
  else:
    savagesteppe2()

def verdanthills2():
  global location, hours, timeofday, minutes, hunger, eqweapon, vdf
  locationchange("verdanthills2")
  mealcheck()
  dt(0.02,"Rolling hills make up the plains, covered in deep green tallgrass, nearly an emerald color.  Patches of lush trees dot the landscape in clumps that occupy large spaces, with vines growing pink flowers running rampant among the trees.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "gather":
      timeshift(1, 0)
      print("You spend an hour gathering plants.")
      time.sleep(2)
      print("...")
      time.sleep(2)
      gatherluck = random.randint(1, 18)
      if 1 <= gatherluck <= 7:
        print("In the hour that you searched, you could not find any resources of high quality.")
      elif 8 <= gatherluck <= 12:
        print("You find some nice fallen branches that are strong and thick. You break them apart cleanly.")
        inventory.append("oak branches")
      elif 13 <= gatherluck <= 14:
        print("You find some very intact and thriving blossoming vines and gather them.")
        inventory.append("blossom vines")
      elif 15 <= gatherluck <= 17:
        print("You find a lot of very intact and thriving blossoming vines and gather them.")
        inventory.append("blossom vines")
        inventory.append("blossom vines")
      else:
        if vdf != 1:
          print("As you're about to turn back, you miraculously spot a flash of verdant green in the shade under a bush.  You dig around under the bush and find a mysterious lightly curved blade, seeming transparent, with a flowering vine-covered hilt and a shining lime green gem embedded in the blade near the root.")
          time.sleep(2.5)
          inventory.append("verdant scimitar")
        else:
          print("You pass the mysterious place where you found the ancient blade.")
      time.sleep(2.5)
      verdanthills2()
    elif laction == "loadout":
      loadout()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "north":
        print("You head north through the hills.")
        timeshift(1, 0)
        time.sleep(1)
        print("The hills become more rugged and the trees more common.")
        time.sleep(2)
        verdanthills7()
    elif laction == "west":
      print("You head west throught the plains, approaching the dark forests now in front of you.")
      timeshift(1, 0)
      print("The clumps of trees on the plains gradually become clumps of plains amongst the trees until it is completely dark.")
      time.sleep(2)
      print("But it's not.  As your eyes adjust, sparse pale yellow translucent mushrooms of varying sizes light up the dark spots of the forest with bioluminescence.")
      time.sleep(2)
      darksporeforest1()
    elif laction == "east":
        print("You head east through the plains.")
        timeshift(1, 0)
        time.sleep(1)
        print("There is a nice river out this way, maybe you could catch something.")
        time.sleep(2)
        verdanthills6()
    elif laction == "south":
      print("You head south through the plains.")
      timeshift(0, 30)
      time.sleep(1)
      print("The clumps of trees become more sparse but no less verdant.")
      time.sleep(2)
      verdanthills1()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      verdanthills2()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      verdanthills2()
  else:
    verdanthills2()

def verdanthills7():
    global location, hours, timeofday, minutes, hunger
    locationchange("verdanthills7")
    mealcheck()
    dt(0.02, "This part of the hills neighbors the darkspore forest.  The trees are tall and thick, with the vines from the other trees seemingly absent here.")
    time.sleep(1)
    lactionfix()
    global laction
    laction = ""
    laction = acs(laction, locationactions)
    if laction in locationactions:
        if laction == "inventory":
            invf()
        elif laction == "hp":
            hpcheck()
        elif laction == "quests":
            print("Your quests: " + str(quests))
            time.sleep(1)
            locationreturn()
        elif laction == "loadout":
            loadout()
        elif laction == "hunger":
            hungercheck()
        elif laction == "time":
            timecheck()
        elif laction == "coins":
            coins()
        elif laction == "exchange":
            exchange()
        elif laction == "save data":
            savedata()
        elif laction == "north":
            print("You head north, towards the edge of the darkspore forest.")
            timeshift(1, 0)
            time.sleep(1)
            darksporeforest12()
        elif laction == "west":
            print("You head west, towards the edge of the darkspore forest.")
            timeshift(1, 0)
            time.sleep(1)
            darksporeforest2()
        elif laction == "south":
            print("You head south, back towards the verdant hills.")
            timeshift(1, 0)
            time.sleep(1)
            verdanthills2()
        elif laction == "east":
            print("You head east, further into the hills.")
            timeshift(1, 0)
            time.sleep(1)
            verdanthills8()
        elif laction == "help":
            print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
            print("")
            print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
            wait = input()
            verdanthills7()
        else:
            print("[not coded yet, sorry]")
    else:
        verdanthills7()

def savagesteppe3():
  global location, hours, timeofday, hunger, loot
  locationchange("savagesteppe3")
  mealcheck()
  dt(0.02,"At the bottom of a large cliff face, you gaze around.  You see vast mountains far to the south, and in othe directions the steppes seem to extend as far as you can see.")
  time.sleep(1)
  lactionfix()
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "east":
      hunger = hunger - 1
      print("You turn to the east and see more deserty plains in the distance.")
      time.sleep(1)
      print("You begin to walk.")
      time.sleep(2)
      timeshift(1, 0)
      savagesteppe5()
    elif laction == "west":
      hunger = hunger - 1
      print("You turn to the west and see more plains and desert in the distance.")
      time.sleep(1)
      print("You start your trek to the west.")
      time.sleep(2)
      timeshift(1, 0)
      savagesteppe6()
    elif laction == "north":
      print("Steep cliffs lie to the north.  Would you like to climb up them?  You estimate height at around 60 feet.")
      clyes = input("> ").lower()
      if clyes == "yes" or clyes == "y":
        timeshift(1, 0)
        cliffscale("up", 60, "savagesteppe1")
      else:
        savagesteppe3()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory. (hopefully)")
      wait = input()
      savagesteppe3()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      savagesteppe3()
  else:
    savagesteppe3()

def savagesteppe4():
  global location, hours, hunger, timeofday
  locationchange("savagesteppe4")
  mealcheck()
  dt(0.02,"Sprawling sandy grasslands spread across your vision.  Red sanstone cliffs divide the area, ad small creeks run though the most verdant areas.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "east":
      hunger = hunger - 1
      print("You turn to the east and see dark forests in the distance.")
      time.sleep(1)
      print("As you walk towards them, the air cools significantly.  After around 40 minutes, you pass through the first dark trees and find a forest alight with lumiscent mushrooms of various sizes.")
      time.sleep(2)
      timeshift(1, 0)
      darksporeforest1()
    elif laction == "north":
      hunger = hunger - 1
      print("You turn to the north and see dark forests in the distance.")
      time.sleep(1)
      print("As you walk towards them, the air cools significantly.  After around 45 minutes, you pass through the first dark trees and find a forest alight with large lumiscent mushrooms of various colors, ranging from yellow to teal.")
      time.sleep(2)
      timeshift(1, 0)
      darksporeforest5()
    elif laction == "south":
      hunger = hunger - 1
      print("You head to the south.")
      time.sleep(1)
      print("Grasses become less prominent as the air gets warmer.  Your feet sift through the grass and sand slowly.")
      time.sleep(2)
      timeshift(1, 0)
      time.sleep(1)
      savagesteppe1()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      savagesteppe4()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      savagesteppe4()
  else:
    savagesteppe4()

def savagesteppe5():
  global enemies, location, hours, hunger, timeofday
  locationchange("savagesteppe5")
  mealcheck()
  dt(0.02,"You stand at the bottom of a massive, impassable cliff.  Maybe someday you'll climb it... For now, you seem to have arrived in one of the more verdant areas of the steppes, a less sandy, more pleasant grassland. An " + yellow + "outlaw" + white + " stands a bit away from you, you might try interacting with them.")
  lactionfix()
  time.sleep(1)
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "snipe":
      sniping()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "east":
      hunger = hunger - 1
      print("You turn to the east and see greener landscapes far off.")
      time.sleep(1)
      print("As you walk towards them, The grass grows greener and greener around you.")
      time.sleep(2)
      timeshift(1, 0)
      time.sleep(1)
      verdanthills3()
    elif laction == "north":
      print("The cliffs to the north are far too steep to climb.")
      time.sleep(2.5)
      savagesteppe5()
    elif laction == "west":
      hunger = hunger - 1
      print("You head to the west.")
      time.sleep(1)
      print("The verdancy of the grass becomes less prominent as the air gets warmer.  Your feet sift through the earth slowly.")
      time.sleep(2)
      timeshift(1, 0)
      time.sleep(1)
      savagesteppe3()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      savagesteppe5()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      savagesteppe5()
  elif laction == "outlaw":
    print("You walk over to the outlaw.")
    time.sleep(1)
    dt(0.02, "\"Hey, what's up?\"")
    print("a) say hello")
    print("b) attack them")
    ochoice = input("> ").lower()
    if ochoice == "b":
      enemies.append('outlaw')
      combat()
      dt(0.02, '"Eurgh... nice fight.  See you around."')
      time.sleep(2)
    else:
      dt(0.02, "\"Hello! Hope you're doing well on this fine day.\"")
      time.sleep(1)
    savagesteppe5()
  else:
    savagesteppe5()

def SOentry():
  global inve, invi, invu, location
  locationchange("ShroudedOutpost")
  print("")
  print("After what seems around an hour, you see a small town in the distance.")
  time.sleep(2)
  print("")
  print("Getting closer, you see a fortified wall around the edge of the town. Made of stone bricks, it has sharpened branches poking out of the wall is is decorated with intricate vine weavings and pink blossoms.")
  time.sleep(2)
  print("")
  print("As you walk up to the guards, one recognizes you as an adventurer.  You are let in.")
  time.sleep(2)
  lactionfix()
  mealcheck()
  ShroudedOutpost()

def ShroudedInn():
  global bardcd, gc, sc, cc, hunger, timeofday, hours, minutes, maxhunger, hp, maxhp, inventory, spells, maxspells
  print("What would you like to do? Say anything else to leave the inn.")
  print("[info, checkin, merchant.]")
  iaction = input("> ").lower()
  if iaction == "info":
    print("The rooms here cost 4 " + gold + "gc" + white + ".  Staying the night at an inn will fully heal you and give you all your spells back, assuming that you're a mage.")
    time.sleep(1)
    print("[ENTER] to continue.")
    wait = input()
    clearscreen()
    Falinn()
  if iaction == "checkin":
    print("'Hello, would you like a room?'")
    roomyes = input("> ").lower()
    if roomyes == "yes" or roomyes == "y":
      if ((hours < 5) or ((hours <= 11) and (timeofday == "am")) or (hours == 12)):
        print("Sorry, we aren't checking in yet.  Come back at 5!")
        time.sleep(1)
        print("")
        Falinn()
      else:
        print("Perfect.  That'll cost you 4 gold coins .")
        time.sleep(1.5)
        if gc >= 4:
          print("Here's a key. There might be breakfast in the morning? I'm never sure around here...")
          time.sleep(2)
          gc = gc - 4
          hunger = hunger + 4
          if hunger > maxhunger:
            hunger = maxhunger
          hours = 7
          minutes = 00
          timeofday = "am"
          spells.clear()
          spells.extend(maxspells)
          hp = maxhp
          print("After a long rest, you get up and head back downstairs.")
          ShroudedInn()
        else:
          print("You don't have enough money!")
          ShroudedInn()
    elif roomyes == "no" or roomyes == "n":
      print("Okay, thats fine.")
      ShroudedInn()
    else:
      print("Come back later!")
      ShroudedInn()
  elif iaction == "merchant":
    dt(0.02, "'Hey. What're you in the market for?'")
    time.sleep(1)
    print("[Iron sword][15 " + gold + "gc" + white + "]")
    print("[Sturdy boots][20 " + gold + "gc" + white + "]")
    print("[Shiv][13 " + gold + "gc" + white + "]")
    print("[Bread][3 " + gold + "gc" + white + "]")
    time.sleep(1)
    fmchoose1 = input("> ").lower()
    if fmchoose1 == "iron sword":
      if gc >= 15:
        print("Here you go, thank you for your purchase.")
        gc = gc - 15
        inventory.append("iron sword")
      else:
        print("You don't have enough money!")
    elif fmchoose1 == "shiv":
      if gc >= 13:
        print("Here you go, thank you for your purchase.")
        gc = gc - 13
        inventory.append("shiv")
      else:
        print("You don't have enough money!")
    elif fmchoose1 == "sturdy boots":
      if gc >= 20:
        print("Here you go, thank you for your purchase.")
        gc = gc - 20
        inventory.append("sturdy boots")
      else:
        print("You don't have enough money!")
    elif fmchoose1 == "bread":
      if gc >= 3:
        print("Here you go, thank you for your purchase.")
        gc = gc - 3
        inventory.append("bread")
      else:
        print("You don't have enough money!")
    else:
      print("That's not an option!")
    print("Thanks for coming!  See you later!")
    print("")
    time.sleep(1)
    ShroudedInn()
  elif ((iaction == "perform") and (sclass == "bard")):
    if bardcd == 0:
      print("You perform for a couple hours until a new group takes the stage.")
      time.sleep(2)
      bardcd = 20
      gcmade = random.randint(0, 3)
      scmade = random.randint(0, 20)
      ccmade = random.randint(1, 150)
      gc = gc + gcmade
      sc = sc + scmade
      cc += ccmade
      if gcmade != 0:
        print("You were tipped " + gcmade + " gold coins!")
      time.sleep(0.2)
      if gcmade != 0:
        print("You were tipped " + scmade + " silver coins!")
      time.sleep(0.2)
      ("You were tipped " + ccmade + " copper coins!")
      time.sleep(2)
      ShroudedInn()
    else:
      print("You've done that too recently!")
      time.sleep(2)
      ShroudedInn()
  else:
    print("You walk out of the inn.")
    time.sleep(1)
    ShroudedOutpost()

def shroudmerch():
  global sc, gc, pc
  dt(0.02,"Greetings! I'm a humble merchant looking to buy some of your goods, what would you like to offer?")
  time.sleep(0.5)
  print("Say 'Exit' when you are done.")
  while True:
    invse = input("> ").lower()
    if (invse in inventory) or (invse == "exit"):
      if invse == "pyrite":
        dt(0.02,  '"I\'m no fool, but I\'ll buy that for 5 sc each.  How many would you like to sell?"')
        selye = input("> ").lower()
        try:
          selye = int(selye)
          if ((selye > 0) and (inventory.count(invse) >= selye)):
            sc = sc + 5 * selye
            massremove(selye, invse)
            dt(0.02, '"Thank you! Anything else today?"')
          else:
            dt(0.02, "Alright then! Anything else?")
        except:
          print("That's not an number!")
      elif invse == "amethyst":
        dt(0.02,  '"Ooh, I\'ll buy that for 1 gc each.  How many would you like to sell?"')
        selye = input("> ").lower()
        try:
          selye = int(selye)
          if ((selye > 0) and (inventory.count(invse) >= selye)):
            gc += selye
            massremove(selye, invse)
            dt(0.02, '"Thank you! Anything else today?"')
          else:
            dt(0.02, "Alright then! Anything else?")
        except:
          print("That's not an number!")
      elif invse == "amber":
        dt(0.02,  '"Ooh, I\'ll buy that for 2 gc each.  How many would you like to sell?"')
        selye = input("> ").lower()
        try:
          selye = int(selye)
          if ((selye > 0) and (inventory.count(invse) >= selye)):
            gc += 2 * selye
            massremove(selye, invse)
            dt(0.02, '"Thank you! Anything else today?"')
          else:
            dt(0.02, "Alright then! Anything else?")
        except:
          print("That's not an number!")
      elif invse == "topaz":
        dt(0.02,  '"Ooh, that\'s a rare one. I\'ll buy that for 5 gc each.  How many would you like to sell?"')
        selye = input("> ").lower()
        try:
          selye = int(selye)
          if ((selye > 0) and (inventory.count(invse) >= selye)):
            gc += 5 * selye
            massremove(selye, invse)
            dt(0.02, '"Thank you! Anything else today?"')
          else:
            dt(0.02, "Alright then! Anything else?")
        except:
          print("That's not an number!")
      elif invse == "iron ore":
        dt(0.02,  '"Ooh, nice quality. I\'ll buy that for 6 gc each.  How many would you like to sell?"')
        selye = input("> ").lower()
        try:
          selye = int(selye)
          if ((selye > 0) and (inventory.count(invse) >= selye)):
            gc += 6 * selye
            massremove(selye, invse)
            dt(0.02, '"Thank you! Anything else today?"')
          else:
            dt(0.02, "Alright then! Anything else?")
        except:
          print("That's not an number!")
      elif invse == "gambler's trinket":
        dt(0.02,  '"Ooh, fuzzy dice. I\'ll buy that for 13 gc.  Sound good? Keep in mind this is a quest item, and you might never get another."')
        selye = input("> ").lower()
        if selye == "yes":
          gc = gc + 13
          inventory.remove(invse)
          dt(0.02, '"Thank you! Anything else today?"')
        else:
          dt(0.02, '"Alright then! Anything else?"')
      elif invse == "skygrass cluster":
        dt(0.02,  '"Ooh, nice quality. I\'ll buy that for 1 sc each.  How many would you like to sell?"')
        selye = input("> ").lower()
        try:
          selye = int(selye)
          if ((selye > 0) and (inventory.count(invse) >= selye)):
            gc += selye
            massremove(selye, invse)
            dt(0.02, '"Thank you! Anything else today?"')
          else:
            dt(0.02, "Alright then! Anything else?")
        except:
          print("That's not an number!")
      elif invse == "exit":
        dt(0.02, '"Alright then, feel free to come back whenever!"')
        time.sleep(1)
        ShroudedOutpost()
      else:
        dt(0.02, '"Sorry, not interested in buying that. Anything else?"')
    else:
      dt(0.02,'"Hey! That\'s not something you have... Wanna sell me anything else?"')

def dicegame(numeral):
  global win
  dt(0.02, "\"Alright, let's get rolling. We'll play to " + str(numeral) +    " points.\"")
  time.sleep(1)
  game = 1
  win = 0
  dicerolls = []
  edr = []
  while game == 1:
    print("")
    print("Roll, pass, list, or help?")
    dicech = input("> ").lower()
    if dicech == "help":
      print("|How to play: |")
      time.sleep(0.2)
      print("Each turn, you may either roll or pass. To roll, roll two dice and add the total to a list.  If your opponent's list has that number, remove it.  Additionally, there are a couple special rolls.  Rolling a 1 and a 6 is known as a dagger, and removes an opponent's number at random to remove.  Snake eyes (double ones) remove your opponent's highest total die.  And rolling any double adds a 7 to your list. To pass, you just add a 'roll' of 1 to your list.  Games are played to a set number each time, but 50 is the typical total.")
      wait = input()
    elif dicech == "roll":
      diceroll1 = random.randint(1, 6)
      diceroll2 = random.randint(1, 6)
      dtotal = diceroll1 + diceroll2
      print("You rolled a " + str(diceroll1) + " and a " + str(diceroll2) +            "!")
      dicerolls.append(dtotal)
      time.sleep(2)
      if dtotal in edr:
        edr.remove(dtotal)
        print("You removed your opponent's roll of " + str(dtotal) + "!")
        time.sleep(2)
      if (diceroll1 == 1 and diceroll2 == 6) or (diceroll1 == 6 and diceroll2 == 1):
        randag = edr[random.randint(0, (len(edr) - 1))]
        edr.remove(randag)
        print("A 1 and a 6 is a dagger!  You destroy your opponent's " +              str(randag) + "!")
        time.sleep(2)
      elif diceroll1 == diceroll2:
        dicerolls.append(7)
        print("Rolling doubles gets you + 7!")
        time.sleep(2)
        if diceroll1 == 1:
          print("Wow! Snake eyes! You remove your opponent's highest roll.")
          edr.remove(max(edr))
      print("Now, it's your opponent's turn.")
      time.sleep(2)
      print("")
      ediceroll1 = random.randint(1, 6)
      ediceroll2 = random.randint(1, 6)
      edtotal = ediceroll1 + ediceroll2
      print("They rolled a " + str(ediceroll1) + " and a " + str(ediceroll2) + "!")
      edr.append(edtotal)
      time.sleep(2)
      if edtotal in dicerolls:
        dicerolls.remove(edtotal)
        print("Your opponent removed your roll of " + str(edtotal) + "!")
        time.sleep(2)
      if (ediceroll1 == 1 and ediceroll2 == 6) or (ediceroll1 == 6 and ediceroll2 == 1):
        randag = dicerolls[random.randint(0, (len(dicerolls) - 1))]
        dicerolls.remove(randag)
        print("A 1 and a 6 is a dagger!  They destroy your " + str(randag) +              "!")
        time.sleep(2)
      elif ediceroll1 == ediceroll2:
        edr.append(7)
        print("Rolling doubles gets them + 7!")
        time.sleep(2)
        if ediceroll1 == 1:
          print("Oh no. They rolled snake eyes. They remove your highest roll.")
          dicerolls.remove(max(dicerolls))
    elif dicech == "list":
      print("Your rolls list is as follows :" + str(dicerolls))
      print("")
      print("Your opponent's rolls list is as follows :" + str(edr))
      time.sleep(2)
    elif dicech == "pass":
      print("You pass and add a one to your roll.")
      dicerolls.append(1)
      print("Now, it's your opponent's turn.")
      time.sleep(2)
      print("")
      ediceroll1 = random.randint(1, 6)
      ediceroll2 = random.randint(1, 6)
      edtotal = ediceroll1 + ediceroll2
      print("They rolled a " + str(ediceroll1) + " and a " + str(ediceroll2) + "!")
      edr.append(edtotal)
      time.sleep(2)
      if edtotal in dicerolls:
        dicerolls.remove(edtotal)
        print("Your opponent removed your roll of " + str(edtotal) + "!")
        time.sleep(2)
      if (ediceroll1 == 1 and ediceroll2 == 6) or (ediceroll1 == 6 and ediceroll2 == 1):
        randag = dicerolls[random.randint(0, (len(dicerolls) - 1))]
        dicerolls.remove(randag)
        print("A 1 and a 6 is a dagger!  They destroy your " + str(randag) + "!")
        time.sleep(2)
      elif ediceroll1 == ediceroll2:
        edr.append(7)
        print("Rolling doubles gets them + 7!")
        time.sleep(2)
        if ediceroll1 == 1:
          print("Oh no. They rolled snake eyes. They remove your highest roll.")
          dicerolls.remove(max(dicerolls))
    elif dicech == "list":
      print("Your rolls list is as follows :" + str(dicerolls))
      print("")
      print("Your opponent's rolls list is as follows :" + str(edr))
      time.sleep(2)
    else:
      print("You can't do that!")
      time.sleep(2)
    if sum(dicerolls) >= numeral:
      if sum(edr) < 50:
        print("You win! You've reached " + str(numeral) + " points!")
        win = 1
        game = 0
        time.sleep(2)
      else:
        if sum(dicerolls) > sum(edr):
          print("You win! You've reached " + str(numeral) + " points, with more than your opponent!")
          win = 1
          game = 0
          time.sleep(2)
        elif sum(dicerolls) < sum(edr):
          print("You lose! You reached ")
    elif sum(edr) >= numeral:
      print("You lose! Your opponent has reached " + str(numeral) + " points!")
      win = 0
      game = 0
      time.sleep(2)

def wishingwell():
  global os1, d2b, csb1, sc
  dt(0.02,"You see a old marble fountain, covered in moss.  The water spewn up creates a subtle mist as it hits the basin beneath.  Coins litter the floor of the fountain.")
  time.sleep(1)
  print("Would you like to flip a silver coin into the fountain?")
  flyes = input("> ").lower()
  if ((flyes == "y") or (flyes == "yes")):
    if sc >= 1:
      sc -= 1
      print("")
      print("You flip a coin into the fountain.")
      wres = random.randint(1, 10)
      if 5 <= wres <= 6:
        os1 = 0
        print("A picture of a goblin patrol flashes through the mist.")
      if 7 <= wres <= 8:
        d2b = 0
        print("A picture of a pair of outlaws flashes through the mist.")
      if 9 <= wres <= 10:
        csb1 = 0
        print("A picture of a campfire flashes through the mist.")
      else:
        print("Nothing happens, really.")
      time.sleep(2)
  locationreturn()

def ShroudedOutpost():
  global inve, invi, invu, gt, hunger, hours, minutes, timeofday, sc, win, citiesbeento
  if "Shrouded Outpost" not in citiesbeento:
    citiesbeento.append("Shrouded Outpost")
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inn":
      print("You walk into an inn.")
      ShroudedInn()
    elif laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "taxi":
      taxi()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "coins":
      coins()
    elif laction == "storage":
      storage()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "rogue vendor":
      rgvendor()
    elif laction == "wishing well":
      wishingwell()
    elif laction == "converse":
      print("There are three people here who you can talk to.  Who would you like to speak with? (A/B/C)")
      persch = input("> ").lower()
      if persch == "a":
        dt(0.02, "Hey.  Hope you're doing well.")
        time.sleep(1)
        ShroudedOutpost()
      elif persch == "b":
        dt(0.02, "Hello!")
        time.sleep(1)
        if "mysterious letter" in inventory:
          dt(0.02, "\"Oh! You have a letter for me?\"")
          inventory.remove("mysterious letter")
          quests.remove("A Letter To Matthew")
          time.sleep(1)
          dt(0.02, "\"Thank you so much! Here's some money for you!\"")
          sc = sc + 100
          time.sleep(2)
        ShroudedOutpost()
      elif persch == "c":
        dt(0.02, "\"Interested in a game of dice?\"")
        gyes = input("> ").lower()
        if gyes == ("yes" or "y"):
          dt(0.02, "\"Sweet!\"")
          time.sleep(1)
          dicegame(50)
          if win == 1 and gt == 0:
            print("Nice job! Here, have a little something for that victory...")
            time.sleep(2)
            inventory.append("gambler's trinket")
            gt = 1
          elif win == 1 and gt != 0:
            print("...And you win again! Well played.")
          else:
            dt(0.02, "\"Good game!  We can't win them all...\"")
        else:
          dt(0.02, "Ah, alright. Maybe sometime...")
        print("")
        time.sleep(1)
        ShroudedOutpost()
      else:
        ShroudedOutpost()
    elif laction == "west":
      hunger = hunger - 1
      timeshift(1, 0)
      print("You walk out of the left gate of the village into the grasslands beyond.")
      time.sleep(2)
      verdanthills4()
    elif laction == "north":
      hunger = hunger - 1
      timeshift(1, 0)
      print("You walk out of the north gate of the village into the prairies beyond.")
      time.sleep(2)
      skygrassprairie1()
    elif laction == "merchants":
      shroudmerch()
    elif laction == "exchange":
      exchange()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      ShroudedOutpost()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      ShroudedOutpost()
  else:
    ShroudedOutpost()

def savagesteppe6():
  global location, hours, timeofday, hunger, loot
  locationchange("savagesteppe6")
  mealcheck()
  dt(0.02,"You stand at the bottom of a red sandstone cliff.  You gaze around and see desertified plains, and the air is quite hot. You seem to be at a crossroads of sorts, for to the south you see deep red cliffs and the the west you see stony peaks.")
  time.sleep(1)
  lactionfix()
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "west":
      print("You start hiking through the sandy grasslands towards the stony peaks in the distance.")
      time.sleep(2)
      print("As you walk, the terrain starts becoming more hilly and more rocky.  This might be a difficult hike.")
      time.sleep(2)
      print("You keep walking to the foothills, and finally come upon a small peak.")
      time.sleep(2)
      timeshift(1, 30)
      cloudedspires1()
    elif laction == "south":
      print("You start hiking through the sandy grasslands towards the red and orange hills in the distance.")
      time.sleep(2)
      print("As you walk, the terrain starts becoming more solid and less verdant.  The ground becomes a more gravely sand, and hills of red, orange and purple sandstone stand around you, weathered by millions of years of erosion from long-gone rivers.")
      time.sleep(5)
      timeshift(1, 30)
      sunsetmesa1()
    elif laction == "east":
      print("You start hiking through the sandy grasslands to the east, where the cliff to your left seems steeper and steeper as the time goes on.")
      time.sleep(2.5)
      timeshift(1, 0)
      savagesteppe3()
    elif laction == "north":
      print("Rocky cliffs lie to the north.  Would you like to climb up them?  You estimate height at around 40 feet.")
      clyes = input("> ").lower()
      if clyes == "yes" or clyes == "y":
        timeshift(1, 0)
        cliffscale("up", 40, "savagesteppe2")
      else:
        savagesteppe6()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory. (hopefully)")
      wait = input()
      savagesteppe6()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      savagesteppe6()
  else:
    savagesteppe6()

def cloudedspires1():
  global location, hours, timeofday, hunger, loot, enemies, csb1, invis
  locationchange("cloudedspires1")
  mealcheck()
  dt(0.02,"You stand at the top of a small peak, but barely 20 meters down the hill from you another much vaster mountain looms out of the ground.  The ground is grassy and green beneath your feet, and dark oak and pine trees grow out of the ground periodically.")
  time.sleep(1)
  lactionfix()
  if csb1 == 0:
    if ((random.randint(1, 3) != 3) or (invis == 1)):
      print("You see an orc and a goblin standing a bit away from you, sitting around a small campfire. They don't seem to have noticed you yet.  Would you like to fight them?")
      fyn = input("> ").lower()
      if (fyn == "yes") or (fyn == "y"):
        print("You run towards them and leap into combat!")
        time.sleep(2)
        clearscreen()
        enemies.append("goblin")
        enemies.append("orc")
        csb1 = 1
        combat()
      else:
        print("You ignore them for now.")
        time.sleep(2)
        print("")
    else:
      print("A goblin and an orc sitting a bit away notice you and charge.")
      time.sleep(2)
      clearscreen()
      enemies.append("goblin")
      enemies.append("orc")
      csb1 = 1
      combat()
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "snipe":
      if csb1 == 0:
        sniping()
      else:
        print("There are no enemies around!")
        time.sleep(2)
        locationreturn()
    elif laction == "south":
      print("You start hiking through the rocky peaks towards the red and orange hills in the distance.")
      time.sleep(2)
      print("As you walk, the hills become shorter, smoother, and much more vibrant.  Beautiful scarlet, orange, and violet rocks compose small cliffs and smooth, bowl-shaped hills across a landscape dvidided by small crevasses.")
      time.sleep(5)
      timeshift(1, 30)
      sunsetmesa2()
    elif laction == "east":
      print("You start hiking through the hills towards desertified lowlands.")
      time.sleep(2)
      timeshift(1, 0)
      savagesteppe6()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory. (hopefully)")
      wait = input()
      cloudedspires1()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      cloudedspires1()
  else:
    cloudedspires1()

def sniping():
  global eqweapon, location, snipe, csb1, d2b
  print("You loose an arrow, directly at your foes.")
  snipe = 1
  time.sleep(2)
  clearscreen()
  if location == "cloudedspires1":
    csb1 = 1
    enemies.append("goblin")
    enemies.append("orc")
  elif location == "savagesteppe5":
    enemies.append("outlaw")
  elif location == "savagesteppe2":
    d2b = 1
    enemies.append("outlaw")
    enemies.append("outlaw")
  elif location == "oakensanctuary13":
    os1 = 1
    enemies.append("goblin")
    enemies.append("goblin striker")
    enemies.append("goblin sniper")
  combat()
  locationreturn()

def sunsetmesa1():
  global location, hours, timeofday, hunger, loot
  locationchange("sunsetmesa1")
  mealcheck()
  dt(0.02,"You stand at the bottom of a colorful sandstone hill.  You gaze around and see a vibrant mesa, of purple, orange, and red hues. Small cliffs and hills dot the landscape, and tiny crevasses cut the ground here and there.")
  time.sleep(1)
  lactionfix()
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "west":
      print("You keep walking through the mesa.")
      time.sleep(2)
      timeshift(1, 0)
      sunsetmesa2()
    elif laction == "north":
      print("You walk to the north, towards desertified grasslands.")
      time.sleep(2)
      print("The colorful hard stones shifts to a dry dirt, with desert plants and grasses springing out of it.")
      time.sleep(2)
      timeshift(1, 0)
      savagesteppe6()
    elif laction == "south":
      print("You walk to the south, towards higher hills and more common peaks.")
      time.sleep(2)
      timeshift(1, 0)
      sunsetmesa4()
    elif laction == "east":
      print("You keep walking through the mesa, towards much flatter areas.")
      time.sleep(2)
      timeshift(1, 0)
      sunsetmesa3()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory. (hopefully)")
      wait = input()
      sunsetmesa1()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      sunsetmesa1()
  else:
    sunsetmesa1()

def sunsetmesa2():
  global location, hours, timeofday, hunger, loot
  locationchange("sunsetmesa2")
  mealcheck()
  dt(0.02,"You stand among rounded cylinders of stone.  These half hill, half cliff structures riddle the landscape and weathered cacti grow in clumps around you. In the distance, you see a river flowing.")
  time.sleep(1)
  lactionfix()
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "north":
      print("You walk to the north, towards desertified grasslands.")
      time.sleep(2)
      print("The colorful hard stones shifts to a dry dirt, with desert plants and grasses springing out of it.")
      time.sleep(2)
      timeshift(1, 0)
      cloudedspires1()
    elif laction == "east":
      print("You keep walking through the mesa, towards much flatter areas.")
      time.sleep(2)
      timeshift(1, 0)
      sunsetmesa1()
    elif laction == "fish":
      fish()
    elif laction == "south":
      print("You keep walking through the mesa, towards steeper hilly areas.")
      time.sleep(2)
      timeshift(1, 0)
      StoneEntry()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory. (hopefully)")
      wait = input()
      sunsetmesa2()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      sunsetmesa2()
  else:
    sunsetmesa2()

def sunsetmesa4(): #Message on going south from sunsetmesa1: "You walk to the south, towards higher hills and more common peaks."
  #WEST: StoneEntry | EAST: sunsetmesa5 | NORTH: sunsetmesa1 | SOUTH: BLOCKED
  global location, hours, timeofday, hunger, loot
  locationchange("sunsetmesa4")
  mealcheck()
  dt(0.02,"You stand at the bottom of a tall, red sandstone cliff.  You gaze around and see a vibrant mesa, of purple, orange, and red hues. Small cliffs and hills dot the landscape, and tiny crevasses cut the ground here and there.")
  time.sleep(1)
  lactionfix()
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "quests":
      print("Your quests: " + str(quests))
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "coins":
      coins()
    elif laction == "exchange":
      exchange()
    elif laction == "save data":
      savedata()
    elif laction == "north":
      print("You walk to the north, towards a flatter area.")
      time.sleep(2)
      timeshift(1, 0)
      sunsetmesa1()
    elif laction == "west":
      print("You walk to the west, towards a river.")
      time.sleep(2)
      print("After following it for a while, you come across a path that you proceed to follow.")
      time.sleep(2)
      timeshift(1, 0)
      StoneEntry()
    elif laction == "east":
      print("You walk to the east, following a river that goes between two massive plateaus.")
      time.sleep(2)
      timeshift(1, 0)
      sunsetmesa5()

def sunsetmesa3():
  print("redirecting...")
  locationreturn()

def sunsetmesa4():
  print("redirecting...")
  locationreturn()

def sunsetmesa5():
  print("redirecting...")
  locationreturn()

def StoneEntry():
  global inve, invi, invu, location
  locationchange("StonesEdge")
  print("")
  print("After what seems around an hour, you see a small town in the distance.")
  time.sleep(2)
  print("")
  print("Getting closer, you see a solid stone wall surrounding a fairly large village.")
  time.sleep(2)
  print("")
  print("As you walk up to the guards, one recognizes you as an adventurer.  You are let in.")
  time.sleep(2)
  dt(0.02,"Inside the village, you see it is based on a smoothly slanting hill, covered in winding cobblestone roads with rectangular sandstone and rocky houses lining them.  A market square sits in the center of the lower part of the hill, and delicious wafting scents and the chatter of people are audible from there.")
  lactionfix()
  mealcheck()
  StonesEdge()

def StoneInn():
  global bardcd, gc, sc, cc, hunger, timeofday, hours, minutes, maxhunger, hp, maxhp, inventory
  print("What would you like to do? Say anything else to leave the inn.")
  print("[info, checkin, merchant.]")
  iaction = input("> ").lower()
  if iaction == "info":
    print("The rooms here cost 4 " + gold + "gc" + white +      ".  Staying the night at an inn will fully heal you and give you all your spells back, assuming that you're a mage.")
    time.sleep(1)
    print("[ENTER] to continue.")
    wait = input()
    clearscreen()
    StoneInn()
  if iaction == "checkin":
    print("'Heya! Looking to stay the night??'")
    time.sleep(2)
    roomyes = input("> ").lower()
    if roomyes == "yes" or roomyes == "y":
      if ((hours < 5) or ((hours <= 11) and (timeofday == "am")) or (hours == 12)):
        print("Sorry, we aren't checking in yet.  Come back at 5!")
        time.sleep(1)
        print("")
        Falinn()
      else:
        print("Great!  That'll cost you 4 gold coins!")
        time.sleep(1.5)
        if gc >= 4:
          print("Here's a key. There might be breakfast in the morning? There usually is!")
          time.sleep(2)
          gc = gc - 4
          hunger = hunger + 4
          if hunger > maxhunger:
            hunger = maxhunger
          hours = 7
          minutes = 00
          timeofday = "am"
          spells.clear()
          spells.extend(maxspells)
          hp = maxhp
          print("After a long rest, you get up and head back downstairs.")
          StoneInn()
        else:
          print("You don't have enough money!")
          StoneInn()
    elif roomyes == "no" or roomyes == "n":
      print("Okay, thats fine.")
      StoneInn()
    else:
      print("Come back later!")
      StoneInn()
  elif iaction == "merchant":
    dt(0.02, "'Hey. What're you in the market for?'")
    time.sleep(1)
    print("[Iron sword][15 " + gold + "gc" + white + "]")
    print("[Sturdy boots][20 " + gold + "gc" + white + "]")
    print("[Steel dagger][24 " + gold + "gc" + white + "]")
    print("[Old Fishing Rod][21 " + gold + "gc" + white + "]")
    time.sleep(1)
    fmchoose1 = input("> ").lower()
    if fmchoose1 == "iron sword":
      if gc >= 15:
        print("Here you go, thank you for your purchase.")
        gc = gc - 15
        inventory.append("iron sword")
      else:
        print("You don't have enough money!")
    elif fmchoose1 == "steel dagger":
      if gc >= 24:
        print("Here you go, thank you for your purchase.")
        gc = gc - 24
        inventory.append("steel dagger")
      else:
        print("You don't have enough money!")
    elif fmchoose1 == "sturdy boots":
      if gc >= 20:
        print("Here you go, thank you for your purchase.")
        gc = gc - 20
        inventory.append("sturdy boots")
      else:
        print("You don't have enough money!")
    elif fmchoose1 == "old fishing rod":
      if gc >= 21:
        print("Here you go, thank you for your purchase.")
        gc = gc - 21
        inventory.append("old fishing rod")
      else:
        print("You don't have enough money!")
    else:
      print("That's not an option!")
    time.sleep(1)
    print("Thanks for coming!  See you later!")
    print("")
    time.sleep(1)
    StoneInn()
  elif ((iaction == "perform") and (sclass == "bard")):
    if bardcd == 0:
      print("You perform for a couple hours until a new group takes the stage.")
      time.sleep(2)
      bardcd = 20
      gcmade = random.randint(0, 3)
      scmade = random.randint(0, 20)
      ccmade = random.randint(1, 150)
      gc = gc + gcmade
      sc = sc + scmade
      cc += ccmade
      if gcmade != 0:
        print("You were tipped " + gcmade + " gold coins!")
      time.sleep(0.2)
      if gcmade != 0:
        print("You were tipped " + scmade + " silver coins!")
      time.sleep(0.2)
      ("You were tipped " + ccmade + " copper coins!")
      time.sleep(2)
      StoneInn()
    else:
      print("You've done that too recently!")
      time.sleep(2)
      StoneInn()
  else:
    print("You walk out of the inn.")
    time.sleep(1)
    StonesEdge()

def stonemerch():
  global inventory
  print("[Recipes], [Craft], or [Leave]?")
  craftsm = input("> ").lower()
  if craftsm == "recipes":
    print("[Gear] recipes, [Advanced] recipes, or [Resource] recipes?")
    rectypesm = input("> ").lower()
    if rectypesm == "gear":
      print("[Amber] x 3 + [Scaling Pickaxe] = [Keystone Skypick]")
      print("")
      print("[Leather Vest] + [Fish Scales] x 5 + [Iron Bar] x 1 = [Scale Mail]")
      print("")
      print("[Bronze Ingot] x 3 + [Blossom Vines] x 5 + [Oak Branches] x 4 = [Bronze Scimitar]")
      print("")
      print("[Bronze Ingot] x 3 + [Iron Ingot] x 1 + [Zinc Powder] x 4 = [Brass Knuckles]")
      print("")
      print("[Topaz] x 3 + [Oak Branches] x 7 + [Skygrass Cluster] x 2 = [Topaz Spellslinger]")
      print("")
      print("[Steel Dagger] + [Iron Ingot] + [Oak Branches] x 8 = [Phalanx Polearm]")
      print("")
      print("[Old Fishing Rod] + [Iron Ingot] x 2 + [Oak Branches] x 5 = [Fine Fishing Rod]")
      print("")
      wait = input().lower()
      clearscreen()
      stonemerch()
    elif rectypesm == "advanced":
      print("Currently unusable, but you can craft these!")
      print("[Coloborite Ingot] x 2 + [Oaken Crossbow] = [Stormbolt Ballista]")
      print("")
      print("[Coloborite Ingot] x 1 + [Amber] x 2 + [Orcish Battleaxe] = [Megaton Polearm]")
      print("")
      print("[Amulet of Life] x 1 + [Blossom Vines] x 10 + [Glow Lichen] x 10 + [Leafy Staff] = [Verdant Staff]")
      print("")
      print("[Coloborite Ingot] x 1 + [Bronze Ingot] x 4 + [Striker Blade] + [Goblin Sword] = [Warlord's Cleaver]")
      print("")
      print("[Coloborite Ingot] x 1 + [Iron Greaves] x 1 = [Coloborite Greaves]")
      print("")
      print("[Heavytip Quiver] x 1 + [Invisibility Potion] x 5 = [Stalker's Quiver]")
      print("")
      wait = input().lower()
      clearscreen()
      stonemerch()
    elif rectypesm == "resource":
      print("[Copper Ore] x 2 = [Copper Ingot]")
      print("")
      print("[Copper Ore] x 2 + [Tin Ore] x 1 = [Bronze Ingot]")
      print("")
      print("[Iron Ore] x 2 = [Iron Ingot]")
      print("")
      print("[Iron Ore] x 2 + [Zinc Powder] x 5 + [Scrap Metal] x 5 = [Coloborite Ingot]")
      print("")
      print("[Raw Salmon] = [Filleted Salmon] + [Fish Scales]")
      print("")
      print("[Raw Cod] = [Filleted Cod] + [Fish Scales]")
      print("")
      wait = input().lower()
      clearscreen()
      stonemerch()
    else:
      stonemerch()
  elif craftsm == "craft":
    print("What would you like to craft?")
    crcho = input("> ").lower()
    if crcho == "keystone skypick":
      if (inventory.count("amber") >= 3) and (inventory.count("scaling pick")
                                              >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        inventory.remove("scaling pick")
        massremove(3, "amber")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "bronze scimitar":
      if (inventory.count("bronze ingot") >=
          3) and (inventory.count("blossom vines") >=
                  5) and (inventory.count("oak branches") >= 4):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(3, "bronze ingot")
        massremove(5, "blossom vines")
        massremove(4, "oak branches")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "brass knuckles":
      if (inventory.count("bronze ingot") >=
          3) and (inventory.count("iron ingot") >=
                  1) and (inventory.count("zinc powder") >= 4):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(3, "bronze ingot")
        inventory.remove("iron ingot")
        massremove(4, "zinc powder")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "stalker's quiver":
      if (inventory.count("invisibility potion") >=
          5) and (inventory.count("heavytip quiver") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(5, "invisibility potion")
        inventory.remove("heavytip quiver")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "scale mail":
      if (inventory.count("fish scales") >=
          5) and (inventory.count("leather vest") >=
                  1) and (inventory.count("iron ingot") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(1, "leather vest")
        massremove(1, "iron ingot")
        massremove(5, "fish scales")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "megaton polearm":
      if (inventory.count("amber") >=
          2) and (inventory.count("orcish battleaxe") >=
                  1) and (inventory.count("coloborite ingot") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(1, "orcish battleaxe")
        massremove(1, "coloborite ingot")
        massremove(2, "amber")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "fine fishing rod":
      if (inventory.count("oak branches") >=
          5) and (inventory.count("iron ingot") >=
                  2) and (inventory.count("old fishing rod") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(1, "old fishing rod")
        massremove(2, "iron ingot")
        massremove(5, "oak branches")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "verdant staff":
      if ((inventory.count("blossom vines") >= 10) and (inventory.count("glow lichen") >= 10) and (inventory.count("leafy staff") >= 1) and (inventory.count("amulet of life") >= 1)):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(1, "amulet of life")
        massremove(1, "leafy staff")
        massremove(10, "glow lichen")
        massremove(10, "blossom vines")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "warlord's cleaver":
      if ((inventory.count("coloborite ingot") >= 1) and (inventory.count("bronze ingot") >= 4) and (inventory.count("striker blade") >= 1) and (inventory.count("goblin sword") >= 1)):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(1, "striker blade")
        massremove(1, "goblin sword")
        massremove(1, "coloborite ingot")
        massremove(4, "bronze ingot")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "topaz spellslinger":
      if (inventory.count("topaz") >=
          3) and (inventory.count("oak branches") >=
                  7) and (inventory.count("skygrass cluster") >= 2):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(3, "topaz")
        massremove(7, "oak branches")
        massremove(2, "skygrass cluster")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "phalanx polearm":
      if (inventory.count("steel dagger") >=
          1) and (inventory.count("oak branches") >=
                  8) and (inventory.count("iron ingot") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(1, "steel dagger")
        massremove(8, "oak branches")
        massremove(1, "iron ingot")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "coloborite ingot":
      if (inventory.count("iron ore") >=
          2) and (inventory.count("zinc powder") >=
                  5) and (inventory.count("scrap metal") >= 5):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(2, "iron ore")
        massremove(5, "zinc powder")
        massremove(5, "scrap metal")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "copper ingot":
      if (inventory.count("copper ore") >= 2):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(2, "copper ore")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "bronze ingot":
      if (inventory.count("copper ore") >= 2) and (inventory.count("tin ore") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(2, "copper ore")
        inventory.remove("tin ore")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "stormbolt ballista":
      if (inventory.count("coloborite ingot") >=
          2) and (inventory.count("oaken ballista") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(2, "coloborite ingot")
        inventory.remove("oaken ballista")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "coloborite greaves":
      if (inventory.count("coloborite ingot") >=
          1) and (inventory.count("iron greaves") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        inventory.remove("coloborite ingot")
        inventory.remove("iron greaves")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "stormbolt ballista":
      if (inventory.count("coloborite ingot") >=
          2) and (inventory.count("oaken crossbow") >= 1):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(2, "coloborite ingot")
        inventory.remove("oaken crossbow")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "iron ingot":
      if (inventory.count("iron ore") >= 2):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        massremove(2, "iron ore")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "filleted salmon":
      if (inventory.count("raw salmon") >= 2):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        inventory.append("fish scales")
        massremove(1, "raw salmon")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    elif crcho == "filleted cod":
      if (inventory.count("raw cod") >= 2):
        print("Crafting " + crcho + "...")
        time.sleep(4)
        print("Done!")
        inventory.append(crcho)
        inventory.append("fish scales")
        massremove(1, "raw cod")
        time.sleep(1)
        print("")
        stonemerch()
      else:
        print("You don't have the resources to craft that!")
        time.sleep(1)
        print("")
        stonemerch()
    else:
      print("You can't craft that here!")
      time.sleep(2)
      print("")
      stonemerch()
  elif craftsm == "leave":
    print("You walk back to the town square.")
    time.sleep(2)
    print("")
    StonesEdge()

def StonesEdge():
  global inve, invi, invu, gt, hunger, hours, minutes, timeofday, sc, gc, win, quests, inventory, sclass, battleactions, maxhp, hp, eqhelm, eqarmor, vq, gsq, quests, loot, dp, citiesbeento
  if "Stone's Edge" not in citiesbeento:
    citiesbeento.append("Stone's Edge")
  global laction
  laction = ""
  laction = acs(laction, locationactions)
  if laction in locationactions:
    if laction == "inn":
      print("You walk into an inn.")
      StoneInn()
    elif laction == "inventory":
      invf()
    elif laction == "hp":
      hpcheck()
    elif laction == "taxi":
      taxi()
    elif laction == "quests":
      print("Your quests: ")
      las(quests)
      time.sleep(1)
      locationreturn()
    elif laction == "loadout":
      loadout()
    elif laction == "coins":
      coins()
    elif laction == "throwing knives":
      knifecount()
    elif laction == "rogue vendor":
      rgvendor()
    elif laction == "storage":
      storage()
    elif laction == "converse":
      print("There are five people here who you can talk to.  Who would you like to speak with? (A/B/C/D/E)")
      persch = input("> ").lower()
      if persch == "a":
        dt(0.02,  "\"Hello!  Haven't seen you around here before!  Hope you enjoy your stay.\"")
        time.sleep(1)
        StonesEdge()
      elif persch == "b":
        if vq == 2:
          dt(0.02, "\"Thanks for the vest!\"")
        elif vq == 1:
          if "leather vest" in inventory:
            dt(0.02, "\"Ooh, you have one! Can I buy it for 12 gold?\"")
            sellvest = input("> ").lower()
            if sellvest == "yes":
              dt(0.02, "\"Thank you so much!!\"")
              quests.remove("A Nice Vest")
              vq = 2
              gc = gc + 12
              inventory.remove("leather vest")
              time.sleep(1)
              print("")
              StonesEdge()
            else:
              dt(0.02, "\"Alright...\"")
              time.sleep(1)
              print("")
              StonesEdge()
          else:
            dt(0.02, "\"Keep looking, please!\"")
            time.sleep(1)
            print("")
            StonesEdge()
        elif vq == 0:
          dt(0.02,    "\"Hey, I've been looking for a nice vest... if you find one could I have it? I'll pay a lot, noone seems to be selling them lately...\"")
          print("Will you accept the quest?")
          vqy = input("> ").lower()
          if (vqy == "y") or (vqy == "yes"):
            dt(0.02, "\"Sweet! Bring me one when you find one please!\"")
            vq = 1
            quests.append("A Nice Vest")
          time.sleep(1)
        StonesEdge()
      elif persch == "c":
        print("You see a mischevious looking adventurer strumming a guitar.  Everyone nearby seems drawn toward them, as if lured in by a siren's song.")
        time.sleep(2)
        dt(0.02, "\"Hey adventurer!  Hope you're enjoying the music...\"")
        if "old fiddle" in inventory:
          time.sleep(1)
          dt(0.02,    "\"Oh, I see you have a nice fiddle!  Wanna become a bard?  I can show you the ways...\"")
          time.sleep(1)
          print("They keep strumming, everyone around them is entranced.")
          time.sleep(2)
          print("Would you like to become a bard?")
          bardyes = input("> ").lower()
          if bardyes == "yes":
            dt(0.02, "\"Great!\"")
            time.sleep(2)
            print("They murmur a few strange words and shift to a minor key in the song they're playing, and you feel something shift inside you.  You're ready.")
            maxhp = 8
            if eqarmor == "iron plate":
              maxhp = maxhp + 2
            elif eqarmor == "leather vest":
              maxhp = maxhp + 1
            if hp > maxhp:
              hp = maxhp
            battleactions.append("performance")
            time.sleep(4)
            StonesEdge()
          else:
            dt(0.02, "\"Maybe another time, then!\"")
            time.sleep(1)
            StonesEdge()
        time.sleep(1)
        StonesEdge()
      elif persch == "d":
        shnum = random.randint(1, 10)
        if shnum == 1:
          sheriffsaying = "set an ale barrel on fire while casting fireworks all around the tavern.\""
        elif shnum == 2:
          sheriffsaying = "robbed a bank, and we haven't seen them since.\""
        elif shnum == 3:
          sheriffsaying = "played songs at obnoxious volumes, well past curfew.\""
        elif shnum == 4:
          sheriffsaying = "started an illegal fighting ring in the town square.\""
        elif shnum == 5:
          sheriffsaying = "overgrew semi-carnivorous weeds in the flower gardens.\""
        elif shnum == 6:
          sheriffsaying = "challenged the mayor to a duel, and ignored his 'no'.\""
        elif shnum == 7:
          sheriffsaying = "went around spreading rumors of a mysterious cult.\""
        elif shnum == 8:
          sheriffsaying = "kept getting in fights with the alleyway outlaws.\""
        elif shnum == 9:
          sheriffsaying = "broke an ancient vase while demonstrating their 'martial prowess'.\""
        else:
          sheriffsaying = "used my beard as target practice.  I'm lucky to have not been hurt.\""
        dt(0.02, ("\"Hey. Town sheriff here.  Don't try any funny business, the last adventurer to come around here "
          + sheriffsaying))
        time.sleep(2)
        StonesEdge()
      elif persch == "e":
        if gsq == 0:
          dt(0.02,    "\"Hey adventurer, this town has a problem.  We've been under siege from goblins lately, and on top of that, one of our ballistae just broke down the other day.  Would you be up for gathering some resources from the Verdant Hills to repair it?\"")
          repbal = input("> ").lower()
          if ((repbal == "yes") or (repbal == "y")):
            gsq = 1
            quests.append("A Broken Ballista")
            dt(0.02,       "\"Great! We'll need ten shafts of oak and an iron ingot.\"")
            time.sleep(1)
          time.sleep(2)
        elif gsq == 1:
          if ((inventory.count("oak branches") >= 10) and ("iron ingot" in inventory)):
            dt(0.02,      "\"Great, I see you have what we need, and just in time too!  Up for giving us those resources?\"")
            fbal = input("> ").lower()
            if ((fbal == "yes") or (fbal == "y")):
              gsq = 2
              massremove(10, "oak branches")
              inventory.remove("iron ingot")
              if ("A Broken Ballista") in quests:
                quests.remove("A Broken Ballista")
              quests.append("A Goblin Siege")
              dt(0.02,        "\"Neat!  I'll need a bit to fix up the ballista, but talk to me again when you're ready! I'm hearing rumors of approaching goblin forces.\"")
              time.sleep(1)
            else:
              dt(0.02, "\"Shame, please get us them soon.\"")
              time.sleep(1)
        elif gsq == 2:
          dt(0.02,    "\"Hello again, adventurer.  We'e reconstructed the ballista, and perfect timing - goblin forces are nearly here! Ready to fight them off?\"")
          fsei = input("> ").lower()
          if ((fsei == "yes") or (fsei == "y")):
            dt(0.02,      "\"Great!  Head out to the front lines, please - we'll be taking them head on.  Use the ballista to help you if need be.\"")
            time.sleep(2)
            battleactions.append("ballista")
            print("You head out the gates of the city, a ballista being wheeled behind you.  As soon as you and the ballista are in place, the guards turn tail and run back to the village, calling \"We'll trust you with this one, adventurer!\"")
            time.sleep(2)
            print("")
            print("[ENTER] to continue.")
            wait = input()
            print("You see a duo of goblins chargng at you.  You have no time to prepare before they're nearly on you.  You leap into battle!")
            time.sleep(2)
            print("")
            dp = 1
            enemies.append("goblin")
            enemies.append("goblin")
            combat()
            if loot == "yes":
              print("You defeated the first two, but more are nearly on you, and one seems heavily armed.")
              time.sleep(2)
              print("")
              dp = 1
              battleactions.append("ballista")
              enemies.append("goblin")
              enemies.append("goblin")
              enemies.append("goblin striker")
              combat()
              if loot == "yes":
                dt(0.02, "The goblins scurry back from whence they came...")
                time.sleep(2)
                print("...")
                time.sleep(2)
                print("You walk back into the village.")
                time.sleep(2)
                print("")
                print("The guard congratulates you, extremely excited.")
                time.sleep(2)
                dt(0.02,          "\"You did it, adventurer! The goblins were so shaken they even negotiated a peace treaty and gave us these as gifts.  Here, why don't you have them - and some gold as well.\"")
                time.sleep(2)
                inventory.append("ballista drive")
                inventory.append("ballistic spines")
                if ('A Goblin Siege') in quests:
                  quests.remove('A Goblin Siege')
                gc += 25
              else:
                print("You are left as sacrifice for the goblins, the village medics carry you back within the city after the goblins flee.")
                time.sleep(2)
                hp = maxhp
                print("")
                StonesEdge()
            else:
              print("You are left as sacrifice for the goblins, the village medics carry you back within the city after the goblins flee.")
              time.sleep(2)
              hp = maxhp
              print("")
              StonesEdge()
          else:
            dt(0.02, "\Make it quick and hurry back here! It may be urgent!\"")
            time.sleep(1)
        else:
          dt(0.02, "\Thanks again for all the help!\"")
          time.sleep(1)
        if "ballista" in battleactions:
          battleactions.append("ballista")
        print("")
        StonesEdge()
      else:
        StonesEdge()
    elif laction == "north":
      hunger = hunger - 1
      timeshift(1, 0)
      print("You walk out of the north gate of the village into the mesa beyond.")
      time.sleep(2)
      sunsetmesa2()
    elif laction == "merchants":
      print("Would you like to speak to merchant [A] or merchant [B]?")
      mercc = input("> ").lower()
      if mercc == "b":
        print("You walk up to a merchant, at a stand with various materials and tools.")
        time.sleep(2)
        dt(0.02,  "\"Hello! Interested in crafting? I have the supplies to help you out, and it's all completely free!\"")
        time.sleep(2)
        stonemerch()
      else:
        print("You walk up to a merchant, who seems to be working leather..")
        time.sleep(2)
        dt(0.02, "\"Hello! Want to buy a pair of nice gloves? Only 15 gold!\"")
        gyes = input("> ").lower()
        if ((gyes == "yes") or (gyes == "y")):
          if gc >= 15:
            dt(0.02, "\"Great! Here you go.\"")
            gc = gc - 15
            inventory.append("leather gloves")
            print("")
          else:
            dt(0.02, "\That's not enough money!\"")
        else:
          dt(0.02,     "\"Alright, feel free to come back if you change your mind.\"")
        time.sleep(2)
        StonesEdge()
    elif laction == "exchange":
      exchange()
    elif laction == "hunger":
      hungercheck()
    elif laction == "time":
      timecheck()
    elif laction == "save data":
      savedata()
    elif laction == "help":
      print("Use the directions to move to new areas, use some commands to look around town, and some commands to check stats and items you have.  If some commands don't work, they're likely being developed or haven't been coded yet.  I strive to make this a positive experience for players and will almost always test commands I've edited recently.")
      print("")
      print("tl;dr: follow the commands it says you can use, directions are to explore and everything else is self-explanatory.")
      wait = input()
      StonesEdge()
    else:
      print("[not coded yet, sorry]")
      time.sleep(1)
      StonesEdge()
  else:
    StonesEdge()

def Falinn():
  global gc, hp, hunger, maxhunger, minutes, hours, timeofday, maxhp, sc, cc, pc, sclass, bardcd, inventory
  time.sleep(1)
  print("The tune of lively music greets you as you walk inside.  You see someone at the front checking people in to their rooms.  A merchant sits on a stool a bit away.")
  time.sleep(1)
  print("")
  print("What would you like to do? Say anything else to leave the inn.")
  print("[info, checkin, merchant, musicians.]")
  time.sleep(1)
  if sclass == "bard":
    print("Since you're a bard, you can also [perform].")
  iaction = input("> ").lower()
  if iaction == "info":
    print("The rooms here cost 4 " + gold + "gc" + white +      ".  Staying the night at an inn will fully heal you and give you all your spells back, assuming that youre a mage.")
    time.sleep(1)
    print("[ENTER] to continue.")
    wait = input()
    clearscreen()
    Falinn()
  if iaction == "checkin":
    print("'Hello, would you like a room?'")
    roomyes = input("> ").lower()
    if roomyes == "yes" or roomyes == "y":
      if ((hours < 5) or ((hours <= 11) and (timeofday == "am")) or (hours == 12)):
        print("Sorry, we aren't checking in yet.  Come back at 5!")
        time.sleep(1)
        print("")
        Falinn()
      else:
        print("Perfect.  That'll cost you 4 gold coins.")
        time.sleep(2)
        if gc >= 4:
          print("Here's a key, help yourself to breakfast in the morning.")
          time.sleep(2)
          gc = gc - 4
          hunger = hunger + 4
          if hunger > maxhunger:
            hunger = maxhunger
          hours = 7
          minutes = 00
          timeofday = "am"
          spells.clear()
          spells.extend(maxspells)
          hp = maxhp
          print("After a long rest, you get up and head back downstairs.")
          Falinn()
        else:
          print("You don't have enough money!")
          Falinn()
    elif roomyes == "no" or roomyes == "n":
      print("Okay, thats fine.")
      Falinn()
    else:
      print("Come back later!")
      Falinn()
  elif iaction == "musicians":
    print("You walk up to the musicians.  The music they are playing is wonderful.")
    print("Would you like to tip them 1 gold? y/n")
    ftipm = input("> ").lower()
    if ftipm == "yes" or ftipm == "y":
      if gc >= 1:
        print("Thank you kindly for the tip, sir!")
        gc = gc - 1
        time.sleep(1)
        if random.randint(1, 120) == 120:
          print("")
          print("What a generous soul!  Take this free fiddle, its old and not the best anyhow.")
          inventory.append("old fiddle")
          time.sleep(2)
        Falinn()
      else:
        print("You don't have enough money!")
        time.sleep(1)
        Falinn()
    else:
      print("You walk back to the front again.")
      print("")
      time.sleep(1)
      Falinn()
  elif iaction == "merchant":
    dt(0.02, "'Hello, what would you like?'")
    time.sleep(1)
    print("[Iron sword][15 " + gold + "gc" + white + "]")
    print("[Old boots][8 " + gold + "gc" + white + "]")
    print("[Steel dagger][24 " + gold + "gc" + white + "]")
    print("[Leafy staff][18 " + gold + "gc" + white + "]")
    print("[Scaling Pickaxe][19 " + gold + "gc" + white + "]")
    print("[Oaken Crossbow][16 " + gold + "gc" + white + "]")
    print("[Map][1 " + gold + "gc" + white + "]")
    time.sleep(1)
    fmchoose1 = input("> ").lower()
    if fmchoose1 == "iron sword":
      if gc >= 15:
        dt(0.02, "Here you go, thank you for your purchase.")
        gc = gc - 15
        inventory.append("iron sword")
      else:
        dt(0.02, "You don't have enough money!")
    elif fmchoose1 == "steel dagger":
      if gc >= 24:
        dt(0.02, "Here you go, thank you for your purchase.")
        gc = gc - 24
        inventory.append("steel dagger")
      else:
        dt(0.02, "You don't have enough money!")
    elif fmchoose1 == "scaling pickaxe":
      if gc >= 19:
        dt(0.02, "Here you go, thank you for your purchase.")
        gc = gc - 19
        inventory.append("steel dagger")
      else:
        dt(0.02, "You don't have enough money!")
    elif fmchoose1 == "old boots":
      if gc >= 8:
        dt(0.02, "Here you go, thank you for your purchase.")
        gc = gc - 8
        inventory.append("old boots")
      else:
        dt(0.02, "You don't have enough money!")
    elif fmchoose1 == "leafy staff":
      if gc >= 18:
        dt(0.02, "Here you go, thank you for your purchase.")
        gc = gc - 18
        inventory.append("leafy staff")
      else:
        dt(0.02, "You don't have enough money!")
    elif fmchoose1 == "oaken crossbow":
      if gc >= 16:
        dt(0.02, "Here you go, thank you for your purchase.")
        gc = gc - 16
        inventory.append("oaken crossbow")
      else:
        dt(0.02, "You don't have enough money!")
    elif fmchoose1 == "map":
      if gc >= 1:
        dt(0.02,  "Here you go, thank you for your purchase.  Make sure to try to [use] in in your inventory!")
        gc = gc - 1
        inventory.append("map")
      else:
        dt(0.02, "You don't have enough money!")
    else:
      dt(0.02, "That's not an option!")
    time.sleep(2)
    dt(0.02, "Thanks for coming!  See you later!")
    print("")
    Falinn()
  elif ((iaction == "perform") and (sclass == "bard")):
    if bardcd == 0:
      print("You perform for a couple hours until a new group takes the stage.")
      time.sleep(2)
      bardcd = 20
      gcmade = random.randint(0, 3)
      scmade = random.randint(0, 20)
      ccmade = random.randint(1, 150)
      gc = gc + gcmade
      sc = sc + scmade
      cc += ccmade
      if gcmade != 0:
        print("You were tipped " + gcmade + " gold coins!")
      time.sleep(0.2)
      if gcmade != 0:
        print("You were tipped " + scmade + " silver coins!")
      time.sleep(0.2)
      ("You were tipped " + ccmade + " copper coins!")
      time.sleep(2)
      Falinn()
    else:
      print("You've done that too recently!")
      time.sleep(2)
      Falinn()
  else:
    print("You walk out of the inn.")
    print("")
    time.sleep(1)
    Falezrin()

def lactionfix():
  global locationactions, location, inventory, fishingspots, cities, eqweapon, sclass, rangedweapons, combatareas
  if "storage" in locationactions:
    locationactions.remove("storage")
  if "taxi" in locationactions:
    locationactions.remove("taxi")
  if "wishing well" in locationactions:
    locationactions.remove("wishing well")
  if "raid" in locationactions:
    locationactions.remove("raid")
  if "converse" in locationactions:
    locationactions.remove("converse")
  if "bush" in locationactions:
    locationactions.remove("bush")
  if "gather" in locationactions:
    locationactions.remove("gather")
  if "fish" in locationactions:
    locationactions.remove("fish")
  if "snipe" in locationactions:
    locationactions.remove("snipe")
  if "merchants" in locationactions:
    locationactions.remove("merchants")
  if "inn" in locationactions:
    locationactions.remove("inn")
  if "outlaw" in locationactions:
    locationactions.remove("outlaw")
  if "rogue vendor" in locationactions:
    locationactions.remove("rogue vendor")
  if (("verdanthill" in location) or (location == "skygrassprairie1") or (location == "darksporeforest3")):
    locationactions.append("gather")
  if location == "darksporeforest1":
    locationactions.append("bush")
  if location == "darksporeforest7":
    locationactions.append("raid")
  if location == "savagesteppe5":
    locationactions.append("outlaw")
  if location == "ShroudedOutpost":
    locationactions.append("wishing well")
  if ((eqweapon in rangedweapons) and (sclass == "bowman" or sclass == "musketeer")):
    if location in combatareas:
      locationactions.append("snipe")
  if (("old fishing rod" in inventory) or ("fine fishing rod" in inventory) or ("nightwave rod" in inventory)):
    if location in fishingspots:
      locationactions.append("fish")
  if location in cities:
    locationactions.append("merchants")
    locationactions.append("inn")
    locationactions.append("converse")
    locationactions.append("storage")
    locationactions.append("taxi")
    if sclass == "rogue":
      locationactions.append("rogue vendor")

def invf():
  global eqweapon, eqhelm, eqoffhand, eqgreaves, eqarmor, eqgear, sclass, Falezrin, ac, maxhp, hp, acc, dmgbonus, knifebonus, rangedDR, gwpcharge, gwpy, cspdb, atkbonus, DR, inventory, bowbonus, rangedweapons, maxspells, spells, invis
  print("Here is your inventory.")
  las(inventory)
  time.sleep(1)
  print("Say equip, unequip, info, use, or exit.")
  invc = input("> ").lower()
  if invc == ("unequip"):
    print("Which item would you like to unequip?")
    invu = input("> ").lower()
    if invu == eqweapon:
      if eqweapon != "none":
        inventory.append(eqweapon)
      eqweapon = "none"
      print("Your " + invu + " was unequipped!")
      print("")
      time.sleep(1)
    elif invu == eqoffhand:
      if eqoffhand != "none":
        inventory.append(eqoffhand)
      eqoffhand = "none"
      print("Your " + invu + " was unequipped!")
      print("")
      if invu == "wooden shield":
        ac = ac - 1
      time.sleep(1)
    elif invu == eqhelm:
      if eqhelm != "none":
        inventory.append(eqhelm)
      eqhelm = "none"
      print("Your " + invu + " was unequipped!")
      print("")
      if invu == "iron helm":
        ac = ac - 1
      if invu == "outlaw bandana":
        dmgbonus = dmgbonus - 1
        knifebonus = knifebonus - 2
      time.sleep(1)
    elif invu in eqgear:
      inventory.append(invu)
      eqgear.remove(invu)
      print("Your " + invu + " was unequipped!")
      print("")
      if invu == "scaling pickaxe":
        cspdb = cspdb - 1
      elif invu == "leather gloves":
        atkbonus -= 2
      elif invu == "heavytip quiver":
        bowbonus -= 1
      elif invu == "amulet of life":
        maxhp -= 5
        if hp > maxhp:
          hp = maxhp
      time.sleep(1)
    else:
      print("You can't unequip that!")
      print("")
  if invc == ("equip"):
    print("Which item would you like to equip?")
    inve = input("> ").lower()
    if inve in inventory:
      if inve == "goblin sword":
        if ((sclass == "warrior") or (sclass == "berserker") or (sclass == "skirmisher")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Goblin sword equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "striker blade":
        if ((sclass == "warrior") or (sclass == "berserker") or (sclass == "skirmisher")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Striker blade equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "warlord's cleaver":
        if ((sclass == "warrior") or (sclass == "berserker") or (sclass == "skirmisher")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Warlord's cleaver equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "bronze sword":
        if ((sclass == "warrior") or (sclass == "berserker") or (sclass == "skirmisher")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Bronze sword equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "verdant scimitar":
        if ((sclass == "warrior") or (sclass == "druid") or (sclass == "skirmisher")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Verdant scimitar equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "phalanx polearm":
        if ((sclass == "warrior") or (sclass == "skirmisher")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Phalanx polearm equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "bronze scimitar":
        if ((sclass == "warrior") or (sclass == "druid") or (sclass == "skirmisher") or (sclass == "berserker")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Bronze scimitar equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "oaken crossbow":
        if sclass == "bowman":
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Oaken crossbow equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "oaken longbow":
        if sclass == "bowman":
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Oaken longbow equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "weathered blade":
        if ((sclass == "warrior") or (sclass == "rogue") or (sclass == "skirmisher")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Weathered blade equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "topaz spellslinger":
        if (sclass == "druid") or (sclass == "mage") or (sclass == "cleric"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Topaz spellslinger equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "shaman's staff":
        if (sclass == "druid") or (sclass == "mage") or (sclass == "cleric"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Shaman's staff equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "orcish battleaxe":
        if ((sclass == "warrior") or (sclass == "berserker")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          if eqoffhand != "none":
            inventory.append(eqoffhand)
            eqoffhand = "none"
          inventory.remove(inve)
          print("Orcish battleaxe equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "megaton polearm":
        if ((sclass == "warrior") or (sclass == "berserker")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          if eqoffhand != "none":
            inventory.append(eqoffhand)
            eqoffhand = "none"
          inventory.remove(inve)
          print("Megaton polearm equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "silver twinblades":
        if ((sclass == "rogue") or (sclass == "skirmisher")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          if eqoffhand != "none":
            inventory.append(eqoffhand)
            eqoffhand = "none"
          inventory.remove(inve)
          print("Silver twinblades equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "shade's edge":
        if ((sclass == "warrior") or (sclass == "berserker")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Shade's Edge equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "brass knuckles":
        if ((sclass == "berserker") or (sclass == "monk")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Brass knuckles equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "bronze warhammer":
        if ((sclass == "warrior") or (sclass == "cleric")):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Bronze warhammer equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "heirloom whetstone":
        if (((sclass == "warrior") or (sclass == "rogue")) and ("heirloom whetstone" not in eqgear)):
          eqgear.append("heirloom whetstone")
          inventory.remove("heirloom whetstone")
          print("Heirloom whetstone equipped!")
          dmgbonus = dmgbonus + 1
        else:
          print("You can't equip that item!")
      elif inve == "scaling pickaxe":
        if "scaling pickaxe" not in eqgear:
          eqgear.append("scaling pickaxe")
          inventory.remove("scaling pickaxe")
          print("Scaling pickaxe equipped!")
          cspdb = cspdb + 1
        else:
          print("You can't equip that item!")
      elif inve == "leather gloves":
        if inve not in eqgear:
          eqgear.append(inve)
          inventory.remove(inve)
          print("leather gloves equipped!")
          atkbonus = atkbonus + 2
        else:
          print("You can't equip that item!")
      elif inve == "gambler's trinket":
        if "gambler's trinket" not in eqgear:
          eqgear.append(inve)
          inventory.remove(inve)
          print("Gambler's trinket equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "shiv":
        if "shiv" not in eqgear:
          eqgear.append(inve)
          inventory.remove(inve)
          print("Shiv equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "ballista drive":
        if ((inve not in eqgear) and (eqweapon in rangedweapons)):
          eqgear.append(inve)
          inventory.remove(inve)
          print("Ballista drive equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "reload crank":
        if ((inve not in eqgear) and (eqweapon in rangedweapons)):
          eqgear.append(inve)
          inventory.remove(inve)
          print("Reload crank equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "heavytip quiver":
        if ((inve not in eqgear) and (eqweapon in rangedweapons)):
          if "stalker's quiver" in eqgear:
            eqgear.remove("stalker's quiver")
            bowbonus -= 1
            invis = 0
            inventory.append("stalker's quiver")
          eqgear.append(inve)
          inventory.remove(inve)
          bowbonus += 1
          print("Heavytip quiver equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "stalker's quiver":
        if ((inve not in eqgear) and (eqweapon in rangedweapons)):
          if "heavytip quiver" in eqgear:
            eqgear.remove("heavytip quiver")
            bowbonus -= 1
            inventory.append("heavytip quiver")
          eqgear.append(inve)
          inventory.remove(inve)
          bowbonus += 1
          invis = 1
          print("Stalker's quiver equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "amulet of life":
        if inve not in eqgear:
          eqgear.append(inve)
          inventory.remove(inve)
          maxhp += 5
          print("Amulet of life equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "sigil of night":
        if inve not in eqgear:
          eqgear.append(inve)
          inventory.remove(inve)
          print("Sigil of Night equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "ballistic spines":
        if inve not in eqgear:
          eqgear.append(inve)
          inventory.remove(inve)
          print("Ballistic spines equipped!")
        else:
          print("You can't equip that item!")
      elif inve == "iron sword":
        if sclass == "warrior" or sclass == "berserker" or sclass == "skirmisher":
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("iron sword equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "steel dagger":
        if (sclass == "rogue") or (sclass == "skirmisher"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Steel dagger equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "rusty dagger":
        if (sclass == "rogue") or (sclass == "skirmisher"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Rusty dagger equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "shadow knife":
        if (sclass == "rogue") or (sclass == "skirmisher"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Shadow knife equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "bronze dagger":
        if (sclass == "rogue") or (sclass == "skirmisher"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Bronze dagger equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "old boots":
        if eqgreaves == "old boots":
          ac = ac - 1
        if eqgreaves == "iron greaves":
          ac = ac - 2
          maxhp = maxhp - 1
          maxhp = maxhp - 1
        if eqgreaves == "colorborite greaves":
          ac = ac - 3
          maxhp = maxhp - 3
        if eqgreaves != "none":
          inventory.append(eqgreaves)
        eqgreaves = inve
        inventory.remove(inve)
        print("Old boots equipped!")
        ac = ac + 1
      elif inve == "basic staff":
        if sclass == ("cleric") or sclass == ("druid") or sclass == ("mage"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Basic staff equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "lifedrain staff":
        if sclass == ("cleric") or sclass == ("druid") or sclass == ("mage"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Lifedrain staff equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "leafy staff":
        if (sclass == "cleric") or (sclass == "druid") or (sclass == "mage"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Leafy staff equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "verdant staff":
        if (sclass == "cleric") or (sclass == "druid") or (sclass == "mage"):
          if eqweapon != "none":
            inventory.append(eqweapon)
          eqweapon = inve
          inventory.remove(inve)
          print("Verdant staff equipped!")
        else:
          print("You can't equip that weapon!")
      elif inve == "iron greaves":
        if eqgreaves == "old boots":
          ac = ac - 1
          maxhp = maxhp - 1
        if eqgreaves == "colorborite greaves":
          ac = ac - 3
          maxhp = maxhp - 3
        if eqgreaves == "iron greaves":
          ac = ac - 2
          maxhp = maxhp - 1
        if eqgreaves != "none":
          inventory.append(eqgreaves)
        eqgreaves = inve
        inventory.remove(inve)
        print("Iron greaves equipped!")
        ac = ac + 2
        maxhp = maxhp + 1
      elif inve == "coloborite greaves":
        if eqgreaves == "old boots":
          ac = ac - 1
        if eqgreaves == "iron greaves":
          ac = ac - 2
          maxhp = maxhp - 1
        if eqgreaves == "colorborite greaves":
          ac = ac - 3
          maxhp = maxhp - 3
        if eqgreaves != "none":
          inventory.append(eqgreaves)
        eqgreaves = inve
        inventory.remove(inve)
        print("Coloborite greaves equipped!")
        ac = ac + 3
        maxhp = maxhp + 3
      elif inve == "scale mail":
        eqremove('armor')
        eqarmor = inve
        inventory.remove(inve)
        print("Iron plate equipped!")
        ac = ac + 4
        maxhp = maxhp + 3
        DR = DR + 1
      elif inve == "iron plate":
        eqremove('armor')
        eqarmor = inve
        inventory.remove(inve)
        print("Iron plate equipped!")
        ac = ac + 3
        maxhp = maxhp + 2
      elif inve == "leather vest":
        if eqarmor == "iron plate":
          ac = ac - 3
          maxhp = maxhp - 2
        if eqarmor == "leather vest":
          ac = ac - 2
          maxhp = maxhp - 1
          rangedDR = rangedDR - 1
        if eqarmor != "none":
          inventory.append(eqarmor)
        eqarmor = inve
        inventory.remove(inve)
        print("Leather vest equipped!")
        ac = ac + 2
        rangedDR = rangedDR + 1
        maxhp = maxhp + 1
      elif inve == "iron helm":
        if eqhelm == "iron helm":
          ac = ac - 1
        if eqhelm == "outlaw bandana":
          dmgbonus = dmgbonus - 1
          knifebonus = knifebonus - 2
        if eqhelm != "none":
          inventory.append(eqhelm)
        eqhelm = inve
        inventory.remove(inve)
        print("Iron helm equipped!")
        ac = ac + 1
      elif inve == "outlaw bandana":
        if ((sclass == "rogue") or (sclass == "skirmisher") or (sclass == "bowman")):
          if eqhelm == "iron helm":
            ac = ac - 1
          if eqhelm == "outlaw bandana":
            dmgbonus = dmgbonus - 1
            knifebonus = knifebonus - 2
          if eqhelm != "none":
            inventory.append(eqhelm)
          eqhelm = inve
          inventory.remove(inve)
          print("Outlaw bandana equipped!")
          knifebonus = knifebonus + 2
          dmgbonus = dmgbonus + 1
        else:
          print("You can't equip that!")
      elif inve == "wooden shield":
        if ((eqweapon != "orcish battleaxe") and (eqweapon != "silver twinblades")):
          if eqoffhand != "none":
            inventory.append(eqoffhand)
          eqoffhand = inve
          inventory.remove(inve)
          print("Wooden shield equipped!")
        else:
          print("You can't equip a shield while you're holding a two-handed weapon!")
      elif inve == "scroll of night":
        if (sclass == "druid") or (sclass == "mage") or (sclass == "cleric"):
          eqoffhand = inve
          inventory.remove(inve)
          print("Scroll of Night equipped!")
        else:
          print("You can't equip that item!")
      else:
        print("That item is unequippable.")
      time.sleep(2)
  if invc == ("info"):
    print("Which item would you like to learn about?")
    invi = input("> ").lower()
    if ((invi in inventory) or (invi == eqweapon) or (invi == eqoffhand) or (invi == eqhelm) or (invi == eqarmor) or (invi == eqgreaves)):
      if invi == "heirloom whetstone":
        print("")
        print("[ROGUE, WARRIOR, SKIRMISHER]")
        print("An very high quality whetstone that looks extremely weathered.")
        print("|Sold by|: rogue vendor.")
        print("Improves blade damage and throwing knife bleed.")
        print("")
        time.sleep(2)
      elif invi == "goblin sword":
        print("")
        print("[BERSERKER, WARRIOR, SKIRMISHER]")
        print("A decently strong sword, made of old oxidized copper scraps, rib bones, maple wood, and hide. ")
        print("|Dropped by|: goblins at a 12.5% chance.")
        print("Sometimes makes the enemies bleed.")
        print("")
        time.sleep(2)
      elif invi == "goblin war paint":
        print("")
        print("A magically imbued face paint to boost damage.")
        print("|Dropped by|: goblins at a 5% chance.")
        print("(Consumable item)")
        print("")
        time.sleep(2)
      elif invi == "small health potion":
        print("")
        print("A small vial of shimmering scarlet fluid. [Heals 2-3 HP]")
        print("|Sold by|: merchant in Falezrin")
        print("(Consumable item)")
        print("")
        time.sleep(2)
      elif invi == "health potion":
        print("")
        print("A modest flask of shimmering scarlet fluid. [Heals 4-6 HP]")
        print("|Sold by|: merchant in Falezrin")
        print("(Consumable item)")
        print("")
        time.sleep(2)
      elif invi == "manaspark potion":
        print("")
        print("A round flask of gleaming blue fluid. [Has a chance to restore a spell.]")
        print("|Sold by|: merchant in Falezrin")
        print("(Consumable item)")
        print("")
        time.sleep(2)
      elif invi == "fireball tome":
        print("")
        print("A magical book that can teach you the fireball spell.")
        print("|Sold by|: merchant in Falezrin.")
        print("(Consumable item)")
        print("")
        time.sleep(2)
      elif invi == "striker blade":
        print("")
        print("[BERSERKER, WARRIOR, SKIRMISHER]")
        print("A crude yet strong sword, made of darksteel scraps, rib bones, oak wood, and steelhide. ")
        print("|Dropped by|: goblin strikers at a 7.14% chance.")
        print("Sometimes crits, dealing a lot more damage and bleed.")
        print("")
        time.sleep(2)
      elif invi == "skirmisher headband":
        print("")
        print("[SKIRMISHER]")
        print("A headband tied tight to help improve your focus as a skirmisher.")
        print("|Starting Skirmisher headgear.|")
        print("")
        time.sleep(2)
      elif invi == "verdant scimitar":
        print("")
        print("[DRUID, WARRIOR, SKIRMISHER]")
        print("An ancient scimitar unearthed in the Verdant Plains.  The blade is made out of a tinted pale green glassy substance and has a lime green glowing gem embedded near the hilt, which is made of dark oak wood with an emerald pommel.  The crossguard is entwined with blossoming vines.")
        print("|Found by|: gathering in the wilds of the Verdant Plains at a 0.25% chance.")
        print("Sometimes boosts your magic bonus or the damage it deals.")
        print("The user can call on the power of the wilds once per battle.")
        print("")
        time.sleep(2)
      elif invi == "orcish battleaxe":
        print("")
        print("[BERSERKER, WARRIOR]")
        print("A brutal battleaxe made of a foreign sturdy stone and reinforced with smelted iron edges and bars.  The edge is nicked in several places.")
        print("|Dropped by|: orcs at a 10% chance.")
        print("Takes up an offhand slot.")
        print("")
        time.sleep(2)
      elif invi == "megaton polearm":
        print("")
        print("[BERSERKER, WARRIOR]")
        print("A masive battleaxe made of a foreign sturdy stone, strengthened with smelted edges and centered with a glowing gem.  The edge is nicked in several places.")
        print("|Crafted item|")
        print("Takes up an offhand slot.")
        print("")
        time.sleep(2)
      elif invi == "bronze sword":
        print("")
        print("[BERSERKER, WARRIOR, SKIRMISHER]")
        print("A simple old bronze sword.")
        print("|Starting warrior/berserker weapon|")
        print("")
        time.sleep(2)
      elif invi == "brass knuckles":
        print("")
        print("[BERSERKER, MONK]")
        print("Joined rings of brass to improve your punching prowess.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "basic staff":
        print("")
        print("[DRUID, CLERIC, MAGE]")
        print("An ancient, twisted branch full of magic.")
        print("|Starting druid/cleric/mage weapon|")
        print("")
        time.sleep(2)
      elif invi == "leafy staff":
        print("")
        print("[DRUID, CLERIC, MAGE]")
        print("An fresh, twisted branch full of magic.")
        print("Hitting enemies with it buffs your magic ability temporarily.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "bronze dagger":
        print("")
        print("[ROGUE, SKIRMISHER]")
        print("A polished dagger made of fine bronze.")
        print("|Starting rogue/skirmisher weapon|")
        print("")
        time.sleep(2)
      elif invi == "shadow knife":
        print("")
        print("[ROGUE, SKIRMISHER]")
        print("A dark blade made of unknown material, from another realm.")
        print("|Arrowfall crossover event|")
        print("")
        time.sleep(2)
      elif invi == "book of shadows":
        print("")
        print("A dark tome engraved with purple runes. Even the air seems darker around it. Reaccess the crossover once it is over.")
        print("|Arrowfall crossover event|")
        print("")
        time.sleep(2)
      elif invi == "hails of arrows tome":
        print("")
        print("[MAGE, DRUID]")
        print("A green tome engraved with yellow arrow-shaped runes. Be a bowman, as a mage.")
        print("|Arrowfall crossover event|")
        print("")
        time.sleep(2)
      elif invi == "lifedrain staff":
        print("")
        print("[MAGE, DRUID, CLERIC]")
        print("A dark staff, able to suck the life from your enemies.")
        print("|Arrowfall crossover event|")
        print("")
      elif invi == "oaken longbow":
        print("")
        print("[BOWMAN]")
        print("A fine bow made of high quality oak wood.")
        print("|Starting bowman weapon|")
        print("")
        time.sleep(2)
      elif invi == "oaken crossbow":
        print("")
        print("[BOWMAN]")
        print("A well-made crossbow made of high quality oak wood.  Requires reloading.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "stormbolt ballista":
        print("")
        print("[BOWMAN]")
        print("A reinforced crossbow, strong enough to punch a hole through a well-masoned wall.  Requires reloading.")
        print("|Crafted item.|")
        print("")
        time.sleep(2)
      elif invi == "steel dagger":
        print("")
        print("[ROGUE, SKIRMISHER]")
        print("A polished dagger made of fine steel.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "rusty dagger":
        print("")
        print("[ROGUE, SKIRMISHER]")
        print("An ancient oxidized dagger. Weakens opponents on skirmisher strikes, or if you are a rogue.")
        print("|Dropped by: Outlaws at a 10% chance|")
        print("")
        time.sleep(2)
      elif invi == "weathered blade":
        print("")
        print("[ROGUE, SKIRMISHER, WARRIOR]")
        print("An ancient blade adorned with a gem in its core.  Not a dagger, not a machete, but not a shortsword - something in between.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "silver twinblades":
        print("")
        print("[ROGUE, SKIRMISHER]")
        print("The signature daggers of an infamous assassin.  Extremely shiny and even more sharp.")
        print("Each blade makes the target bleed.")
        print("|Dropped by: Azaerol at a 25% chance|")
        print("")
        time.sleep(2)
      elif invi == "shade's edge":
        print("")
        print("[WARRIOR, BERSERKER]")
        print("The signature blade of an infamous assassin.  Made of a mysterious dark metal and covered in runes.")
        print("Hits stronger based on how good you are at avoiding attacks.")
        print("|Dropped by: Azaerol at a 25% chance|")
        print("")
        time.sleep(2)
      elif invi == "scroll of night":
        print("")
        print("[CLERIC, MAGE, DRUID]")
        print("A mysterious scroll carried by an infamous assassin.  Worn and ripped in spots, it still brims with magic.")
        print("Fires a pulse of dark energy whenever using magic.")
        print("|Dropped by: Azaerol at a 25% chance|")
        print("")
        time.sleep(2)
      elif invi == "sigil of night":
        print("")
        print("A mysterious tiara worn by an infamous assassin.  A strange symbol of a moon and a star is on the front, how interesting...")
        print("Small boost to all stats at nighttime.")
        print("|Dropped by: Azaerol at a 25% chance|")
        print("")
        time.sleep(2)
      elif invi == "scrap metal":
        print("")
        print("A scrap of goblin metal - seems to be composed of a medley of other metals, very strong.")
        print("|Dropped by: Goblin Strikers at a 50% chance|")
        print("")
        time.sleep(2)
      elif invi == "amulet of life":
        print("")
        print("A mysterious chain attached to a pulsating vibrant green emerald.  The pulse seems to resonate within you, infusing you with vigor.")
        print("+5 maximum HP.")
        print("|Dropped by: Orcish Shamans at a 5% chance|")
        print("")
        time.sleep(2)
      elif invi == "shaman's staff":
        print("")
        print("[MAGE, CLERIC]")
        print("An old oaken staff, with an emerald at the end.")
        print(lime + "[PERK]: Shamanfire" + normal + " || Makes your fireball spells have less inital damage but more damage over time.")
        print("|Dropped by: Orcish Shamans at a 6.66% chance|")
        print("")
        time.sleep(2)
      elif invi == "heavytip quiver":
        print("")
        print("A bulky quiver loaded with heavy arrows.")
        print("Boosts ranged accuracy and damage.")
        print("|Dropped by: Goblin Snipers at a 10% chance|")
        print("")
        time.sleep(2)
      elif invi == "stalker's quiver":
        print("")
        print("A thin purple quiver loaded with barbed arrows. Silences your footsteps, covers your trace.")
        print("Boosts ranged accuracy and damage.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "reload crank":
        print("")
        print("An improved reloading crank to boost your crossbow efficiency, assembled from goblin scrap and sturdy wood.")
        print("25% at the end of each turn to automatically reload.")
        print("|Dropped by: Goblin Snipers at a 8.33% chance|")
        print("")
        time.sleep(2)
      elif invi == "ballista drive":
        print("")
        print("A simple yet well designed contraption that uses a small piston and elastic force to reload your crossbow immediately after firing out of combat.")
        print("- Instant reload after sniping. -")
        print("|Quest item - Goblin Siege|")
        print("")
        time.sleep(2)
      elif invi == "ballistic spines":
        print("")
        print("A simple yet well designed contraption that uses small pistons and elastic force to propel forth deadly spines after hitting your foe.")
        print("- Injury bonus to melee attacks. -")
        print("|Quest item - Goblin Siege|")
        print("")
        time.sleep(2)
      elif invi == "nightwave rod":
        print("")
        print("A mysterious fishing rod carried by an infamous assassin.  Flowing with umbral energy, the silver hook is sure to lure something out of any river's depths.")
        print("|Dropped by: Azaerol at a 10% chance|")
        print("")
        time.sleep(2)
      elif invi == "wooden shield":
        print("")
        print("[WARRIOR]")
        print("A sturdy wooden shield, with a shiny polished bronze rim.")
        print("|Starting warrior shield.|")
        print("")
        time.sleep(2)
      elif invi == "bronze warhammer":
        print("")
        print("[WARRIOR, CLERIC]")
        print("A fine one-handed warhammer made of bronze.  Perfect acoustics when struck on metal.")
        print("|Starting cleric weapon (found in inventory)|")
        print("")
        time.sleep(2)
      elif invi == "iron sword":
        print("")
        print("[WARRIOR, BERSERKER, SKIRMISHER]")
        print("A fine one-handed sword made of freshly forged iron.  Nicely weighted.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "shiv":
        print("")
        print("A small spike on a hilt, perfect for counterattacks.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "outlaw bandana":
        print("")
        print("[ROGUE, SKIRMISHER]")
        print("A hastily tied bandana made of ragged cloth and vivid dyes, pressed from various plants.")
        print("|Dropped by: Outlaws at a 6.66% chance.|")
        print("")
        time.sleep(2)
      elif invi == "scaling pickaxe":
        print("")
        print("A fine hand pick, designed perfectly to aid in climbing.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "map":
        print("")
        print("A map of Iloraea, try to [USE] it! Will expand much more as the game is further developed.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "leather gloves":
        print("")
        print("Fine gloves, useful for ")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "gambler's trinket":
        print("")
        print("A pair of fuzzy dice, attached by a piece of twine.")
        print("After each round of combat while equipped, it may cause you to lose or gain health.")
        print("|Obtained by winning a game of dice.|")
        print("")
        time.sleep(2)
      elif invi == "iron helm":
        print("")
        print("A fine helmet fresh from the forge.  Decent quality.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "iron plate":
        print("")
        print("A fine chestplate fresh from the forge.  Decent quality.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "scale mail":
        print("")
        print("A fine chestplate made of overlapping etal plates in a scaled fashion, reinforced with shiny fish scales.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "phalanx polearm":
        print("")
        print("[WARRIOR, SKIRMISHER]")
        print("A defensive spear, simply an improved dagger well-fastened to the end of a pole. Boosts counterattack damage, and has a chance to block during any attack.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "topaz spellslinger":
        print("")
        print("[MAGE, DRUID, CLERIC")
        print("A magic staff, brimming with energy. Invokes magic through the gleaming orange topaz gem lodged at the end of the staff.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "verdant staff":
        print("")
        print("[MAGE, DRUID, CLERIC")
        print("A magic staff, brimming with the soul of the forest. Heals you, and boosts magic with every pulse.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "leather vest":
        print("")
        print("A shockingly solid vest made of fine leather.  Seems like it could be useful in making stronger armor.")
        print("|Dropped by orcs at an 8.33% chance|")
        print("")
        time.sleep(2)
      elif invi == "keystone skypick":
        print("")
        print("A climbing pick turned keystone item, might be able to unlock something on a cliffside...")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "bronze scimitar":
        print("")
        print("[WARRIOR, DRUID, BERSERKER, SKIRMISHER]")
        print("A swift and effective curved sword, extremely sharp.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "warlord's cleaver":
        print("")
        print("[WARRIOR, BERSERKER, SKIRMISHER]")
        print("A razor-edged blade perfect for deep cuts on heavy armored opponents.")
        print("|Crafted item|")
        print("")
        time.sleep(2)
      elif invi == "iron greaves":
        print("")
        print("A fine set of greaves fresh from the forge.  Decent quality.")
        print("|Bought from merchant|")
        print("")
        time.sleep(2)
      elif invi == "mysterious letter":
        print("")
        print("A letter addressed to Matt. Has a strange seal, the emblem almost seems to resemble a burning candle with a triangle surrounding it...")
        print("|Quest item|")
        print("")
        time.sleep(2)
      elif invi == "tomato":
        print("")
        print("A fat, juicy tomato.  Fresh from the harvest.")
        print("")
        time.sleep(2)
      elif invi == "bread":
        print("")
        print("A fine loaf of bread.  Fresh from the mill.")
        print("")
        time.sleep(2)
      elif invi == "milk":
        print("")
        print("A small flask of milk.  Perfect with cereal.")
        print("")
        time.sleep(2)
      elif invi == "oak branches":
        print("")
        print("A handful of somewhat thick sturdy dark oak branches.  Mostly straight, might be useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "old fiddle":
        print("")
        print("An old fiddle, given to you by a kind musician.")
        print("")
        time.sleep(2)
      elif invi == "blossom vines":
        print("")
        print("A loose pile of emerald-green vines with pink flowering blossoms that have golden yellow anthers.  Pretty strong, might be useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "skygrass cluster":
        print("")
        print("A bundle of tallgrass.  The grass is a strange shade of pale blue.")
        print("")
        time.sleep(2)
      elif invi == "glow lichen":
        print("")
        print("Bioluminescent algae streaked with mycelium.")
        print("")
        time.sleep(2)
      elif invi == "zinc powder":
        print("")
        print("A small satchel of strange metallic dust.")
        print("")
        time.sleep(2)
      elif invi == "copper ore":
        print("")
        print("A shiny piece of bronze copper poking out of a piece of stone.  Looks somewhat high quality, might be useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "tin ore":
        print("")
        print("A shiny piece of bronze tin poking out of a piece of stone.  Looks somewhat high quality, might be useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "iron ore":
        print("")
        print("A shiny piece of silvery iron poking out of a piece of stone.  Looks somewhat high quality, might be useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "iron ingot":
        print("")
        print("A shiny piece of silvery iron smelt into a bar.  Useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "copper ingot":
        print("")
        print("A shiny piece of shimmering copper smelt into a bar.  Useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "bronze ingot":
        print("")
        print("A shiny piece of shiny bronze smelt into a bar.  Useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "coloborite ingot":
        print("")
        print("A shiny piece of a mysterious metal smelt into a bar. Looks like very dark silver, extremely strong. Useful for crafting.")
        print("")
        time.sleep(2)
      elif invi == "pyrite":
        print("")
        print("A shiny piece of fool's gold.  Maybe you could trick someone into buying it...")
        print("")
        time.sleep(2)
      elif invi == "amber":
        print("")
        print("A clump of fossilized amber.  Could be quite valuable, especially to archaeologists...")
        print("")
        time.sleep(2)
      elif invi == "invisibility potion":
        print("")
        print("Turns you invisible. Enemies will have no chance of spotting you, that is until you start fighting them.")
        print("")
        time.sleep(2)
      elif invi == "topaz":
        print("")
        print("A gleaming, translucent, orange semi-precious gem.  Quite expensive, very shiny.")
        print("")
        time.sleep(2)
      elif invi == "raw cod":
        print("")
        print("A fresh tannish-grey fish, caught by you!")
        print("")
        time.sleep(2)
      elif invi == "raw salmon":
        print("")
        print("A fresh green and red fish, caught by you!")
        print("")
        time.sleep(2)
      elif invi == "raw catfish":
        print("")
        print("A fresh tannish fish with dragonlike whiskers.")
        print("")
        time.sleep(2)
      elif invi == "fungal spores":
        print("")
        print("A strange clump of glowing yellow spores. Must've gotten picked up somehow in the Darkspore Forests.")
        print("")
        time.sleep(2)
      elif invi == "raw voidfish":
        print("")
        print("A deep black and purple eel-esque fish, caught in the darkest waters.")
        print("")
        time.sleep(2)
      elif invi == "filleted cod":
        print("")
        print("A filleted cod.  Might be edible, but it's still raw.")
        print("")
        time.sleep(2)
      elif invi == "filleted salmon":
        print("")
        print("A filleted salmon.  Might be edible, but it's still raw.")
        print("")
        time.sleep(2)
      elif invi == "fish scales":
        print("")
        print("The scales of a fish!  Might be useful for crafting certain pieces of armor.")
        print("")
        time.sleep(2)
      elif invi == "map":
        print("")
        print("An old raggedy map, try looking at it with [use]!")
        print("")
        time.sleep(2)
      elif invi == "bestiary":
        print("")
        print("A small notebook documenting your notes on different species, try looking at it with [use]!")
        print("")
        time.sleep(2)
      else:
        print("No info for that item yet, sorry...")
        time.sleep(1)
    else:
      print("That's not an item! At least, not one you have...")
      time.sleep(1)
      invf()
    print("Which item would you like info about?")
  if invc == ("exit"):
    global location
    locationreturn()
  if invc == ("use"):
    print("What item would you like to use?")
    time.sleep(2)
    inva = input("> ").lower()
    if inva in inventory:
      if inva == "goblin war paint":
        gwpcharge = 3
        gwpy = "yes"
        print("Goblin war paint used!")
        time.sleep(2)
        inventory.remove("goblin war paint")
      elif inva == "map":
        map()
      elif inva == "small health potion":
        healamount = random.randint(2, 3)
        hp += healamount
        if hp > maxhp:
          hp = maxhp
        print("You healed " + red + str(healamount) + "HP" + white + "!")
        time.sleep(1)
        print("")
      elif inva == "manaspark potion":
        spellr = maxspells[random.randint(0, len(maxspells) - 1)]
        if spellr not in spells:
          spells.append(spellr)
          print("You restored your " + blue + spellr + "spell" + white + "!")
        else:
          print("Your manaspark potion tastes good, but nothing really happens.")
        time.sleep(1)
        print("")
      elif inva == "invisibility potion":
        invis = 1
      elif inva == "health potion":
        healamount = random.randint(4, 6)
        hp += healamount
        if hp > maxhp:
          hp = maxhp
        print("You healed " + red + str(healamount) + "HP" + white + "!")
        time.sleep(1)
        print("")
      elif inva == "bestiary":
        bestiary()
      elif inva == "fireball tome":
        if (sclass == "mage") or (sclass == "cleric"):
          if "fireball" not in maxspells:
            maxspells.append("fireball")
            spells.append("fireball")
            print("You let the magic from the tome surge through you.  You can now use the [FIREBALL] spell.")
            time.sleep(1)
          else:
            print("You already know this spell!")
        else:
          print("You can't learn this spell!")
        time.sleep(1)
        print("")
        inventory.remove("fireball tome")
      elif inva == "hail of arrows tome":
        if (sclass == "mage") or (sclass == "druid"):
          if "hail of arrows" not in maxspells:
            maxspells.append("hail of arrows")
            spells.append("hail of arrows")
            print("You let the magic from the tome surge through you.  You can now use the [HAIL OF ARROWS] spell.")
            time.sleep(1)
          else:
            print("You already know this spell!")
        else:
          print("You can't learn this spell!")
        time.sleep(1)
        print("")
        inventory.remove("hail of arrows tome")
      else:
        print("That's not a consumable item!")
        time.sleep(2)
    else:
      print("You don't have that item, if it exists anyhow...")
      time.sleep(2.5)
    invf()
  else:
    invf()

def map():
  print(" ████████ |'''''| ██████████████████████")
  print(" ████████ |Oak S| ██████████████████████")
  print(" ████████ |'''''''''''| ████████████████")
  print(" ████████ |           | ████████████████")
  print(" ████████ |           | ████████████████")
  print(" ████████ | Darkspore | ████████████████")
  print(" ████████ | Forests   | ████████████████")
  print(" ████████ |           | ████████████████")
  print(" ████████ |'''''|     |'''''| ██████████")
  print(" ████████ |     |_____|     | ██████████")
  print(" ███ |''''      |Falez|     '''''|'''''''")
  print(" ███ | Savage   |rin  |  Verdant |Sky Pr|")
  print("|''''| Steppes  ''''''|  Hills   |______|")
  print("|____|_____           |          |Shr Ou|")
  print("|  Sunset  |'''''''''''''''''''''''''''''")
  print("|  Mesa    | ███████████████████████████")
  print("'''''|'''''' ███████████████████████████")
  print("_____| █████████████████████████████████")
  time.sleep(1)
  print("")
  print("[ENTER] to continue.")
  wait = input()
  print("")
  locationreturn()

def eqremove(type):
  global eqarmor, eqgreaves, eqhelm, eqoffhand, ac, maxhp, hp, DR, magicDR, rangedDR, dmgbonus, knifebonus
  if type == "armor":
    if eqarmor == "iron plate":
      ac = ac - 3
      maxhp = maxhp - 2
    elif eqarmor == "leather vest":
      ac = ac - 2
      maxhp = maxhp - 1
      rangedDR = rangedDR - 1
    elif eqarmor == "scale mail":
      ac = ac - 4
      maxhp = maxhp - 3
      DR = DR - 1
    if eqarmor != "none":
      inventory.append(eqarmor)
  elif type == "helm":
    if eqhelm == "iron helm":
      ac = ac - 1
    elif eqhelm == "outlaw bandana":
      dmgbonus = dmgbonus - 1
      knifebonus = knifebonus - 2
    if eqhelm != "none":
      inventory.append(eqhelm)
  elif type == "greaves":
    if eqgreaves == "old boots":
      ac = ac - 1
    elif eqgreaves == "iron greaves":
      ac = ac - 2
      maxhp = maxhp - 1
    if eqgreaves != "none":
      inventory.append(eqgreaves)
  if maxhp < hp:
    hp = maxhp

def taxi():
  global location, citiesbeento, gc
  dt(0.02, '"Hey, it\'s your local taxi driver here, need a ride? Only 1 gold!"')
  time.sleep(1)
  las(citiesbeento)
  taxride = input("> ").lower()
  if taxride == "falezrin":
    gc -= 1
    timeshift(1, 0)
    Falezrinentry()
  elif taxride == "stone's edge":
    gc -= 1
    timeshift(1, 0)
    StoneEntry()
  elif taxride == "shrouded outpost":
    gc -= 1
    timeshift(1, 0)
    SOentry()
  else:
    dt(0.02, '"Sorry, can\'t help you get there."')
    locationreturn()

def nearestcity():
  global location
  FalNear = ["verdanthills1", "verdanthills2", "verdanthills4", "darksporeforest1","darksporeforest2", "darksporeforest3", "darksporeforest4","darksporeforest5", "darksporeforest6", "darksporeforest7","savagesteppe1", "savagesteppe2", "savagesteppe3", "savagesteppe4","savagesteppe5", "oakensanctuary13"]
  ShrNear = ["verdanthills3", "verdanthills5", "skygrassprairie1"]
  StoNear = ["savagesteppe6", "sunsetmesa1", "sunsetmesa2", "cloudedspires1"]
  if location in FalNear:
    Falezrinentry()
  elif location in ShrNear:
    SOentry()
  elif location in StoNear:
    StoneEntry()

def wildshape():
  global ac, wsac, wsmaxhp, wshp, wsatkbonus, atkbonus, wsdmgbonus, dmgbonus, wsweapon, eqweapon, maxhp, hp, wsyes, battleactions
  wsyes = "yes"
  wsatkbonus = atkbonus
  wsac = ac
  wsmaxhp = maxhp
  wshp = hp
  wsdmgbonus = dmgbonus
  wsweapon = eqweapon
  print("Would you like to become a bear or a wolf?")
  print("")
  shape = input("> ").lower()
  if shape == "wolf":
    print("You drop to all fours.  Feeling the aura of the wild flow through you, you change shape.  Seconds later, you are a wolf, full of ancient ferocity.")
    ac = 14
    eqweapon = "wolf claws"
    maxhp = 12
    hp = 12
    atkbonus = 3
    battleactions.remove("magic")
    battleactions.append("revert")
  elif shape == "bear":
    print("You drop to all fours.  Feeling a surge of primal power surge through you, you change shape.  Seconds later, you are a bear, full of ancient strength.")
    ac = 12
    eqweapon = "bear claws"
    maxhp = 15
    hp = 15
    atkbonus = 2
    battleactions.remove("magic")
    battleactions.append("revert")
  else:
    print("That's not something you can shapeshift into.")
    wildshape()

#injury mechanic
def injure(injtarget, num):
  global injury1, injury2, injury3
  injury1 += num

#attack rounds in combat
def attack(target):
  global enemy1ac, enemy2ac, enemy3ac, enemies, dmgbonus, atkbonus, eqweapon, eqgear, throwingknife, spells, verdantbonusa, verdantbonusb, verdantchargeyes, verdantcharge, maxhp, hp, ac, statusg1, injury1, injury2, injury3, enemy1dmgbonus, enemy2dmgbonus, enemy3dmgbonus, targeteden, monkbonus, leafybonus, action, rage, magicweapons, magicbonus, tac, av, wsac, wshp, wsmaxhp, wsweapon, wsatkbonus, wsdmgbonus, eqoffhand, bowbonus, knifebonus, rangedweapons, reload, loot, balch, bay, battleactions, pstr, majstr, minstr, bardboost, enemy1acc, enemy2acc, enemy3acc, statusb1, statusb2, statusb3, statusg1, statusg2, statusg3, burndur1, burndmg1, burndur2, burndmg2, burndur3, burndmg3, special1, special2, special3, verdantbonusa, verdantbonusb, verdantcharge, verdantchargeyes, skcombo, enemy1hp, enemy2hp, enemy3hp
  ach = 0
  while ach == 0:
    print("What would you like to do?")
    time.sleep(0.75)
    las(battleactions)
    action = input("> ").lower()
    if (action in battleactions):
      ach = 1
      if action == "ballista":
        balch = 3
        print("You fire the ballista.")
        target -= random.randint(5, 14)
        battleactions.remove('ballista')
      if action == "revert":
        print("You revert form.")
        ac = wsac
        maxhp = wsmaxhp
        hp = wshp
        eqweapon = wsweapon
        atkbonus = wsatkbonus
        dmgbonus = wsdmgbonus
        wsyes = "no"
        battleactions.append("magic")
        battleactions.remove("revert")
      if action == "knife throw":
        print("You expertly fling a throwing knife.")
        throwingknife = throwingknife - 1
        if throwingknife == 0:
          battleactions.remove("knife throw")
        if random.randint(1, 20) + atkbonus >= tac:
          if targeteden == 1:
            injure(injury1, 2)
          elif targeteden == 2:
            injure(injury2, 2)
          elif targeteden == 3:
            injure(injury3, 2)
          if "heirloom whetstone" in eqgear:
            if targeteden == 1:
              injure(injury1, 1)
            elif targeteden == 2:
              injure(injury2, 1)
            elif targeteden == 3:
              injure(injury3, 1)
          print("The throwing knife cuts the " + enemies[av] + ".")
        else:
          print("The knife misses.")
        print("You have " + str(throwingknife) + " throwing knifes left.")
        time.sleep(0.5)
      if action == "rage":
        if rage == "no":
          print("Anger washes through you.  You only see targets to kill and targets not to kill and feel nothing but pure, undiminished rage.")
          rage = "yes"
          ac = ac - 4
          atkbonus = atkbonus + 2
          dmgbonus = dmgbonus + 1
        elif rage == "yes":
          print("Your anger fades.")
          rage = "no"
          ac = ac + 4
          atkbonus = atkbonus - 2
          dmgbonus = dmgbonus - 1
      if action == "magic":
        print("Available spells: " + str(spells))
        print("If you have no available spells, say anything to deal a tiny bit of damage.")
        spellcast = input("> ").lower()
        if spellcast in spells:
          if spellcast == "wild shape":
            spells.remove("wild shape")
            wildshape()
          if spellcast == "thorn lash":
            print("A vicious, thorny green vine grows out of the ground and lashes at the "
              + enemies[av])
            if random.randint(1, 20) + magicbonus + 2 >= tac:
              print("The vine rakes the " + enemies[av] + "!")
              target -= random.randint(1, 5)
              if targeteden == 1:
                injure(injury1, 1)
              elif targeteden == 2:
                injure(injury2, 1)
              elif targeteden == 3:
                injure(injury3, 1)
            else:
              print("The vine darts forward and misses by barely an inch.")
            spells.remove("thorn lash")
          if spellcast == "hail of arrows":
            print('You raise your staff, and magic arrows rain upon your opponents from the sky.')
            enemy1hp -= random.randint(1, 9)
            enemy2hp -= random.randint(1, 9)
            enemy3hp -= random.randint(1, 9)
            injury1 += random.randint(1, 3)
            injury2 += random.randint(1, 3)
            injury3 += random.randint(1, 3)
          if spellcast == "fireball":
            print("Raising your staff and murmuring ancient words, you propel a mighty fireball at the "
              + enemies[av] + "!")
            if random.randint(1, 20) + magicbonus + 5 >= tac:
              if eqweapon != "shaman's staff":
                print("The fireball connects with a mighty explosion!")
                target -= (random.randint(2, 7) + magicbonus * 2)
                enemy1hp -= (random.randint(2, 6) + magicbonus)
                enemy2hp -= (random.randint(2, 6) + magicbonus)
                enemy3hp -= (random.randint(2, 6) + magicbonus)
                statusb1 = "burn"
                burndur1 = 3
                burndmg1 = 2
                statusb2 = "burn"
                burndur2 = 3
                burndmg2 = 2
                statusb3 = "burn"
                burndur3 = 3
                burndmg3 = 2
              else:
                print("The glowing green fireball connects and unleashes a torrent of spirit flame.")
                target -= (random.randint(1, 3) + magicbonus * 2)
                enemy1hp -= (random.randint(1, 3) + magicbonus)
                enemy2hp -= (random.randint(1, 3) + magicbonus)
                enemy3hp -= (random.randint(1, 3) + magicbonus)
                statusb1 = "burn"
                burndur1 = 5
                burndmg1 = random.randint(4, 5)
                statusb2 = "burn"
                burndur2 = 5
                burndmg2 = random.randint(4, 5)
                statusb3 = "burn"
                burndur3 = 5
                burndmg3 = random.randint(4, 5)
            else:
              print("The fireball misses, too far out of your enemies' range.")
            spells.remove("fireball")
          if spellcast == "magic missile":
            print("You shoot an orb of force.")
            if random.randint(1, 20) + magicbonus + 5 >= tac:
              print("The orb strikes the " + enemies[av] + "!")
              target -= random.randint(2, 5)
            else:
              print("The orb misses.")
            spells.remove("magic missile")
          if spellcast == "heal i":
            print("You feel revitalized.")
            hp = hp + random.randint(1, 5) + magicbonus
            if hp > maxhp:
              hp = maxhp
            print("You are at " + str(hp) + "HP!")
            spells.remove("heal I")
          #psionic blast
          if spellcast == "psionic blast": #insane damage, does self damage
              print("You focus your mind and unleash a wave of psychic energy.")
              if random.randint(1, 20) + magicbonus + 5 >= tac:
                  print("The wave of psychic energy strikes the " + enemies[av] + "!")
                  target -= random.randint(8, 15) + magicbonus
                  hp -= random.randint(3, 6)
              else:
                  print("The wave of psychic energy misses.")
              spells.remove("psionic blast")
          #purge
          if spellcast == "purge":
            print("Holy energy spreads through you and out your extended palm.")
            target -= random.randint(1, 4)
            statusg1 = "none"
            spells.remove("purge")
          #scroll of the night
          if ((eqweapon in magicweapons) and ("scroll of night" in eqgear)):
            sharddmg = random.randint(1, 4) + magicbonus
            print("Your scroll fires a magic shard, dealing " + sharddmg +                  white + " damage!")
            target -= sharddmg
        elif eqweapon == "angelic warhammer": #not a spell, but a special attack (still counts as magic)
            print("You raise your warhammer and call upon the heavens to smite your enemies.")
            if random.randint(1, 20) + magicbonus + 10 >= tac: #high stakes
                print("The heavens answer your call, and a bolt of divine energy strikes the " + enemies[av] + "!")
                target -= random.randint(5, 10) + magicbonus
            else:
                print("The heavens do not answer your call.")
        else:
          print("Magic sparks feebly from your hand and strikes the " +                enemies[av] + ".")
          target -= (1 + magicbonus)
        if ((eqweapon in magicweapons) and ("scroll of night" in eqgear)):
          sharddmg = random.randint(1, 2) + magicbonus
          print("Your scroll fires a magic shard, dealing " + sharddmg +                white + " damage!")
          target -= sharddmg
      if action == "attack":
        miss = 0
        cst = 0
        if reload == 0:
          if eqweapon in rangedweapons:
            atkbonus += bowbonus
          if sclass == "skirmisher":
            print("Which style of attack would you like to perform?")
            print("[Standard/Heavy/Combo/Swift]")
            skirmsty = input("> ").lower()
            if skirmsty == "heavy":
              atkbonus -= 2
              dmgbonus += 3
              skcombo = 0
            elif skirmsty == "swift":
              atkbonus += 2
              dmgbonus -= 1
              skcombo = 0
            elif skirmsty == "combo":
              if skcombo < 5:
                atkbonus += skcombo
                dmgbonus += (skcombo - 1)
                skcombo += 1
              cst = 0
              if ((random.randint(1, 20) + skcombo) >= 17):
                cst = 1
            else:
              skcombo = 0
          if (((eqweapon not in magicweapons) and
               ((random.randint(1, 20) + atkbonus) >= tac)) or ((eqweapon in magicweapons) and
                  ((random.randint(1, 20) + magicbonus) >= tac))):
            if cst == 1:
              if target > 0:
                ach = 0
            if eqweapon == "verdant scimitar":
              if verdantcharge == 1:
                print("Your special is ready. Would you like to use it?")
                choicevspec = input("> ").lower()
                if ((choicevspec == "yes") or (choicevspec == "y")):
                  print("You call on the power of the wilds around you.  The entire blade of your scimitar flashes bright green, then giant dull green thorny vines lash all of your enemies.")
                  target -= (random.randint(5, 10) + (magicbonus * 2))
                  injure(injury1, 3)
                  if targeteden == 1:
                    enemy1dmgbonus = enemy1dmgbonus - 1
                  if targeteden == 2:
                    enemy2dmgbonus = enemy2dmgbonus - 1
                  if targeteden == 3:
                    enemy3dmgbonus = enemy3dmgbonus - 1
                else:
                  target -= (random.randint(5, 8) + dmgbonus)
                  print("The glowing green gem flashes brighter as you prepare to strike.  The blade seems to dance as it makes an elegant cleave towards your enemy.")
                  if random.randint(1, 3) == 3:
                    print("A surge of wild energy courses into the blade, coalesced out of the air above you.")
                    time.sleep(2)
                    if verdantbonusa > 4:
                      magicbonus = magicbonus + 1
                      verdantbonusa = verdantbonusa + 1
                  if random.randint(1, 3) == 3:
                    print("A surge of feral energy courses into the blade, coalesced out of the earth beneath you.")
                    time.sleep(2)
                    if verdantbonusb > 4:
                      dmgbonus = dmgbonus + 1
                      verdantbonusb = verdantbonusb + 1
              else:
                target -= (random.randint(5, 8) + dmgbonus)
                print("The glowing green gem flashes brighter as you prepare to strike.  The blade seems to dance as it makes an elegant cleave towards your enemy.")
                if random.randint(1, 3) == 3:
                  print("A surge of wild energy courses into the blade, coalesced out of the air above you.")
                  time.sleep(2)
                  if verdantbonusa > 4:
                    magicbonus = magicbonus + 1
                    verdantbonusa = verdantbonusa + 1
                if random.randint(1, 3) == 3:
                  print("A surge of feral energy courses into the blade, coalesced out of the earth beneath you.")
                  time.sleep(2)
                  if verdantbonusb > 4:
                    dmgbonus = dmgbonus + 1
                    verdantbonusb = verdantbonusb + 1
                if (random.randint(1, 5) == 5) and (verdantchargeyes == 0):
                  print("A surge of primordial energy courses into the blade, coalesced from your natural surroundings.")
                  time.sleep(2)
                  verdantchargeyes = 1
                  verdantcharge = 1
            if eqweapon == "bronze sword":
              target -= (random.randint(1, 6) + dmgbonus)
              print("You swung a mighty arc with your old bronze sword!")
            if eqweapon == "oaken longbow":
              target -= (random.randint(1, 6) + bowbonus + dmgbonus)
              print("You shot an arrow at the " + enemies[av] + "!")
            if eqweapon == "oaken crossbow":
              target -= (random.randint(5, 11) + bowbonus + dmgbonus)
              print("You shot a deadly crossbow bolt at the " + enemies[av] +                    "!")
              reload = 1
            if eqweapon == "stormbolt ballista":
              target -= (random.randint(10, 20) + bowbonus + dmgbonus)
              print("You shot a piercing bolt at the " + enemies[av] +                    ", hammering them with extreme force.")
              reload = 1
            if eqweapon == "orcish battleaxe":
              target -= (random.randint(2, 4) + random.randint(1, 6) +                         math.floor(dmgbonus * 1.5))
              print("You made a mighty cleave with your orcish battleaxe!")
            if eqweapon == "megaton polearm":
              target -= (random.randint(4, 9) + random.randint(4, 9) +                         math.floor(dmgbonus * 1.5))
              if random.randint(1, 3) == 3:
                time.sleep(0.2)
                print("")
                print("You stunned your target!")
                if targeteden == 1:
                  statusb1 = "stun"
                elif targeteden == 2:
                  statusb2 = "stun"
                elif targeteden == 3:
                  statusb3 = "stun"
              print("You make a massive cleave with your colossal polearm, letting gravity do the work for you.")
            if eqweapon == "shade's edge":
              target -= (random.randint(6, 12) + (ac - 10) + dmgbonus)
              print("You slash out with your shadowy blade!")
            if eqweapon == "warlord's cleaver":
              target -= (random.randint(8, 17) + dmgbonus)
              armor = math.floor((tac - 10) / 2)
              if armor > 0:
                if targeteden == 1:
                  injure(injury1, armor)
                elif targeteden == 2:
                  injure(injury2, armor)
                elif targeteden == 3:
                  injure(injury3, armor)
              print("You slash viciously, turning the " + enemies[av] +                    "'s defenses against it.")
            if eqweapon == "silver twinblades":
              target -= (random.randint(5, 9) + dmgbonus)
              injc = random.randint(1, 2)
              if targeteden == 1:
                injure(injury1, injc)
              elif targeteden == 2:
                injure(injury2, injc)
              elif targeteden == 3:
                injure(injury3, injc)
              if (random.randint(1, 20) + atkbonus) > 12:
                target -= (random.randint(5, 9) + dmgbonus)
                injc = random.randint(1, 2)
                if targeteden == 1:
                  injure(injury1, injc)
                elif targeteden == 2:
                  injure(injury2, injc)
                elif targeteden == 3:
                  injure(injury3, injc)
                print("Your silver blades spin before your strike your target with both.")
              else:
                print("One of your blades strikes the " + enemies[av] + "!")
            if eqweapon == "iron sword":
              target -= (random.randint(2, 8) + dmgbonus)
              print("You swung a powerful arc with your  iron sword!")
            if eqweapon == "topaz spellslinger":
              target -= (random.randint(4, 10) + magicbonus * 2)
              print("Your staff hums quietly before unleashing a pulse of brilliant orange energy.")
            if eqweapon == "shaman's staff":
              target -= (random.randint(3, 11) + magicbonus * 2)
              print("Your staff hums quietly before unleashing a beam of brilliant green energy.")
            if eqweapon == "lifedrain staff":
              ldmg = ((random.randint(2, 5) + magicbonus) * 2)
              if ldmg > target:
                ldmg = target
              target -= ldmg
              hp += ldmg / 2
              if hp > maxhp:
                hp = maxhp
              print("Your staff rattles quietly.  You feel a surge of vitality as the "
                + enemies[av] + " seems weaker.")
            if eqweapon == "bronze scimitar":
              target -= (random.randint(6, 9) + dmgbonus + atkbonus)
              print("You dart forward and make a quick slice with your scimitar!")
            if eqweapon == "phalanx polearm":
              target -= (random.randint(5, 10) + dmgbonus)
              print("You dart forward and make a quick jab with your spear!")
              if random.randint(1, 3) == 3:
                time.sleep(1)
                print("You quickly pivot into a defensive stance.")
                ac = ac + 1
                action = "block"
                if eqoffhand == "wooden shield":
                  ac = ac + 1
                  print("your shield is a huge help!")
                if eqoffhand == "primordial shield":
                  ac = ac + 15
                  print("you raise your ancient shield. It's surface glimmers as its primordial magic awakens.")
            if eqweapon == "weathered blade":
              target -= (random.randint(2, 4) + random.randint(3, 5) +                         dmgbonus + knifebonus)
              print("You silently stab with your ancient blade!")
              if targeteden == 1:
                enemy1acc = enemy1acc - 1
              if targeteden == 2:
                enemy2acc = enemy2acc - 1
              if targeteden == 3:
                enemy3acc = enemy3acc - 1
            if eqweapon == "bronze dagger":
              target -= (random.randint(2, 4) + dmgbonus + knifebonus)
              print("You impaled the " + enemies[av] + " on your dagger!")
            if eqweapon == "steel dagger":
              target -= (random.randint(3, 5) + dmgbonus + knifebonus)
              print("You impaled the " + enemies[av] + " on your dagger!")
            if eqweapon == "shadow knife":
              target -= (random.randint(3, 5) + dmgbonus + knifebonus)
              print("You impaled the " + enemies[av] + " on your dagger!")
            if eqweapon == "rusty dagger":
              target -= (random.randint(2, 5) + dmgbonus + knifebonus)
              print("You impaled the " + enemies[av] + " on your dagger!")
              if sclass == "rogue":
                enemy1dmgbonus = enemy1dmgbonus - 1
              if ((sclass == "skirmisher") and (random.randint(1, 5) == 5)):
                print("You score a critical hit, doing bonus damage, healing yourself, and weakening your target.")
                target -= 2
                hp = hp + 1
                enemy1dmgbonus = enemy1dmgbonus - 2
                if hp > maxhp:
                  hp = maxhp
            if eqweapon == "basic staff":
              target -= (random.randint(1, 3) + dmgbonus)
              print("You bonk the " + enemies[av] + " with your staff!")
            if eqweapon == "leafy staff":
              target -= (random.randint(1, 3) + dmgbonus)
              print("You bonk the " + enemies[av] + " with your leafy staff!")
              if leafybonus < 3:
                magicbonus = magicbonus + 1
                leafybonus = leafybonus + 1
            if eqweapon == "verdant staff":
              target -= (random.randint(7, 15) + magicbonus)
              print("You fire a pulse of verdant green energy at the " +                    enemies[av] +                    " with your staff! You feel revitalized and pristine.")
              if hp < maxhp:
                hp += 1
              if leafybonus < 6:
                magicbonus = magicbonus + 2
                leafybonus = leafybonus + 2
            if eqweapon == "bear claws":
              target -= (random.randint(2, 5) + dmgbonus)
              print("You rend the " + enemies[av] + " with your claws!")
            if eqweapon == "wolf claws":
              target -= (random.randint(1, 4) + dmgbonus)
              if targeteden == 1:
                injure(injury1, 1)
              elif targeteden == 2:
                injure(injury2, 1)
              elif targeteden == 3:
                injure(injury3, 1)
              print("You rend the " + enemies[av] + " with your claws!")
            if eqweapon == "bronze warhammer":
              target -= (3 + dmgbonus)
              print("A resonating clang cries out as the warhammer strikes...")
            if eqweapon == "goblin sword":
              target -= (random.randint(2, 5) + dmgbonus)
              print("You swing your blade of scrap and bone viciously.")
              iv = random.randint(0, 2)
              if targeteden == 1:
                injure(injury1, iv)
              elif targeteden == 2:
                injure(injury2, iv)
              elif targeteden == 3:
                injure(injury3, iv)
            if eqweapon == "striker blade":
              target -= (random.randint(8, 12) + dmgbonus)
              print("The blade feels heavy in your hands, but still you swing a massive hit.")
              if random.randint(1, 5) == 5:
                print("You score a critical hit!")
                target -= (random.randint(2, 6) + dmgbonus)
                iv = random.randint(2, 3)
                if targeteden == 1:
                  injure(injury1, iv)
                elif targeteden == 2:
                  injure(injury2, iv)
                elif targeteden == 3:
                  injure(injury3, iv)
            if eqweapon == "none":
              if sclass == "monk":
                target -= (random.randint(1, 3) + dmgbonus)
                if random.randint(1, 20) + atkbonus >= enemy1ac:
                  print("Two fists sink neatly into the " + enemies[av] + ".")
                  target -= (random.randint(1, 3) + dmgbonus)
                else:
                  print("One strong punch strikes.")
              else:
                target -= 1
                print("You throw a punch, and it hits.")
            if eqweapon == "brass knuckles":
              target -= (random.randint(3, 6) + dmgbonus)
              if random.randint(1, 20) + atkbonus >= enemy1ac:
                print("Two fists sink neatly into the " + enemies[av] + ".")
                target -= (random.randint(3, 6) + dmgbonus)
              else:
                print("One strong punch strikes.")
            if ((eqweapon in magicweapons) and ("scroll of night" in eqgear)):
              sharddmg = random.randint(1, 4) + magicbonus
              print("Your scroll fires a magic shard, dealing " + sharddmg +                    white + " damage!")
              target -= sharddmg
          else:
            print("You missed!")
            miss = 1
            if ((eqweapon == "oaken crossbow") or (eqweapon == "stormbolt ballista")):
              reload = 1
          if eqweapon in rangedweapons:
            atkbonus -= bowbonus
          if sclass == "skirmisher":
            if skirmsty == "heavy":
              atkbonus += 2
              dmgbonus -= 3
            elif skirmsty == "swift":
              atkbonus -= 2
              dmgbonus += 1
            elif skirmsty == "combo":
              if skcombo < 5:
                atkbonus -= (skcombo - 1)
                dmgbonus -= (skcombo - 2)
              if cst == 1:
                cst = 0
                if miss == 0:
                  print(turquoise + "[COMBO STRIKE]" + white + ": Move again.")
            else:
              skcombo = 0
        else:
          reload = 0
          print("You reload your weapon.")
          time.sleep(2)
      if action == "performance":
        if "old fiddle" in inventory:
          print("Which chord tone would you like to play? [MAJOR] or [MINOR]?")
          chord = input("> ").lower()
          if chord == "major":
            healch = 1 + math.ceil(minstr / 2)
            hp += healch
            print("You heal " + str(healch) + "HP!")
            if hp > maxhp:
              hp = maxhp
            time.sleep(1)
            print("")
            print("The resonance of the chord blasts at your enemies, ringing through their ears.")
            enemy1hp -= (random.randint(1, 4) + math.ceil(pstr / 2))
            enemy2hp -= (random.randint(1, 4) + math.ceil(pstr / 2))
            enemy3hp -= (random.randint(1, 4) + math.ceil(pstr / 2))
            if pstr >= 5:
              print("The thrumming joyous pulse brings you joy and courage, boosting your damage.")
              bardboost += 2
              dmgbonus += 2
            target -= majstr
            pstr += 1
            minstr = 0
            majstr += 1
          else:
            sadness = 1 + math.ceil(minstr / 2)
            if targeteden == "1":
              enemy1acc -= sadness
            if targeteden == "2":
              enemy2acc -= sadness
            if targeteden == "1":
              enemy3acc -= sadness
            print("Your target's resolve wavers with the force of sadness directed at them.")
            if hp > maxhp:
              hp = maxhp
            time.sleep(1)
            print("")
            print("The sadness of the chord blasts at your enemies, sheer emotion attacks them from within.")
            enemy1hp -= (random.randint(1, 4) + math.ceil(pstr / 2))
            enemy2hp -= (random.randint(1, 4) + math.ceil(pstr / 2))
            enemy3hp -= (random.randint(1, 4) + math.ceil(pstr / 2))
            target -= minstr
            if pstr >= 5:
              print("The depressing, beatifully sad pulse brings your foes into nearly a trance, between euphoria and despair.")
              enemy1acc -= random.randint(0, 1)
              enemy2acc -= random.randint(0, 1)
              enemy3acc -= random.randint(0, 1)
            pstr += 1
            minstr += 1
            majstr = 0
          if pstr > 6:
            pstr = 6
      else:
        pstr = 0
        minstr = 0
        majstr = 0
      if action == "block":
        ac = ac + 1
        print("you prepare to block an attack.")
        if ((sclass == "monk") and (monkbonus < 3)):
          atkbonus = atkbonus + 1
          monkbonus = monkbonus + 1
          print("Your defensive stance is perfectly positioned to strike out, improving your accuracy.")
        if eqoffhand == "wooden shield":
          ac = ac + 1
          print("your shield is a huge help!")
        if eqoffhand == "primordial shield":
          ac = ac + 15
          print("you raise your ancient shield. It's surface glimmers as its primordial magic awakens.")
      if action == "run":
        if random.randint(1, 10) >= 7:
          print("You run away safely!")
          enemy1hp = 0
          enemy2hp = 0
          enemy3hp = 0
          loot = "no"
        else:
          print("you can't get away!")
      time.sleep(1)
    else:
      ach = 0
  if "ballistic spines" in eqgear:
    if ((eqweapon not in magicweapons) and (eqweapon not in rangedweapons)):
      print("As you strike your enemy, you hear a satisfying clunk as your ballistic spines activate, cutting your foe.")
      iv = random.randint(1, 2)
      if targeteden == 1:
        injure(injury1, iv)
      elif targeteden == 2:
        injure(injury2, iv)
      elif targeteden == 3:
        injure(injury3, iv)
      time.sleep(2)
      print("")
  if "gambler's trinket" in eqgear:
    print("Your gambler's trinket shimmers and rolls in place.")
    print("")
    time.sleep(1)
    gtr = random.randint(1, 5)
    if gtr == 1:
      print("You lose 2 health.")
      hp = hp - 2
    elif gtr == 2:
      print("You lose 1 health.")
      hp = hp - 1
    elif gtr == 3:
      print("You neither heal nor hurt.")
    elif gtr == 4:
      print("You gain 1 health.")
      hp = hp + 1
    elif gtr == 5:
      print("You gain 2 health.")
      hp = hp + 2
    print("")
  if balch != 0:
    balch -= 1
  if ((balch == 0) and (bay == 1)):
    if "ballista" not in battleactions:
      battleactions.append("ballista")
  return target

#combat
def combat():
  global dp, enemies, knifebonus, minutes, hours, timeofday, gc, sc, loot, sclass, maxhp, hp, ac, atkbonus, dmgbonus, rage, throwingknife, eqweapon, eqhelm, eqgear, wsyes, DR, magicbonus, gwpy, gwpcharge, balch, bay, monkbonus, leafybonus, injury1, injury2, injury3, enemy1dmgbonus, enemy2dmgbonus, enemy3dmgbonus, enemy1ac, enemy2ac, enemy3ac, action, rage, tac, av, targeteden, inventory, snipe, reload, bowbonus, location, pstr, majstr, minstr, bardboost, enemy1acc, enemy2acc, enemy3acc, statusb1, statusb2, statusb3, statusg1, statusg2, statusg3, burndur1, burndmg1, burndur2, burndmg2, burndur3, burndmg3, special1, special2, special3, verdantbonusa, verdantbonusb, verdantcharge, verdantchargeyes, skcombo, bestiarylist, enemy1hp, enemy2hp, enemy3hp, burrow1, burrow2, burrow3, weather, rangedDR
  targeteden = 1
  if gwpy == "yes":
    dmgbonus = dmgbonus + 3
    gwpcharge = gwpcharge - 1
  skcombo = 0
  bardboost = 0
  pstr = 0
  majstr = 0
  minstr = 0
  burndmg1 = 0
  burndur1 = 0
  burndmg2 = 0
  burndur2 = 0
  burndmg3 = 0
  burndur3 = 0
  verdantbonusa = 0
  verdantbonusb = 0
  verdantcharge = 0
  verdantchargeyes = 0
  leafybonus = 0
  monkbonus = 0
  reload = 0
  action = ""
  loot = "yes"
  rage = "no"
  wsyes = "no"
  injury1 = 0
  injury2 = 0
  injury3 = 0
  balch = 0
  if "ballista" in battleactions:
    bay = 1
  else:
    bay = 0
  print("=============================")
  time.sleep(0.5)
  if len(enemies) == 1:
    print("You see a " + enemies[0] + "!")
  if len(enemies) == 2:
    print("You see a " + enemies[0] + " and a " + enemies[1] + "!")
  if len(enemies) == 3:
    print("You see a " + enemies[0] + ", a " + enemies[1] + " and a " +          enemies[2] + "!")
  print("")
  enemy3hp = 0
  enemy2hp = 0
  enemy1hp = 0
  enemy1hp = 0
  enemy1ac = 0
  enemy1dmg = 0
  enemy1acc = 0
  enemy1drop1 = ""
  enemy1drop2 = ""
  enemy1chance1 = 1
  enemy1chance2 = 1
  statusb1 = "none"
  statusg1 = "none"
  enemy1weapon = ""
  special1 = "none"
  enemy2ac = 0
  enemy2dmg = 0
  enemy2acc = 0
  enemy2drop1 = ""
  enemy2drop2 = ""
  enemy2chance1 = 1
  enemy2chance2 = 1
  statusb2 = "none"
  statusg2 = "none"
  enemy2weapon = ""
  special2 = "none"
  enemy3ac = 0
  enemy3dmg = 0
  enemy3acc = 0
  enemy3drop1 = ""
  enemy3drop2 = ""
  enemy3chance1 = 1
  enemy3chance2 = 1
  statusb3 = "none"
  statusg3 = "none"
  enemy3weapon = ""
  special3 = "none"
  burrow1 = 0
  burrow2 = 0
  burrow3 = 0
  if enemies[0] not in bestiarylist:
    bestiarylist.append(enemies[0])
  if enemies[0] == "goblin":
    enemy1hp = 6
    enemy1ac = 12
    enemy1dmg = 2
    enemy1acc = 1
    enemy1drop1 = "goblin sword"
    enemy1drop2 = "goblin war paint"
    enemy1chance1 = 8
    enemy1chance2 = 20
    statusb1 = "none"
    statusg1 = "none"
    enemy1weapon = "charges you and slashes at you with a scimitar."
    special1 = "none"
  elif enemies[0] == "orc":
    enemy1hp = 8
    enemy1ac = 11
    enemy1dmg = 3
    enemy1acc = 2
    statusb1 = "none"
    statusg1 = "none"
    enemy1drop1 = "orcish battleaxe"
    enemy1drop2 = "leather vest"
    enemy1chance1 = 10
    enemy1chance2 = 12
    enemy1weapon = "makes a mighty swing with a battleaxe."
    special1 = "none"
  elif enemies[0] == "outlaw":
    enemy1hp = 7
    enemy1ac = 13
    enemy1dmg = 2
    enemy1acc = 3
    statusb1 = "none"
    statusg1 = "none"
    enemy1drop1 = "rusty dagger"
    enemy1drop2 = "outlaw bandana"
    enemy1chance1 = 10
    enemy1chance2 = 7
    enemy1weapon = "stabs you with a rusty dagger."
    special1 = "none"
  elif enemies[0] == "goblin striker":
    enemy1hp = 13
    enemy1ac = 14
    enemy1dmg = 4
    enemy1acc = 3
    enemy1drop1 = "striker blade"
    enemy1drop2 = "scrap metal"
    enemy1chance1 = 14
    enemy1chance2 = 2
    statusb1 = "none"
    statusg1 = "none"
    enemy1weapon = "slashes out with a mighty spiked blade."
    special1 = "none"
  elif enemies[0] == "goblin sniper":
    enemy1hp = 11
    enemy1ac = 16
    enemy1dmg = 5 - rangedDR
    enemy1acc = 5
    enemy1drop1 = "heavytip quiver"
    enemy1drop2 = "reload crank"
    enemy1chance1 = 10
    enemy1chance2 = 12
    statusb1 = "none"
    statusg1 = "none"
    enemy1weapon = "fires a deadly shot!"
    special1 = "scover"
  elif enemies[0] == "orcish shaman":
    enemy1hp = 15
    enemy1ac = 13
    enemy1dmg = 0
    enemy1acc = 0
    enemy1drop1 = "amulet of life"
    enemy1drop2 = "shaman's staff"
    enemy1chance1 = 20
    enemy1chance2 = 15
    statusb1 = "none"
    statusg1 = "none"
    enemy1weapon = "raises a staff and pounds it on the floor, strengthening its allies."
    special1 = "orcboost"
  elif enemies[0] == "darkling":
    enemy1hp = 8
    enemy1ac = 9
    enemy1dmg = 3
    enemy1acc = 1
    enemy1drop1 = "amber"
    enemy1drop2 = "shadow knife"
    enemy1chance1 = 5
    enemy1chance2 = 8
    statusb1 = "none"
    statusg1 = "none"
    enemy1weapon = "slashes at you with a dark knife."
    special1 = "none"
  elif enemies[0] == "elf brute":
    enemy1hp = 15
    enemy1ac = 10
    enemy1dmg = 4
    enemy1acc = 1
    enemy1drop1 = "iron ingot"
    enemy1drop2 = "leather vest"
    enemy1chance1 = 6
    enemy1chance2 = 10
    statusb1 = "none"
    statusg1 = "none"
    enemy1weapon = "swings a mighty warhammer."
    special1 = "none"
  elif enemies[0] == "prairie bulette":
    enemy1hp = 22
    enemy1ac = 12
    enemy1dmg = 7
    enemy1acc = 3
    enemy1drop1 = "scrap metal"
    enemy1drop2 = "scrap metal"
    enemy1chance1 = 4
    enemy1chance2 = 4
    statusb1 = "none"
    statusg1 = "none"
    enemy1weapon = "erupts from the ground next to you and pounces."
    special1 = "burrow"
  enemy1dmgbonus = 0
  if len(enemies) >= 2:
    if enemies[1] not in bestiarylist:
      bestiarylist.append(enemies[1])
    if enemies[1] == "goblin":
      enemy2hp = 6
      enemy2ac = 12
      enemy2dmg = 2
      enemy2acc = 1
      enemy2drop1 = "goblin sword"
      enemy2drop2 = "goblin war paint"
      enemy2chance1 = 8
      enemy2chance2 = 20
      statusb2 = "none"
      statusg2 = "none"
      enemy2weapon = "charges you and slashes at you with a scimitar."
      special2 = "none"
    elif enemies[1] == "orc":
      enemy2hp = 8
      enemy2ac = 11
      enemy2dmg = 3
      enemy2acc = 2
      statusb2 = "none"
      statusg2 = "none"
      enemy2drop1 = "orcish battleaxe"
      enemy2drop2 = "leather vest"
      enemy2chance1 = 10
      enemy2chance2 = 12
      enemy2weapon = "makes a mighty swing with a battleaxe."
      special2 = "none"
    elif enemies[1] == "outlaw":
      enemy2hp = 7
      enemy2ac = 13
      enemy2dmg = 2
      enemy2acc = 3
      statusb2 = "none"
      statusg2 = "none"
      enemy2drop1 = "rusty dagger"
      enemy2drop2 = "outlaw bandana"
      enemy2chance1 = 10
      enemy2chance2 = 15
      enemy2weapon = "stabs you with a rusty dagger. ouch."
      special2 = "none"
    elif enemies[1] == "goblin striker":
      enemy2hp = 13
      enemy2ac = 14
      enemy2dmg = 4
      enemy2acc = 3
      enemy2drop1 = "striker blade"
      enemy2drop2 = "scrap metal"
      enemy2chance1 = 14
      enemy2chance2 = 2
      statusb2 = "none"
      statusg2 = "none"
      enemy2weapon = "slashes out with a mighty spiked blade."
      special1 = "none"
    elif enemies[1] == "goblin sniper":
      enemy2hp = 11
      enemy2ac = 16
      enemy2dmg = 5 - rangedDR
      enemy2acc = 5
      enemy2drop1 = "heavytip quiver"
      enemy2drop2 = "reload crank"
      enemy2chance1 = 10
      enemy2chance2 = 12
      statusb2 = "none"
      statusg2 = "none"
      enemy2weapon = "fires a deadly shot!"
      special2 = "scover"
    elif enemies[1] == "orcish shaman":
      enemy2hp = 15
      enemy2ac = 13
      enemy2dmg = 0
      enemy2acc = 0
      enemy2drop1 = "amulet of life"
      enemy2drop2 = "shaman's staff"
      enemy2chance1 = 20
      enemy2chance2 = 15
      statusb2 = "none"
      statusg2 = "none"
      enemy2weapon = "raises a staff and pounds it on the floor, strengthening its allies."
      special2 = "orcboost"
    elif enemies[1] == "darkling":
      enemy2hp = 8
      enemy2ac = 9
      enemy2dmg = 3
      enemy2acc = 1
      enemy2drop1 = "amber"
      enemy2drop2 = "shadow knife"
      enemy2chance1 = 5
      enemy2chance2 = 8
      statusb2 = "none"
      statusg2 = "none"
      enemy2weapon = "slashes at you with a dark knife."
      special2 = "none"
    elif enemies[1] == "prairie bulette":
      enemy2hp = 22
      enemy2ac = 12
      enemy2dmg = 7
      enemy2acc = 3
      enemy2drop1 = "scrap metal"
      enemy2drop2 = "scrap metal"
      enemy2chance1 = 4
      enemy2chance2 = 4
      statusb2 = "none"
      statusg2 = "none"
      enemy2weapon = "erupts from the ground next to you and pounces."
      special2 = "burrow"
  else:
    enemy2hp = 0
  enemy2dmgbonus = 0
  if len(enemies) == 3:
    if enemies[2] not in bestiarylist:
      bestiarylist.append(enemies[2])
    if enemies[2] == "goblin":
      enemy3hp = 6
      enemy3ac = 12
      enemy3dmg = 2
      enemy3acc = 1
      enemy3drop1 = "goblin sword"
      enemy3drop2 = "goblin war paint"
      enemy3chance1 = 8
      enemy3chance2 = 20
      statusb3 = "none"
      statusg3 = "none"
      enemy3weapon = "charges you and slashes at you with a scimitar."
      special3 = "none"
    elif enemies[2] == "orc":
      enemy3hp = 8
      enemy3ac = 11
      enemy3dmg = 3
      enemy3acc = 2
      statusb3 = "none"
      statusg3 = "none"
      enemy3drop1 = "orcish battleaxe"
      enemy3drop2 = "leather vest"
      enemy3chance1 = 10
      enemy3chance2 = 12
      enemy3weapon = "makes a mighty swing with a battleaxe."
      special3 = "none"
    elif enemies[2] == "outlaw":
      enemy3hp = 7
      enemy3ac = 13
      enemy3dmg = 2
      enemy3acc = 3
      statusb3 = "none"
      statusg3 = "none"
      enemy3drop1 = "rusty dagger"
      enemy3drop2 = "outlaw bandana"
      enemy3chance1 = 10
      enemy3chance2 = 15
      enemy3weapon = "stabs you with a rusty dagger.  ouch."
      special3 = "none"
    elif enemies[2] == "goblin striker":
      enemy3hp = 13
      enemy3ac = 14
      enemy3dmg = 4
      enemy3acc = 3
      enemy3drop1 = "striker blade"
      enemy3drop2 = "scrap metal"
      enemy3chance1 = 14
      enemy3chance2 = 2
      statusb3 = "none"
      statusg3 = "none"
      enemy3weapon = "slashes out with a mighty spiked blade."
      special3 = "none"
    elif enemies[2] == "goblin sniper":
      enemy3hp = 11
      enemy3ac = 16
      enemy3dmg = 5 - rangedDR
      enemy3acc = 5
      enemy3drop1 = "heavytip quiver"
      enemy3drop2 = "reload crank"
      enemy3chance1 = 10
      enemy3chance2 = 12
      statusb3 = "none"
      statusg3 = "none"
      enemy3weapon = "fires a deadly shot!"
      special3 = "scover"
    elif enemies[2] == "orcish shaman":
      enemy3hp = 15
      enemy3ac = 13
      enemy3dmg = 0
      enemy3acc = 0
      enemy3drop1 = "amulet of life"
      enemy3drop2 = "shaman's staff"
      enemy3chance1 = 20
      enemy3chance2 = 15
      statusb3 = "none"
      statusg3 = "none"
      enemy3weapon = "raises a staff and pounds it on the floor, strengthening its allies."
      special3 = "orcboost"
    elif enemies[2] == "serpenite":
      enemy3hp = 13
      enemy3ac = 13
      enemy3dmg = 4
      enemy3acc = 3
      enemy3drop1 = "fish scales"
      enemy3drop2 = "steel dagger"
      enemy3chance1 = 1
      enemy3chance2 = 4
      statusb3 = "none"
      statusg3 = "none"
      enemy3weapon = "slashes at you with a shiny knife."
      special3 = "none"
    elif enemies[2] == "prairie bulette":
      enemy3hp = 22
      enemy3ac = 12
      enemy3dmg = 7
      enemy3acc = 3
      enemy3drop1 = "scrap metal"
      enemy3drop2 = "scrap metal"
      enemy3chance1 = 4
      enemy3chance2 = 4
      statusb3 = "none"
      statusg3 = "none"
      enemy3weapon = "erupts from the ground next to you and pounces."
      special3 = "burrow"
    enemy3dmgbonus = 0
  else:
    enemy3hp = 0
  if weather == "fog":
    enemy1acc -= 1
    enemy2acc -= 1
    enemy3acc -= 1
  if orcl == 1:
    enemy1hp = 18
  if snipe == 1:
    snipe = 0
    if ((random.randint(1, 20) + bowbonus + atkbonus + 2) > enemy1ac):
      if eqweapon == "oaken longbow":
        enemy1hp -= (random.randint(1, 6) + bowbonus + dmgbonus)
        print("Your arrow sinks into the " + enemies[0] + "!")
      elif eqweapon == "oaken crossbow":
        enemy1hp -= (random.randint(5, 11) + bowbonus + dmgbonus)
        print("Your bolt sinks into the " + enemies[0] + "!")
        reload = 1
      elif eqweapon == "stormbolt ballista":
        enemy1hp -= (random.randint(8, 16) + bowbonus + dmgbonus)
        print("Your bolt sinks into the " + enemies[0] + "!")
        reload = 1
    else:
      print("Your sniped shot misses.")
      reload = 1
    if "ballista drive" in eqgear:
      if reload == 1:
        print("Another bolt falls satisfyingly into place with a mechanical clank, propelled by the ballista drive in your crossbow.")
        time.sleep(2)
        print("")
      reload = 0
  scover1 = "n"
  scover2 = "n"
  scover3 = "n"
  if special1 == "scover":
    if ((enemy2hp > 0) or (enemy3hp > 0)):
      enemy1ac += 4
      scover1 = "y"
  if special2 == "scover":
    if ((enemy1hp > 0) or (enemy3hp > 0)):
      enemy1ac += 4
      scover1 = "y"
  if special3 == "scover":
    if ((enemy2hp > 0) or (enemy1hp > 0)):
      enemy1ac += 4
      scover1 = "y"
  while (((enemy1hp > 0) or (enemy2hp > 0) or (enemy3hp > 0)) and (hp > 0)):
    if scover1 == "y":
      if ((enemy2hp <= 0) and (enemy3hp <= 0)):
        enemy1ac -= 4
        scover1 = "n"
    if scover2 == "y":
      if ((enemy1hp <= 0) and (enemy3hp <= 0)):
        enemy2ac -= 4
        scover2 = "n"
    if scover3 == "y":
      if ((enemy2hp <= 0) and (enemy1hp <= 0)):
        enemy3ac -= 4
        scover3 = "n"
    dmgd = 0
    if len(enemies) == 3:
      print("Which enemy are your targeting this round? [1/2/3]")
      etarget = input("> ").lower()
      if etarget == "3":
        tac = enemy3ac
        av = 2
        targeteden = 3
        enemy3hp = attack(enemy3hp)
      elif etarget == "2":
        tac = enemy1ac
        av = 1
        targeteden = 2
        enemy2hp = attack(enemy2hp)
      else:
        tac = enemy1ac
        targeteden = 1
        av = 0
        enemy1hp = attack(enemy1hp)
    elif len(enemies) == 2:
      print("Which enemy are your targeting this round? [1/2]")
      etarget = input("> ").lower()
      if etarget == "2":
        tac = enemy2ac
        av = 1
        targeteden = 2
        enemy2hp = attack(enemy2hp)
      else:
        tac = enemy1ac
        av = 0
        targeteden = 1
        enemy1hp = attack(enemy1hp)
    else:
      tac = enemy1ac
      targeteden = 1
      av = 0
      enemy1hp = attack(enemy1hp)
    print("")
    if "reload crank" in eqgear:
      if random.randint(1, 4) == 4:
        if reload == 1:
          print("Your advanced reload crank lets you quickly reload your crossbow.")
        time.sleep(2)
        print("")
        reload = 0
    if weather == "sandstorm":
      print("The "+ tan + "sandstorm" + white + " buffets everyone.")
      time.sleep(2)
      if hp > 1:
        hp -= 1
      if enemy1hp > 0:
        hp -=1
      if enemy2hp > 0:
        hp -=1
      if enemy3hp > 0:
        hp -=1
    if ((enemy1hp > 0) and (statusb1 != "stun")):
      time.sleep(0.5)
      print("The " + enemies[0] + " is at " + str(enemy1hp) + " HP!")
      if random.randint(1, 20) + enemy1acc >= ac:
        time.sleep(0.5)
        print("The " + enemies[0] + " " + enemy1weapon)
        hp = hp - enemy1dmg - enemy1dmgbonus - enemy1dmgbonus
        if enemy1dmg + enemy1dmgbonus < 0:
          hp = hp + enemy1dmg + enemy1dmgbonus
        time.sleep(0.1)
        if rage == "yes":
          if random.randint(1, 2) == 2:
            hp = hp + 1
            print("You take " + red + str(enemy1dmg + enemy1dmgbonus - 1) +                  white + " damage!")
          else:
            print("You take " + red + str(enemy1dmg + enemy1dmgbonus) + white +                  " damage!")
        else:
          print("You take " + red + str(enemy1dmg + enemy1dmgbonus) + white +                " damage!")
        time.sleep(0.1)
        print("You have " + str(hp) + " HP left.")
        if 0 >= hp and wsyes == "no":
          time.sleep(0.1)
          print("You have fallen.")
        elif 0 >= hp and wsyes == "yes":
          print("You revert form.")
          ac = wsac
          maxhp = wsmaxhp
          hp = wshp
          eqweapon = wsweapon
          atkbonus = wsatkbonus
          dmgbonus = wsdmgbonus
          wsyes = "no"
      else:
        print("The " + enemies[0] + " misses!")
        if action == "block":
          enemy1hp = enemy1hp - 2
          if eqweapon == "phalanx polearm":
            enemy1hp = enemy1hp - 1
          if "shiv" in eqgear:
            enemy1hp = enemy1hp - 1
          print("You strike out with a counterattack!")
      if injury1 > 0:
        enemy1hp = enemy1hp - injury1
        print("The " + enemies[0] + " bleeds for " + str(injury1) + " damage.")
        injury1 -= 1
      time.sleep(0.5)
      if burndur1 > 0:
        burndur1 -= 1
        enemy1hp -= burndmg1
        print("The " + enemies[0] + " is burned for " + str(burndmg1) + white +              " damage!")
      if special1 == "orcboost":
        if enemies[0] == "orc":
          enemy2dmgbonus += 1
          enemy2acc += 1
          if enemy2hp > 0:
            enemy2hp += 1
        if enemies[1] == "orc":
          enemy3dmgbonus += 1
          enemy3acc += 1
          if enemy3hp > 0:
            enemy3hp += 1
        try:
          if enemies[2] == "orc":
            enemy1dmgbonus += 1
            enemy1acc += 1
            if enemy1hp > 0:
              enemy1hp += 1
        except:
          pass
    if ((enemy2hp > 0) and (len(enemies) >= 2) and (hp > 0) and (statusb2 != "stun")):
      time.sleep(0.5)
      print("")
      print("The " + enemies[1] + " is at " + str(enemy2hp) + " HP!")
      if random.randint(1, 20) + enemy2acc >= ac:
        time.sleep(0.5)
        print("The " + enemies[1] + " " + enemy2weapon)
        hp = hp - enemy2dmg - enemy2dmgbonus
        if enemy2dmg + enemy2dmgbonus < 0:
          hp = hp + enemy2dmg + enemy2dmgbonus
        time.sleep(0.1)
        if rage == "yes":
          if random.randint(1, 2) == 2:
            hp = hp + 1
            print("You take " + red + str(enemy2dmg + enemy2dmgbonus - 1) +                  white + " damage!")
          else:
            print("You take " + red + str(enemy2dmg + enemy2dmgbonus) + white +                  " damage!")
        else:
          print("You take " + red + str(enemy2dmg + enemy2dmgbonus) + white +                " damage!")
        time.sleep(0.1)
        print("You have " + str(hp) + " HP left.")
        if 0 >= hp and wsyes == "no":
          time.sleep(0.1)
          print("You have fallen.")
        elif 0 >= hp and wsyes == "yes":
          print("You revert form.")
          ac = wsac
          maxhp = wsmaxhp
          hp = wshp
          eqweapon = wsweapon
          atkbonus = wsatkbonus
          dmgbonus = wsdmgbonus
          wsyes = "no"
      else:
        print("The " + enemies[1] + " misses!")
        if action == "block":
          enemy2hp = enemy2hp - 2
          if eqweapon == "phalanx polearm":
            enemy2hp = enemy2hp - 1
          if "shiv" in eqgear:
            enemy2hp = enemy2hp - 1
          print("You strike out with a counterattack!")
      if injury2 > 0:
        enemy2hp = enemy2hp - injury2
        print("The " + enemies[1] + " bleeds for " + str(injury1) + " damage.")
        injury2 = injury2 - 1
        time.sleep(0.5)
      if burndur2 > 0:
        burndur2 -= 1
        enemy2hp -= burndmg2
        print("The " + enemies[1] + " is burned for " + str(burndmg2) + white +              " damage!")
      if special2 == "orcboost":
        if enemies[1] == "orc":
          enemy2dmgbonus += 1
          enemy2acc += 1
          if enemy2hp > 0:
            enemy2hp += 1
        try:
          if enemies[2] == "orc":
            enemy3dmgbonus += 1
            enemy3acc += 1
            if enemy3hp > 0:
              enemy3hp += 1
        except:
          pass
        if enemies[0] == "orc":
          enemy1dmgbonus += 1
          enemy1acc += 1
          if enemy1hp > 0:
            enemy1hp += 1
    if ((enemy3hp > 0) and (len(enemies) == 3) and (hp > 0) and (statusb3 != "stun")):
      time.sleep(0.5)
      print("")
      print("The " + enemies[2] + " is at " + str(enemy3hp) + " HP!")
      if random.randint(1, 20) + enemy3acc >= ac:
        time.sleep(0.5)
        print("The " + enemies[2] + " " + enemy3weapon)
        hp = hp - enemy3dmg - enemy3dmgbonus
        if enemy3dmg + enemy3dmgbonus < 0:
          hp = hp + enemy3dmg + enemy3dmgbonus
        time.sleep(0.1)
        if rage == "yes":
          if random.randint(1, 2) == 2:
            hp = hp + 1
            print("You take " + red + str(enemy3dmg + enemy3dmgbonus - 1) +                  white + " damage!")
          else:
            print("You take " + red + str(enemy3dmg + enemy3dmgbonus) + white +                  " damage!")
        else:
          print("You take " + red + str(enemy3dmg + enemy3dmgbonus) + white +                " damage!")
        time.sleep(0.1)
        print("You have " + str(hp) + " HP left.")
        if 0 >= hp and wsyes == "no":
          print("You have fallen.")
        elif 0 >= hp and wsyes == "yes":
          print("You revert form.")
          ac = wsac
          maxhp = wsmaxhp
          hp = wshp
          eqweapon = wsweapon
          atkbonus = wsatkbonus
          dmgbonus = wsdmgbonus
          wsyes = "no"
      else:
        print("The " + enemies[2] + " misses!")
        if action == "block":
          enemy3hp = enemy3hp - 2
          if eqweapon == "phalanx polearm":
            enemy3hp = enemy3hp - 1
          if "shiv" in eqgear:
            enemy3hp = enemy3hp - 1
          print("You strike out with a counterattack!")
      if injury3 > 0:
        enemy3hp = enemy3hp - injury3
        print("The " + enemies[2] + " bleeds for " + str(injury3) + " damage.")
        injury3 = injury3 - 1
        time.sleep(0.5)
      if burndur3 > 0:
        burndur3 -= 1
        enemy3hp -= burndmg3
        print("The " + enemies[2] + " is burned for " + str(3) + white +              " damage!")
      if special3 == "orcboost":
        if enemies[1] == "orc":
          enemy2dmgbonus += 1
          enemy2acc += 1
          if enemy2hp > 0:
            enemy2hp += 1
        if enemies[2] == "orc":
          enemy3dmgbonus += 1
          enemy3acc += 1
          if enemy3hp > 0:
            enemy3hp += 1
        if enemies[0] == "orc":
          enemy1dmgbonus += 1
          enemy1acc += 1
          if enemy1hp > 0:
            enemy1hp += 1
    if action == "block":
      ac = ac - 1
      if eqoffhand == "wooden shield":
        ac = ac - 1
      if eqoffhand == "primordial shield":
        ac = ac - 15
    if statusb1 == "stun":
      statusb1 = "none"
    if statusb2 == "stun":
      statusb2 = "none"
    if statusb3 == "stun":
      statusb3 = "none"
    print("")
  if gwpy == "yes":
    dmgbonus = dmgbonus - 3
    if gwpcharge == 0:
      gwpy = "no"
  atkbonus = atkbonus - monkbonus
  magicbonus = magicbonus - leafybonus
  magicbonus = magicbonus - verdantbonusa
  dmgbonus = dmgbonus - verdantbonusb
  if wsyes == "yes":
    print("You revert form.")
    ac = wsac
    maxhp = wsmaxhp
    hp = wshp
    eqweapon = wsweapon
    atkbonus = wsatkbonus
    dmgbonus = wsdmgbonus
    battleactions.append("magic")
    wsyes = "no"
  if rage == "yes":
    print("Your anger fades.")
    ac = ac + 4
    atkbonus = atkbonus - 2
    dmgbonus = dmgbonus - 1
  rage = "no"
  if loot == "yes" and hp > 0:
    print("The battle is over.  You stand victorious.")
    print("")
    if random.randint(1, enemy1chance1) == enemy1chance1:
      print("You got a " + str(enemy1drop1) + " from the " + enemies[0] + "!")
      inventory.append(enemy1drop1)
    if random.randint(1, enemy1chance2) == enemy1chance2:
      print("You got a " + str(enemy1drop2) + " from the " + enemies[0] + "!")
      inventory.append(enemy1drop2)
    if enemies[0] == "goblin":
      enemy1c = random.randint(1, 3)
    if enemies[0] == "orc":
      enemy1c = random.randint(1, 4)
      if location == "darksporeforest1":
        inventory.append('fungal spores')
    if enemies[0] == "outlaw":
      if location == "savagesteppe5":
        enemy1c = random.randint(1, 2)
      else:
        enemy1c = random.randint(3, 5)
    if enemies[0] == "goblin striker":
      enemy1c = random.randint(4, 5)
    if enemies[0] == "orcish shaman":
      enemy1c = random.randint(4, 6)
    if enemies[0] == "goblin sniper":
      enemy1c = random.randint(5, 6)
    if enemies[0] == "darkling":
      enemy1c = random.randint(2, 3)
    if enemies[0] == "elf brute":
      enemy1c = random.randint(2, 5)
    print("You got " + str(enemy1c) + " " + gold + "gc" + white +          " from the " + enemies[0] + "!")
    gc = gc + enemy1c
    if len(enemies) >= 2:
      if random.randint(1, enemy2chance1) == enemy2chance1:
        print("You got a " + str(enemy2drop1) + " from the " + enemies[1] +              "!")
        inventory.append(enemy2drop1)
      if random.randint(1, enemy2chance2) == enemy2chance2:
        print("You got a " + str(enemy2drop2) + " from the " + enemies[1] +              "!")
        inventory.append(enemy2drop2)
      if enemies[1] == "goblin":
        enemy2c = random.randint(1, 3)
      if enemies[1] == "orc":
        enemy2c = random.randint(1, 4)
      if enemies[1] == "outlaw":
        enemy2c = random.randint(3, 5)
      if enemies[1] == "goblin striker":
        enemy2c = random.randint(4, 5)
      if enemies[1] == "orcish shaman":
        enemy2c = random.randint(4, 6)
      if enemies[1] == "goblin sniper":
        enemy2c = random.randint(5, 6)
      if enemies[1] == "darkling":
        enemy2c = random.randint(2, 3)
      print("You got " + str(enemy2c) + " " + gold + "gc" + white +            " from the " + enemies[1] + "!")
      gc = gc + enemy2c
    if len(enemies) >= 3:
      if random.randint(1, enemy3chance1) == enemy3chance1:
        print("You got a " + str(enemy3drop1) + " from the " + enemies[2] +              "!")
        inventory.append(enemy1drop1)
      if random.randint(1, enemy3chance2) == enemy3chance2:
        print("You got a " + str(enemy3drop2) + " from the " + enemies[2] +              "!")
        inventory.append(enemy1drop2)
      if enemies[2] == "goblin":
        enemy3c = random.randint(1, 3)
      if enemies[2] == "orc":
        enemy3c = random.randint(1, 4)
      if enemies[2] == "outlaw":
        enemy3c = random.randint(3, 5)
      if enemies[2] == "goblin striker":
        enemy3c = random.randint(4, 5)
      if enemies[2] == "orcish shaman":
        enemy3c = random.randint(4, 6)
      if enemies[2] == "goblin sniper":
        enemy3c = random.randint(5, 6)
      if enemies[2] == "serpenite":
        enemy3c = random.randint(5, 6)
      print("You got " + str(enemy3c) + " " + gold + "gc" + white +            " from the " + enemies[2] + "!")
      gc = gc + enemy3c
  print("[ENTER] to continue.")
  enemies.clear()
  wait = input().lower()
  timeshift(0, 15)
  bay = 0
  if "ballista" in battleactions:
    battleactions.remove("ballista")
  dmgbonus -= bardboost
  if hp <= 0:
    loot = "no"
    time.sleep(1)
    hp = 1
    if dp == 0:
      print("You died. Heading to the nearest village...")
      time.sleep(1)
      print("")
      nearestcity()
    dp = 0
  print("")

#fancy text for bosses
def bosstext(text, ex):
  totalspaces = len(text) + ex
  spaces = totalspaces
  letters = len(text)
  clet = 0
  exstr = ""
  hypstr = ""
  while clet < len(text):
    while spaces >= 0:
      spaces = spaces - 1
      exstr = exstr + " "
    exstr = exstr + text[clet]
    print(hypstr + exstr)
    letters = letters - 1
    time.sleep(0.01)
    exstr = ""
    totalspaces = totalspaces - 1
    spaces = totalspaces
    if spaces == 0:
      clet += 1
      hypstr = text[0:clet]
      totalspaces = len(text) - clet + 5
    if clet != len(text):
      clearscreen()
    else:
      clearscreen()
      print(text)
  time.sleep(2)

#assassin boss
def shadowboss():
  global minutes, hours, DR, loot, maxhp, hp, ac, atkbonus, dmgbonus, rage, throwingknife, eqweapon, eqhelm, wsyes, sclass, magicbonus, hours, timeofday, eqoffhand, gc, inventory, gwpy, gwpcharge, locations, monkbonus, leafybonus, injury1, injury2, injury3, enemy1dmgbonus, enemy2dmgbonus, enemy3dmgbonus, enemy1ac, enemy2ac, enemy3ac, action, rage, tac, av, targeteden, inventory, snipe, reload, bowbonus
  ni = 0
  enemies = ["assassin"]
  injury = 0
  leafybonus = 0
  monkbonus = 0
  enemy1hp = 70
  enemy1ac = 13
  bossatkbonus = 4
  bossstatusg = "none"
  bossstatusb = "none"
  if gwpy == "yes":
    dmgbonus = dmgbonus + 3
    gwpcharge = gwpcharge - 1
  verdantbonusa = 0
  verdantbonusb = 0
  verdantcharge = 0
  verdantchargeyes = 0
  shadebonus = 0
  if (((6 <= hours <= 12) and (timeofday == "pm")) or ((1 <= hours <= 6) and (timeofday == "am"))):
    ni = 1
    enemy1ac += 3
    shadebonus += 3
  statusb = "none"
  loot = "yes"
  rage = "no"
  injury1 = 0
  playaudio("Cavern of the Assassin.mp3")
  print("======================================")
  time.sleep(1)
  print("...")
  time.sleep(1)
  print("...")
  time.sleep(1)
  print("...")
  time.sleep(1)
  print("...")
  time.sleep(1)
  dt(0.03,"The mysterious figure turns slowly, their cloak shifting in a nonexistent wind.  The iron bracelets around their arms clink as they reach up and snap their fingers, immediately darkening the cavern.")
  time.sleep(2)
  bosstext("[Azaerol, Assassin of Corrupted Caverns]", 4)
  time.sleep(2)
  print(" \                        ")
  time.sleep(0.3)
  print("   \\                     ")
  time.sleep(0.3)
  print("     \\                   ")
  time.sleep(0.3)
  print("       \\\                ")
  time.sleep(0.3)
  print("         \\\              ")
  time.sleep(0.3)
  print("           \\\\           ")
  time.sleep(0.3)
  print("             \\\\         ")
  time.sleep(0.8)
  clearscreen()
  while enemy1hp > 0 and hp > 0:
    attack()
    if injury > 0:
      hp = hp - injury
      print("You bleed for " + str(injury) + " damage.")
      injury = injury - 1
    print("")
    if enemy1hp > 0 and hp > 0:
      bossmove = random.randint(1, 10) + shadebonus
      if 1 <= bossmove <= 4:
        #normal attack
        if random.randint(1, 20) + bossatkbonus >= ac:
          bossdmg = 3 + random.randint(1, 6)
          hp = hp - bossdmg
          if random.randint(1, 20) + bossatkbonus >= ac:
            bossdmg2 = 2 + random.randint(1, 4)
            hp = hp - bossdmg2
            print("Azaerol darts forwards and slashes twice with two knives, made of glinting silver.  The room darkens slightly.")
            time.sleep(2)
            print("")
            if rage == "yes":
              if random.randint(1, 2) == 2:
                hp = hp + 1
                print("You take " + red + str(bossdmg - 1) + white +                      " damage!")
              else:
                print("You take " + red + str(bossdmg) + white + " damage!")
            else:
              print("You take " + red + str(bossdmg) + white + " damage!")
            time.sleep(0.5)
            if rage == "yes":
              if random.randint(1, 2) == 2:
                hp = hp + 1
                print("You take " + red + str(bossdmg2 - 1) + white +                      " damage!")
              else:
                print("You take " + red + str(bossdmg2) + white + " damage!")
            else:
              print("You take " + red + str(bossdmg2) + white + " damage!")
            print("You have " + str(hp) + " HP left.")
          else:
            print("Azaerol darts forwards and slashes with two knives, but only one strikes.  The room darkens slightly.")
            time.sleep(2)
            print("")
            if rage == "yes":
              if random.randint(1, 2) == 2:
                hp = hp + 1
                print("You take " + red + str(bossdmg - 1) + white +                      " damage!")
              else:
                print("You take " + red + str(bossdmg) + white + " damage!")
            else:
              print("You take " + red + str(bossdmg) + white + " damage!")
            print("You have " + str(hp) + " HP left.")
          enemy1ac = enemy1ac + 1
          shadebonus = shadebonus + 1
        else:
          print("The assassin lunges and misses.")
          print("")
          if action == "block":
            enemy1hp = enemy1hp - 2
            print("You strike out with a counterattack!")
            print("")
            if eqweapon == "phalanx polearm":
              enemy1hp = enemy1hp - 2
      if 5 <= bossmove <= 7:
        #swords dance
        enemy1ac -= shadebonus
        bossatkbonus += (shadebonus + 1)
        shadebonus = 0
        print("The assassin draws in the darkness, and then unleashes it in a spiraling blade dance.  Vorpal energy forms a mini tornado that cycles with the blades before disappearing.")
        time.sleep(2)
      if 8 <= bossmove <= 10:
        #night rune
        enemy1ac -= shadebonus
        darkstrike = shadebonus
        shadebonus = 0
        print("The assassin traces a mysterious rune in the air.  They flourish their blades before unleashing a pulsating needle-shaped blast of dark energy directly at you.  As much as you try to dodge, it locks on to you.")
        time.sleep(2)
        hp = hp - (darkstrike * 5 + 4)
        print("You take " + red + str((darkstrike * 5 + 4)) + white +              " damage!")
      if bossmove > 11:
        #ultimate attack
        shadebonus = 0
        dt(0.02,  "The assassin drops their knifes, rather suddenly.  All around the cave, gems start gleaming with shining light, then that light is stolen from the gems and immediately becomes an empty void, not darkness but rather the inverse of light.  As the empty void shimmering from the gems reverberates around the room, piercing beams start firing at you.")
        time.sleep(1)
        shadowstrike = 0
        while shadowstrike <= 15:
          if bossatkbonus + 3 > ac:
            ssdmg = random.randint(1, 2) + 1
            print("A shadowy bolt tears through you, dealing " + str(ssdmg) +                  " damage.")
            time.sleep(0.5)
            print("")
          else:
            shadowstrike += 1
      if ni == 1:
        ac += 1
        shadebonus += 1
    if injury1 > 0:
      enemy1hp = enemy1hp - injury1
      print("The assassin bleeds for " + str(injury1) + " damage.")
      injury1 = injury1 - 1
      time.sleep(0.5)
    if 0 >= hp and wsyes == "no":
      print("You have fallen.")
    elif 0 >= hp and wsyes == "yes":
      print("You revert form.")
      ac = wsac
      maxhp = wsmaxhp
      hp = wshp
      eqweapon = wsweapon
      atkbonus = wsatkbonus
      dmgbonus = wsdmgbonus
    if action == "block":
      ac = ac - 1
      if eqoffhand == "wooden shield":
        ac = ac - 1
      if eqoffhand == "primordial shield":
        ac = ac - 15
    print("")
  atkbonus = atkbonus - monkbonus
  magicbonus = magicbonus - leafybonus
  magicbonus = magicbonus - verdantbonusa
  dmgbonus = dmgbonus - verdantbonusb
  if gwpy == "yes":
    dmgbonus = dmgbonus - 3
    if gwpcharge == 0:
      gwpy = "no"
  if wsyes == "yes":
    print("You revert form.")
    ac = wsac
    maxhp = wsmaxhp
    hp = wshp
    eqweapon = wsweapon
    atkbonus = wsatkbonus
    dmgbonus = wsdmgbonus
    battleactions.append("magic")
  if rage == "yes":
    print("Your anger fades.")
    ac = ac + 4
    atkbonus = atkbonus - 2
    dmgbonus = dmgbonus - 1
  rage = "no"
  if loot == "yes" and hp > 0:
    print("The battle is over.  You stand victorious.")
    bossloot = random.randint(1, 4)
    if bossloot == 1:
      bossloot = ("silver twinblades")
      inventory.append("silver twinblades")
    elif bossloot == 2:
      bossloot = ("shade's edge")
      inventory.append("shade's edge")
    elif bossloot == 3:
      bossloot = ("scroll of night")
      inventory.append("scroll of night")
    else:
      bossloot = ("sigil of night")
      inventory.append("sigil of night")
    print("You got a " + bossloot + "!")
    time.sleep(0.2)
    goldg = random.randint(8, 20)
    gc += goldg
    print("You found " + goldg + "" + gold + "gc" + white + "!")
    time.sleep(0.2)
    if random.randint(1, 3) == 3:
      inventory.append("invisibility potion")
      print("You obtained an invisibility potion!")
      time.sleep(0.2)
    if random.randint(1, 3) == 3:
      inventory.append("invisibility potion")
      print("You obtained an invisibility potion!")
      time.sleep(0.2)
    if random.randint(1, 10) == 10:
      inventory.append("nightwave rod")
      print("You obtained a Nightwave Rod!")
      time.sleep(0.2)
    if ni == 1:
      inventory.append("night badge")
      print("You obtained a Night Badge!")
      time.sleep(0.2)
    time.sleep(1)
    print("[ENTER] to continue.")
    waitv = input("> ")
    timeshift(0,15)
    locationreturn()
  else:
    loot = "no"
    time.sleep(1)
    print("You died. Heading to the nearest village...")
    hp = 1
    StonesEdge()

def savedata():
    global spells, maxspells, locationactions, quests, eqgear, battleactions, magicbonus, atkbonus, ac, location, hp, maxhp, style, pc, gc, sc, cc, eqhelm, eqarmor, eqgreaves, inventory, eqweapon, eqoffhand, minutes, hunger, maxhunger, hours, timeofday, sclass, stylep, throwingknife, d2b, eat, gt, cspdb, soq, quests, vq, bardcd, storagelist, bowbonus, knifebonus, gsq, os1, bestiarylist, citiesbeento, weather, eqrod
    savefilepath = "savedata.txt"
    try:
        with open(savefilepath, "w") as savefile:
          savefile.write(f"spells: {spells}\n")
          savefile.write(f"maxspells: {maxspells}\n")
          savefile.write(f"locationactions: {locationactions}\n")
          savefile.write(f"quests: {quests}\n")
          savefile.write(f"eqgear: {eqgear}\n")
          savefile.write(f"battleactions: {battleactions}\n")
          savefile.write(f"magicbonus: {magicbonus}\n")
          savefile.write(f"atkbonus: {atkbonus}\n")
          savefile.write(f"ac: {ac}\n")
          savefile.write(f"location: {location}\n")
          savefile.write(f"hp: {hp}\n")
          savefile.write(f"maxhp: {maxhp}\n")
          savefile.write(f"style: {style}\n")
          savefile.write(f"pc: {pc}\n")
          savefile.write(f"gc: {gc}\n")
          savefile.write(f"sc: {sc}\n")
          savefile.write(f"cc: {cc}\n")
          savefile.write(f"eqhelm: {eqhelm}\n")
          savefile.write(f"eqarmor: {eqarmor}\n")
          savefile.write(f"eqgreaves: {eqgreaves}\n")
          savefile.write(f"inventory: {inventory}\n")
          savefile.write(f"eqweapon: {eqweapon}\n")
          savefile.write(f"eqoffhand: {eqoffhand}\n")
          savefile.write(f"minutes: {minutes}\n")
          savefile.write(f"hunger: {hunger}\n")
          savefile.write(f"maxhunger: {maxhunger}\n")
          savefile.write(f"hours: {hours}\n")
          savefile.write(f"timeofday: {timeofday}\n")
          savefile.write(f"sclass: {sclass}\n")
          savefile.write(f"stylep: {stylep}\n")
          savefile.write(f"throwingknife: {throwingknife}\n")
          savefile.write(f"d2b: {d2b}\n")
          savefile.write(f"eat: {eat}\n")
          savefile.write(f"gt: {gt}\n")
          savefile.write(f"cspdb: {cspdb}\n")
          savefile.write(f"soq: {soq}\n")
          savefile.write(f"quests: {quests}\n")
          savefile.write(f"vq: {vq}\n")
          savefile.write(f"bardcd: {bardcd}\n")
          savefile.write(f"storagelist: {storagelist}\n")
          savefile.write(f"bowbonus: {bowbonus}\n")
          savefile.write(f"knifebonus: {knifebonus}\n")
          savefile.write(f"gsq: {gsq}\n")
          savefile.write(f"os1: {os1}\n")
          savefile.write(f"bestiarylist: {bestiarylist}\n")
          savefile.write(f"citiesbeento: {citiesbeento}\n")
          savefile.write(f"weather: {weather}\n")
          savefile.write(f"eqrod: {eqrod}\n")
          
        print("Data saved successfully!")
        time.sleep(1)
        locationreturn()
    
    except Exception as e:
        print(f"An error occurred while saving data: {e}")



def loaddata():
    global spells, maxspells, locationactions, quests, eqgear, battleactions, magicbonus, atkbonus, ac, location, hp, maxhp, style, pc, gc, sc, cc, eqhelm, eqarmor, eqgreaves, inventory, eqweapon, eqoffhand, minutes, hunger, maxhunger, hours, timeofday, sclass, stylep, throwingknife, d2b, eat, gt, cspdb, soq, quests, vq, bardcd, storagelist, bowbonus, knifebonus, gsq, os1, bestiarylist, citiesbeento, weather, eqrod
    savefilepath = "savedata.txt"
    try:
        with open(savefilepath, "r") as savefile:
            savefile_lines = savefile.readlines()

        # Process each line
        for line in savefile_lines:
            if "spells: " in line: #list
                spells_str = line.replace("spells: ", "").strip()
                spells_str = spells_str.replace("'", "").replace("[", "").replace("]", "").strip()
                spells = [item.strip() for item in spells_str.split(',') if item]
            elif "maxspells: " in line: #list
                maxspells_str = line.replace("maxspells: ", "").strip()
                maxspells_str = maxspells_str.replace("'", "").replace("[", "").replace("]", "").strip()
                maxspells = [item.strip() for item in maxspells_str.split(',') if item]
            elif "locationactions: " in line: #list
                actions_str = line.replace("locationactions: ", "").strip()
                actions_str = actions_str.replace("'", "").replace("[", "").replace("]", "").strip()
                locationactions = [action.strip() for action in actions_str.split(',') if action]
            elif "quests: " in line: #list
                quest_str = line.replace("quests: ", "").strip()
                quest_str = actions_str.replace("'", "").replace("[", "").replace("]", "").strip()
                quests = [action.strip() for action in quest_str.split(',') if action]
            elif "eqgear: " in line: #list
                eqgear_str = line.replace("eqgear: ", "").strip()
                eqgear_str = eqgear_str.replace("'", "").replace("[", "").replace("]", "").strip()
                eqgear = [item.strip() for item in eqgear_str.split(',') if item]
            elif "battleactions: " in line: #list
                battleactions_str = line.replace("battleactions: ", "").strip()
                battleactions_str = battleactions_str.replace("'", "").replace("[", "").replace("]", "").strip()
                battleactions = [action.strip() for action in battleactions_str.split(',') if action]
            elif "magicbonus: " in line:
                magicbonus_str = line.replace("magicbonus: ", "").strip()
                try:
                    magicbonus = int(magicbonus_str)
                except ValueError:
                    magicbonus = 0
            elif "atkbonus: " in line: #integer
                atkbonus_str = line.replace("atkbonus: ", "").strip()
                try:
                    atkbonus = int(atkbonus_str)
                except ValueError:
                    atkbonus = 0
            elif "ac: " in line: #integer
                ac_str = line.replace("ac: ", "").strip()
                try:
                    ac = int(ac_str)
                except ValueError:
                    ac = 0
            elif "location: " in line: #string
                location = line.replace("location: ", "").strip()
            elif "hp: " in line: #integer
                hp_str = line.replace("hp: ", "").strip()
                try:
                    hp = int(hp_str)
                except ValueError:
                    hp = 0
            elif "maxhp: " in line: #integer
                maxhp_str = line.replace("maxhp: ", "").strip()
                try:
                    maxhp = int(maxhp_str)
                except ValueError:
                    maxhp = 0
            elif "style: " in line: #string
                style = line.replace("style: ", "").strip()
            elif "pc: " in line: #integer
                pc_str = line.replace("pc: ", "").strip()
                try:
                    pc = int(pc_str)
                except ValueError:
                    pc = 0
            elif "gc: " in line: #integer
              gc_str = line.replace("gc: ", "").strip()
              try:
                gc = int(gc_str)
              except ValueError:
                gc = 0
            elif "sc: " in line: #integer
              sc_str = line.replace("sc: ", "").strip()
              try:
                sc = int(sc_str)
              except ValueError:
                sc = 0
            elif "cc: " in line: #integer
              cc_str = line.replace("cc: ", "").strip()
              try:
                cc = int(cc_str)
              except ValueError:
                cc = 0
            elif "eqhelm: " in line: #string
                eqhelm = line.replace("eqhelm: ", "").strip()
            elif "eqarmor: " in line: #string
                eqarmor = line.replace("eqarmor: ", "").strip()
            elif "eqgreaves: " in line: #string
                eqgreaves = line.replace("eqgreaves: ", "").strip()
            elif "inventory: " in line: #list
                inventory_str = line.replace("inventory: ", "").strip()
                inventory_str = inventory_str.replace("'", "").replace("[", "").replace("]", "").strip()
                inventory = [item.strip() for item in inventory_str.split(',') if item]
            elif "eqweapon: " in line: #string
                eqweapon = line.replace("eqweapon: ", "").strip()
            elif "eqoffhand: " in line: #string
                eqoffhand = line.replace("eqoffhand: ", "").strip()
            elif "minutes: " in line: #integer
              minutes_str = line.replace("minutes: ", "").strip()
              try:
                minutes = int(minutes_str)
              except ValueError:
                minutes = 0
            elif "hunger: " in line: #integer
              hunger_str = line.replace("hunger: ", "").strip()
              try:
                hunger = int(hunger_str)
              except ValueError:
                hunger = 0
            elif "maxhunger: " in line: #integer
              maxhunger_str = line.replace("maxhunger: ", "").strip()
              try:
                maxhunger = int(maxhunger_str)
              except ValueError:
                maxhunger = 0
            elif "hours: " in line: #integer
              hours_str = line.replace("hours: ", "").strip()
              try:
                hours = int(hours_str)
              except ValueError:
                hours = 0
            elif "timeofday: " in line: #string
                timeofday = line.replace("timeofday: ", "").strip()
            elif "sclass: " in line: #string
                sclass = line.replace("sclass: ", "").strip()
            elif "stylep: " in line: #string
                stylep = line.replace("stylep: ", "").strip()
            elif "throwingknife: " in line: #integer
              throwingknife_str = line.replace("throwingknife: ", "").strip()
              try:
                throwingknife = int(throwingknife_str)
              except ValueError:
                throwingknife = 0
            elif "d2b: " in line: #integer
              d2b_str = line.replace("d2b: ", "").strip()
              try:
                d2b = int(d2b_str)
              except ValueError:
                d2b = 0
            elif "eat: " in line: #string
                eat = line.replace("eat: ", "").strip()
            elif "gt: " in line: #integer
              gt_str = line.replace("gt: ", "").strip()
              try:
                gt = int(gt_str)
              except ValueError:
                gt = 0
            elif "cspdb: " in line: #integer
              cspdb_str = line.replace("cspdb: ", "").strip()
              try:
                cspdb = int(cspdb_str)
              except ValueError:
                cspdb = 0
            elif "soq: " in line: #integer
              soq_str = line.replace("soq: ", "").strip()
              try:
                soq = int(soq_str)
              except ValueError:
                soq = 0
            elif "csb1: " in line: #integer
              csb1_str = line.replace("csb1: ", "").strip()
              try:
                csb1 = int(csb1_str)
              except ValueError:
                csb1 = 0
            elif "vq: " in line: #integer
              vq_str = line.replace("vq: ", "").strip()
              try:
                vq = int(vq_str)
              except ValueError:
                vq = 0
            elif "bardcd: " in line: #integer
              bardcd_str = line.replace("bardcd: ", "").strip()
              try:
                bardcd = int(bardcd_str)
              except ValueError:
                bardcd = 0
            elif "storagelist: " in line: #list
                storagelist_str = line.replace("storagelist: ", "").strip()
                storagelist_str = storagelist_str.replace("'", "").replace("[", "").replace("]", "").strip()
                storagelist = [item.strip() for item in storagelist_str.split(',') if item]
            elif "bowbonus: " in line: #integer
              bowbonus_str = line.replace("bowbonus: ", "").strip()
              try:
                bowbonus = int(bowbonus_str)
              except ValueError:
                bowbonus = 0
            elif "knifebonus: " in line: #integer
              knifebonus_str = line.replace("knifebonus: ", "").strip()
              try:
                knifebonus = int(knifebonus_str)
              except ValueError:
                knifebonus = 0
            elif "gsq: " in line: #integer
              gsq_str = line.replace("gsq: ", "").strip()
              try:
                gsq = int(gsq_str)
              except ValueError:
                gsq = 0
            elif "os1: " in line: #integer
              os1_str = line.replace("os1: ", "").strip()
              try:
                os1 = int(os1_str)
              except ValueError:
                os1 = 0
            elif "bestiarylist: " in line: #list
                bestiarylist_str = line.replace("bestiarylist: ", "").strip()
                bestiarylist_str = bestiarylist_str.replace("'", "").replace("[", "").replace("]", "").strip()
                bestiarylist = [item.strip() for item in bestiarylist_str.split(',') if item]
            elif "citiesbeento: " in line: #list
                citiesbeento_str = line.replace("citiesbeento: ", "").strip()
                citiesbeento_str = citiesbeento_str.replace("'", "").replace("[", "").replace("]", "").strip()
                citiesbeento = [item.strip() for item in citiesbeento_str.split(',') if item]
            elif "weather: " in line: #string
                weather = line.replace("weather: ", "").strip()
            elif "eqrod: " in line:  # string
                eqrod = line.replace("eqrod: ", "").strip()

        print("Data loaded!")
        time.sleep(1)
        locationreturn()  # Call the location return function
        #new idea, how about instead of using locationreturn (which clearly seems to just close the program after running a successful load), we just call the function of the saved location?
        #this way, we can load the game and continue playing where we left off
        

    except FileNotFoundError:
        print(f"Error: The file '{savefilepath}' does not exist.")
    except Exception as e:
        print(f"Oh shit, something went wrong: {e}")
  
  
def darklingoutpost():
  global loot, enemies, sc, hp, maxhp
  dt(0.03,"You see the rift in the sky, a portal of sorts to the realm of Arrowfall.")
  time.sleep(0.2)
  print("https://replit.com/@OverdriveReplit/Arrowfall-A-full-multiplayer-open-world-rpg?v=1")
  time.sleep(0.5)
  print("[ENTER] to continue.")
  wait = input()
  dt(0.03,"As you get closer, you see a cold tower of stone, fortfied with a small wall, guarded by strange foes not seen before in Iloraea.")
  time.sleep(0.2)
  print("Do you approach?")
  apar = input("> ").lower()
  if ((apar == "yes") or (apar == "y")):
    dt(0.03,"As you approach, two of the strange creatures approach you, holding spears.  These must be the 'darklings' the guide told you about.")
    enemies.append("darkling")
    enemies.append("darkling")
    combat()
    if loot == "yes":
      dt(0.03,"You walk within the ragged stone walls cautiously.  A strange cloaked figure is standing at the door.  As soon as they turn around and see you, they fly into the air at extreme speeds and dash into a window.")
      print('After staring up for a moment, you swing the door open with a loud creak.')
      time.sleep(2)
      dt(0.02,"The room is cold and clammy.  It's round, with crates and boxes lining the floors.  A staircase lies to the right of you.")
      print("Would you like to look around the room further, or just head up the stairs?")
      looka = input('').lower()
      if ((looka == "yes") or (looka == "y")):
        dt(0.02,'Scrolls of paper line the walls, with rough and crude sketches of people - perhaps prisoners in a dungeon below?  Barrels line a wall, smelling strongly of liquor, and a strong wind blows in through a crack in the wall.')
        time.sleep(2)
        print("")
        print("You head upstairs.")
        time.sleep(1)
        print("")
      print("The wooden stairs creak under your feet. Upon reaching the top, you slowly push open the stone door - and groan.")
      time.sleep(1)
      print("At least someting here is familiar - a goblin stands in front of you, accompanied by a darkling like you saw earlier.")
      time.sleep(2)
      print("")
      enemies.append("darkling")
      enemies.append('goblin')
      combat()
      if loot == "yes":
        dt(0.02,"You pause, then look around.  Aside from the darkling and goblin laying on the floor, this room looks clean - a common room of sorts.  A pair of dice lie on a nearby table, perhaps used for a game. A ladder lies on the opposite side of the room.  You see a small pouch of coins on the ground, would you like to pick it up?")
        pouch = input('').lower()
        if pouch == "yes":
          sc += 12
          print("")
          print("You gained " + silver + "12 sc" + white + "!")
          time.sleep(1)
        print("")
        print("You scale the ladder quickly, it seems raggedly and insecure.")
        time.sleep(1)
        dt(0.02,"At the top, you see a room with several foes inside.  A tall serpentine humanoid, a big brute resembling an orc, but with pointier ears and seemingly much more cunning, and a darkling.  A door stands behind them.")
        enemies.append("elf brute")
        enemies.append("darkling")
        enemies.append("serpenite")
        combat()
        if loot == "yes":
          print("You note a small flask of health potion on a table nearby.  Would you like to drink from it?")
          drh = input("> ").lower()
          if ((drh == "yes") or (drh == "yes")):
            hp = maxhp
            print("You feel revitalized.")
            time.sleep(1)
            print("")
          print("You head towards the door.")
          time.sleep(2)
          print("As you walk inside, one final brute stands between you, and the strange figure you saw at the entrance, who is sitting on a massive floating book.")
          enemies.append('elf brute')
          combat()
          if loot == "yes":
            print("The brute slumps to the ground.")
            time.sleep(2)
            dt(0.02,"The strange masked figure stands up, floating slightly in midair.  Darkness dances around the room.  The lights extinguish themselves, except for two candles in the corner of the room. The mage lifts a staff, and pounds it on the floor.")
            arrowboss()
            if loot == "yes":
              print("You are victorious! You head back to Falezrin.")
              time.sleep(0.2)
              print("Upon getting there, you hear reports that the rift has summoned more foes for you to face.")
              time.sleep(1)
              print("")
              Falezrin()
            else:
              print("You retreat to Falezrin, scampering out of the tower...")
              time.sleep(1)
              locationreturn()
          else:
            print("You retreat to Falezrin, scampering out of the tower...")
            time.sleep(1)
            locationreturn()
        else:
          print("You retreat to Falezrin, scampering out of the tower...")
          time.sleep(1)
          locationreturn()
      else:
        print("You retreat to Falezrin, scampering out of the tower...")
        time.sleep(1)
        locationreturn()
    else:
      print("You retreat to Falezrin...")
      time.sleep(1)
      locationreturn()
  else:
    print("You head back to Falezrin...")
    time.sleep(1)
    locationreturn()

def savannahencounter():
  global enemies
  senemies = ["rhino", "rhino", "lion", "lion", "hippopotamus", "dire lion"]
  if random.randint(1,6) == 6:
    num = random.randint(1,20)
    if num < 10:
      rnum = 1
    elif num < 17:
      rnum = 2
    else:
      rnum = 3
    for i in range(rnum):
      enemies.append(senemies[random.randint(0,len(senemies)-1)])

def arrowboss():
  global minutes, hours, DR, loot, maxhp, hp, ac, atkbonus, dmgbonus, rage, throwingknife, eqweapon, eqhelm, wsyes, sclass, magicbonus, hours, timeofday, eqoffhand, gc, inventory, gwpy, gwpcharge, locations, monkbonus, leafybonus, injury1, injury2, injury3, enemy1dmgbonus, enemy2dmgbonus, enemy3dmgbonus, enemy1ac, enemy2ac, enemy3ac, action, rage, tac, av, targeteden, inventory, snipe, reload, bowbonus
  ni = 0
  enemies = ["mage"]
  injury = 0
  leafybonus = 0
  monkbonus = 0
  enemy1hp = 45
  enemy1ac = 12
  shadoworb = 1
  bossatkbonus = 6
  bossstatusg = "none"
  bossstatusb = "none"
  if gwpy == "yes":
    dmgbonus = dmgbonus + 3
    gwpcharge = gwpcharge - 1
  verdantbonusa = 0
  verdantbonusb = 0
  verdantcharge = 0
  verdantchargeyes = 0
  statusb = "none"
  loot = "yes"
  rage = "no"
  injury1 = 0
  print("======================================")
  time.sleep(1)
  print("...")
  time.sleep(1)
  print("...")
  time.sleep(1)
  print("...")
  time.sleep(1)
  print("...")
  time.sleep(1)
  bosstext("[Shadow Mage, from Distant Realms]", 4)
  time.sleep(2)
  print(" \                        ")
  time.sleep(0.3)
  print("   \\                     ")
  time.sleep(0.3)
  print("     \\                   ")
  time.sleep(0.3)
  print("       \\\                ")
  time.sleep(0.3)
  print("         \\\              ")
  time.sleep(0.3)
  print("           \\\\           ")
  time.sleep(0.3)
  print("             \\\\         ")
  time.sleep(0.8)
  clearscreen()
  while enemy1hp > 0 and hp > 0:
    attack()
    if injury > 0:
      hp = hp - injury
      print("You bleed for " + str(injury) + " damage.")
      injury = injury - 1
    print("")
    if enemy1hp > 0 and hp > 0:
      bossmove = random.randint(1, 10)
      if 1 <= bossmove <= 4:
        #normal attack
        if random.randint(1, 20) + bossatkbonus >= ac:
          print("A bolt of dark energy is fired at you.")
          hp -= random.randint(4, 6)
        else:
          print("The mage's dark pulse misses.")
          print("")
          if action == "block":
            enemy1hp = enemy1hp - 2
            print("You strike out with a counterattack!")
            print("")
            if eqweapon == "phalanx polearm":
              enemy1hp = enemy1hp - 2
      if 5 <= bossmove <= 7:
        if shadoworb == 0:
          print("The mage fires a slow moving shadow orb, locked in on your location.")
          shadoworb = 1
          time.sleep(2)
        else:
          print("Darkness swirls around the room more, obscuring your vision.")
          enemy1ac += 1
      if 8 <= bossmove <= 10:
        print("The mage slams their staff on the floor, and you feel the life being sucked out of you.")
        lifedrain = 2 * random.randint(3, 5)
        hp -= lifedrain
        enemy1hp += lifedrain / 2
    if injury1 != 0:
      enemy1hp = enemy1hp - injury1
      print("The assassin bleeds for " + str(injury1) + " damage.")
      injury1 = injury1 - 1
      time.sleep(0.5)
    if 0 >= hp and wsyes == "no":
      print("You have fallen.")
    elif 0 >= hp and wsyes == "yes":
      print("You revert form.")
      ac = wsac
      maxhp = wsmaxhp
      hp = wshp
      eqweapon = wsweapon
      atkbonus = wsatkbonus
      dmgbonus = wsdmgbonus
    if action == "block":
      ac = ac - 1
      if eqoffhand == "wooden shield":
        ac = ac - 1
      if eqoffhand == "primordial shield":
        ac = ac - 15
    if shadoworb == 2:
      shadoworb = 0
      print("The shadowy orb slams into you.")
      time.sleep(2)
      hp -= random.randint(5, 14)
    if shadoworb == 1:
      shadoworb = 2
    print("")
  atkbonus = atkbonus - monkbonus
  magicbonus = magicbonus - leafybonus
  magicbonus = magicbonus - verdantbonusa
  dmgbonus = dmgbonus - verdantbonusb
  if gwpy == "yes":
    dmgbonus = dmgbonus - 3
    if gwpcharge == 0:
      gwpy = "no"
  if wsyes == "yes":
    print("You revert form.")
    ac = wsac
    maxhp = wsmaxhp
    hp = wshp
    eqweapon = wsweapon
    atkbonus = wsatkbonus
    dmgbonus = wsdmgbonus
    battleactions.append("magic")
  if rage == "yes":
    print("Your anger fades.")
    ac = ac + 4
    atkbonus = atkbonus - 2
    dmgbonus = dmgbonus - 1
  rage = "no"
  if loot == "yes" and hp > 0:
    print("The battle is over.  You stand victorious.")
    bossloot = random.randint(1, 3)
    if bossloot == 1:
      bossloot = ("hails of arrows tome")
      inventory.append("hails of arrows tome")
    elif bossloot == 2:
      bossloot = ("Lifedrain Staff")
      inventory.append("lifedrain staff")
    elif bossloot == 3:
      bossloot = ("Book of Shadows")
      inventory.append("book of shadows")
    print("You got a " + bossloot + "!")
    time.sleep(0.2)
    goldg = random.randint(10, 15)
    gc += goldg
    print("You found " + goldg + "" + gold + "gc" + white + "!")
    time.sleep(0.2)
    print("[ENTER] to continue.")
    waitv = input("")
    timeshift(0,15)
  else:
    loot = "no"
    time.sleep(1)
    print("You died. Heading to the nearest village...")
    hp = 1
    Falezrin()

clearscreen()
dt(0.05, "A Game by Aquilo...")
time.sleep(2)
clearscreen()
dt(0.05, "In collaboration with HADHUS...")
time.sleep(2)
clearscreen()
title()
time.sleep(2.5)
print("")
enterwait()
clearscreen()
print("Would you like to open an existing data save?\nIf you don't have one, just say no.")
saveloadyes = input("> ").lower()
if "y" in saveloadyes:
  clearscreen()
  loaddata()
else:
  dt(0.04, "Okay, starting your adventure...")
  time.sleep(0.5)
  clearscreen()
  start()
